namespace Kesco.Lib.Entities
{
    /// <summary>
    ///     SQLзапросы
    /// </summary>
    public static class SQLQueries
    {
        #region Текущие лица

        /// <summary>
        ///     Строка запроса: ТекущиеЛица
        /// </summary>
        public const string SELECT_ТекущиеЛица = @"
SELECT {0} T0.КодЛица, T0.Кличка
FROM vwЛица T0 (nolock)
WHERE EXISTS (SELECT * FROM Инвентаризация.dbo.fn_ТекущиеЛица() X WHERE КодЛица = T0.КодЛица)";

        #endregion

        #region Ресурсы лица

        /// <summary>
        ///     Строка запроса: РесурсыЛица
        /// </summary>
        public const string SELECT_РесурсыЛица =
            @"SELECT * FROM РесурсыЛица (nolock) WHERE КодРесурса = @КодРесурса AND КодЛица = @КодЛица";

        #endregion

        #region БазисПоставки

        /// <summary>
        ///     Строка запроса: Получить Базис
        /// </summary>
        public const string SELECT_ID_БазисПоставки = @"
SELECT  T0.*, T1.ВидТранспорта 
FROM    БазисыПоставок T0 INNER JOIN ВидыТранспорта T1 ON T0.КодВидаТранспорта = T1.КодВидаТранспорта 
WHERE   КодБазисаПоставки = @Id";

        #endregion

        #region Отправки

        /// <summary>
        ///     Строка запроса: Отправки
        /// </summary>
        public const string SELECT_СвойстваУчасткаОтправки = @"
IF object_id('tempdb..#СвойстваУчастка') IS NOT NULL DROP TABLE #СвойстваУчастка

CREATE TABLE #СвойстваУчастка (
	НомерДокумента nvarchar(50),
	КодДокумента int,
	КодГО int,
	УзелОтправления int,
	ОтметкиГО nvarchar(100),
	РеквизитыГО nvarchar(300),
	КодГП int,
	УзелНазначения int,
	ОтметкиГП nvarchar(100),
	РеквизитыГП nvarchar(300)
)

INSERT #СвойстваУчастка( НомерДокумента )
SELECT vwОтправкаВагоновУчастки.НомерДокумента
FROM ОтправкаВагоновВыгрузка (nolock)
	INNER JOIN vwОтправкаВагоновУчастки ON vwОтправкаВагоновУчастки.КодУчасткаОтправкиВагона = ОтправкаВагоновВыгрузка.КодОтправкиВагонаУчасток
WHERE guid = @gd

UPDATE #СвойстваУчастка SET КодДокумента = vwДокументы.КодДокумента
FROM #СвойстваУчастка
	INNER JOIN vwДокументы (nolock) ON КодТипаДокумента = 2144 AND vwДокументы.НомерДокумента = #СвойстваУчастка.НомерДокумента

-- Если существуют отправки, по которым были найдены ЖД накладные, ищем данные в Э.Ф.
IF EXISTS( SELECT * FROM #СвойстваУчастка WHERE КодДокумента IS NOT NULL )
BEGIN
	UPDATE #СвойстваУчастка SET
		КодГО = vwДокументыДанные.КодЛица3,
		УзелОтправления = vwДокументыДанные.КодТУзла1,
		ОтметкиГО = vwДокументыДанные.Text100_1,
		РеквизитыГО = vwДокументыДанные.Text300_1,
		КодГП = vwДокументыДанные.КодЛица4,
		УзелНазначения = vwДокументыДанные.КодТУзла2,
		ОтметкиГП = vwДокументыДанные.Text100_2,
		РеквизитыГП = vwДокументыДанные.Text300_2
	FROM #СвойстваУчастка
		INNER JOIN vwДокументыДанные (nolock) ON vwДокументыДанные.КодДокумента = #СвойстваУчастка.КодДокумента
END

SELECT DISTINCT КодГО, УзелОтправления, ОтметкиГО, РеквизитыГО, КодГП, УзелНазначения, ОтметкиГП, РеквизитыГП FROM #СвойстваУчастка

IF object_id('tempdb..#СвойстваУчастка') IS NOT NULL DROP TABLE #СвойстваУчастка";

        #endregion

        #region Рабочее место менеджера

        /// <summary>
        ///     Строка запроса: Договора Куратора
        /// </summary>
        public const string SELECT_ДоговораКуратора = @"
IF OBJECT_ID('tempdb..#Договора') IS NOT NULL   DROP TABLE #Договора
IF OBJECT_ID('tempdb..#Лица') IS NOT NULL       DROP TABLE #Лица

CREATE TABLE #Договора(	КодДоговора int PRIMARY KEY, НомерДоговора nvarchar(100), Договор nvarchar(300), НачалоДействияДоговора datetime,
			КодИсполнителя int, Исполнитель varchar(50), КодЗаказчика int, Заказчик varchar(50), Описание nvarchar(500),	
			ДеньПолученияДокументов int, МесяцПолученияДокументов int,
			ДеньОплаты int, МесяцОплаты int, АбонПлата money, ЕстьУсловия tinyint, БалансЗаказчика money, КодСотрудникаКуратора int)

CREATE TABLE #Лица(КодЛица int PRIMARY KEY, Кличка varchar(50))

INSERT	#Договора(КодДоговора, НомерДоговора, Договор, Описание, НачалоДействияДоговора, КодИсполнителя, КодЗаказчика, ЕстьУсловия, КодСотрудникаКуратора)
SELECT	КодДокумента, 
	    НомерДокумента,
	    CASE WHEN НазваниеДокумента <> '' THEN НазваниеДокумента ELSE ТипДокумента END +' №' + НомерДокумента + ' от ' + CONVERT(varchar,ДатаДокумента,104) Договор, 
	    Описание,
	    НачалоДействияДоговора,
	    КодИсполнителя,
	    КодЗаказчика,
	    0 ЕстьУсловия,
	    КодСотрудникаКуратора	
FROM(	SELECT	КодДокумента, КодТипаДокумента, НазваниеДокумента, ДатаДокумента, НомерДокумента, Описание,
		        КодЛица1 КодИсполнителя,
		        КодЛица2 КодЗаказчика,
		        Дата2 НачалоДействияДоговора,
		        КодСотрудника1 КодСотрудникаКуратора
	    FROM vwДокументыДокументыДанные ДД (nolock)
	    WHERE ДД.КодСотрудника1 = @КодКуратора ) X INNER JOIN 
	    ТипыДокументов ON X.КодТипаДокумента = ТипыДокументов.КодТипаДокумента
WHERE	EXISTS(SELECT * FROM ТипыДокументов Parent WHERE Parent.КодТипаДокумента=2039 AND Parent.L<=ТипыДокументов.L AND Parent.R>=ТипыДокументов.R) --AND КодДокумента=3019449

--удаляем из списка договора, работа по которым завершена				
DELETE FROM #Договора WHERE EXISTS(SELECT * FROM ПодписиДокументов WHERE КодДокумента=#Договора.КодДоговора AND ТипПодписи=1)

-- Получим названия лиц.
INSERT	#Лица
SELECT	КодЛица, Кличка 
FROM	Справочники.dbo.vwЛица Лица (nolock)
WHERE	КодЛица IN (SELECT КодИсполнителя FROM #Договора UNION SELECT КодЗаказчика FROM #Договора)

UPDATE	X
SET	    Исполнитель = CASE WHEN Лица.Кличка IS NULL THEN '#' + CONVERT(varchar,X.КодИсполнителя) ELSE Лица.Кличка  END
FROM	#Договора X LEFT JOIN #Лица Лица (nolock) ON X.КодИсполнителя=Лица.КодЛица

UPDATE	X
SET	    Заказчик = CASE WHEN Лица.Кличка IS NULL THEN '#' + CONVERT(varchar,X.КодЗаказчика) ELSE Лица.Кличка  END
FROM	#Договора X LEFT JOIN #Лица Лица (nolock) ON X.КодЗаказчика=Лица.КодЛица

--Получаем условия договоров
UPDATE	X
SET     ДеньПолученияДокументов		= Y.ДеньМесяцаПолученияДокументов%100,
	    МесяцПолученияДокументов	= Y.ДеньМесяцаПолученияДокументов/100-2,
	    ДеньОплаты			        = Y.ДеньМесяцаОплатыПоДоговору%100,
    	МесяцОплаты			        = Y.ДеньМесяцаОплатыПоДоговору/100-2,
	    АбонПлата			        = Y.СуммаАбонентскойПлаты,
	    ЕстьУсловия			        = 1
FROM	#Договора X INNER JOIN 
	    ДокументыДоговораОказанияУслуг Y ON X.КодДоговора = Y.КодДокументаДоговораОказанияУслуг

SELECT  КодДоговора [Код договора], НомерДоговора Номер, Договор, НачалоДействияДоговора [Начало действия],
	    КодИсполнителя [Код исполнителя], Исполнитель, КодЗаказчика [Код заказчика], Заказчик, Описание,	
		АбонПлата, ЕстьУсловия [Есть условия], БалансЗаказчика Баланс, КодСотрудникаКуратора [Код куратора]
FROM #Договора

";

        #endregion

        #region ТарификацияСотовых

        /// <summary>
        ///     Строка запроса: ТарификацияСотовых за месяц
        /// </summary>
        public const string SELECT_ТарификацияСотовых = @"
SELECT TOP 60000
            НачалоРазговора, Телефон, Абонент,
            CASE WHEN Исходящий = 1 THEN 'Исх.' ELSE 'Вх.' END Тип, 
            Услуга,
            LTRIM(ЗонаАбонента + ' ' + Направление) Описание,
            Секунд, Килобайт, 
            CASE Роуминг WHEN 1 THEN 'МГ' WHEN 2 THEN 'МН' ELSE '-' END Роуминг,
		        Сумма,
		        СуммаСотрудника		
    FROM vwТарификацияСотовых Т (nolock)
WHERE Год = @Год AND Т.Месяц=@Месяц
ORDER BY    КодТарификацииСотовых DESC";

        #endregion

        #region Sim-карты

        /// <summary>
        ///     Новость, отображаемая для сотрудников, должность которых подразумевает наличие SIM-карты
        /// </summary>
        public static string SELECT_СотрудникИмеетSIMКарту = @"
SELECT CASE WHEN EXISTS(SELECT 1 FROM vwДолжности WHERE НеобходимаSIMКарта <> 0 AND КодСотрудника =
    (SELECT КодСотрудника FROM Сотрудники WHERE SID = SUSER_SID())) THEN 1 ELSE 0 END НеобходимаSIMКарта
        ";

        /// <summary>
        ///     Строка запроса: Получить Данные Сотрудника
        /// </summary>
        public static string SELECT_ID_Сотрудник = string.Format(@"{0}WHERE КодСотрудника=@Id", SELECT_ВсеСотрудники);

        /// <summary>
        ///     Строка запроса: Получить Данные Сотрудника по GUID
        /// </summary>
        public static string SELECT_GUID_Сотрудник = string.Format(@"{0}WHERE GUID=@GUID", SELECT_ВсеСотрудники);

        /// <summary>
        ///     Строка запроса: Получить Данные общих сотрудников
        /// </summary>
        public static string SELECT_ОбщихСотрудников =
            string.Format(
                @"{0}WHERE КодОбщегоСотрудника = @Id AND КодСотрудника <> @Id AND Состояние = 0 ORDER BY Сотрудник",
                SELECT_ВсеСотрудники);

        /// <summary>
        ///     Строка запроса: Получить сотрудников кроме указанного, имееющих рабочее место на указанном расположении
        /// </summary>
        public static string SELECT_ДругиеСотрудникиНаРасположении = string.Format(@"
{0} INNER JOIN 
РабочиеМеста (nolock) ON Сотрудники.КодСотрудника = РабочиеМеста.КодСотрудника
WHERE РабочиеМеста.КодРасположения = @КодРасположения AND РабочиеМеста.КодСотрудника <> @КодСотрудника AND Сотрудники.Состояние = 0
ORDER BY Сотрудник", SELECT_ВсеСотрудники);

        /// <summary>
        ///     Строка запроса: Добавить сотрудника и получить его идентификатор
        /// </summary>
        public const string INSERT_Сотрудники = @"
INSERT Сотрудники (Фамилия, Имя, Отчество, LastName, FirstName, MiddleName, Пол, ДатаРождения, МестоРождения, КодЛицаЗаказчика, ИНН, ПенсСвидетельство) 
VALUES (@Фамилия, @Имя, @Отчество, @LastName, @FirstName, @MiddleName, @Пол, @ДатаРождения, @МестоРождения, @КодЛицаЗаказчика, @ИНН, @ПенсСвидетельство)
SELECT @@IDENTITY";

        /// <summary>
        ///     Строка запроса: Обновить данные сотрудника
        /// </summary>
        public const string UPDATE_Сотрудники = @"
UPDATE Сотрудники SET Фамилия = @Фамилия, Имя = @Имя, Отчество = @Отчество, LastName = @LastName, FirstName = @FirstName, MiddleName = @MiddleName, Пол = @Пол, 
ДатаРождения = @ДатаРождения, МестоРождения = @МестоРождения, КодЛицаЗаказчика = @КодЛицаЗаказчика, ИНН = @ИНН, ПенсСвидетельство = @ПенсСвидетельство
WHERE КодСотрудника = @КодСотрудника";

        /// <summary>
        ///     Строка запроса: Удалить замещение
        /// </summary>
        public static string DELETE_ID_ЗамещениеСотрудника = @"
UPDATE ЗамещенияСотрудников
SET До = CASE WHEN От > getdate() THEN ОТ ELSE FLOOR(CONVERT(float, getdate())) END
WHERE КодЗамещенияСотрудников = @Id";

        /// <summary>
        ///     Строка запроса: Получить Замещения сотрудника по замещаемому
        /// </summary>
        public static string SELECT_ЗамещенияСотрудника_ПоЗамещаемому = @"
SELECT  КодЗамещенияСотрудников,
	    До,
	    КодСотрудникаЗамещаемого,
	    Замещённый.ФИО Замещённый,
	    КодСотрудникаЗамещающего,
	    ИспОбязанности.ФИО ИспОбязанности,
	    ЗамещенияСотрудников.Примечания,
	    Изменил.ФИО Изменил,
	    ЗамещенияСотрудников.Изменено
FROM    ЗамещенияСотрудников INNER JOIN 
        Сотрудники Замещённый ON ЗамещенияСотрудников.КодСотрудникаЗамещаемого = Замещённый.КодСотрудника INNER JOIN 
        Сотрудники ИспОбязанности ON ЗамещенияСотрудников.КодСотрудникаЗамещающего = ИспОбязанности.КодСотрудника INNER JOIN 
        Сотрудники Изменил ON ЗамещенияСотрудников.Изменил = Изменил.КодСотрудника
WHERE   КодСотрудникаЗамещаемого = @Id AND До > getdate() AND До <>От";

        /// <summary>
        ///     Строка запроса: Получить Замещения сотрудника по замещающему
        /// </summary>
        public static string SELECT_ЗамещенияСотрудника_ПоЗамещающему = @"
SELECT  КодЗамещенияСотрудников,
	    До,
	    КодСотрудникаЗамещаемого,
	    Замещённый.ФИО Замещённый,
	    КодСотрудникаЗамещающего,
	    ИспОбязанности.ФИО ИспОбязанности,
	    ЗамещенияСотрудников.Примечания,
	    Изменил.ФИО Изменил,
	    ЗамещенияСотрудников.Изменено
FROM    ЗамещенияСотрудников INNER JOIN 
        Сотрудники Замещённый ON ЗамещенияСотрудников.КодСотрудникаЗамещаемого = Замещённый.КодСотрудника INNER JOIN
        Сотрудники ИспОбязанности ON ЗамещенияСотрудников.КодСотрудникаЗамещающего = ИспОбязанности.КодСотрудника INNER JOIN 
        Сотрудники Изменил ON ЗамещенияСотрудников.Изменил = Изменил.КодСотрудника
WHERE   КодСотрудникаЗамещающего = @Id AND До > getdate() AND До<>От";

        /// <summary>
        ///     Строка запроса: Получить Данные о последнем проходе сотрудника
        /// </summary>
        public static string SELECT_ПоследнийПроходСотрудника = @" 
SELECT Считыватель, ПоследнийПроход
FROM Инвентаризация.dbo.ПоследнийПроходСотрудников 
WHERE КодСотрудника = @КодСотрудника";

        /// <summary>
        ///     Строка запроса: Проверить наличие административных прав в компаниях сотрудника
        /// </summary>
        public static string SELECT_АдминистраторСотрудника = @" 
DECLARE @ЯвляетсяАдминистраторомСотрудника bit 
SET @ЯвляетсяАдминистраторомСотрудника = 0

SELECT  @ЯвляетсяАдминистраторомСотрудника = 1 
FROM    dbo.fn_ТекущиеРоли() X 
WHERE	КодРоли IN (31, 32, 43) AND (КодЛица = 0 OR КодЛица IN (SELECT КодЛица FROM dbo.fn_КомпанииСотрудника(@Id)))
			
SELECT @ЯвляетсяАдминистраторомСотрудника ЯвляетсяАдминистраторомСотрудника";

        /// <summary>
        ///     Строка запроса: Получить лицо заказчика
        /// </summary>
        public static string SELECT_ID_ЛицоЗаказчика = @"
--получить лицо заказчика
SELECT * FROM ЛицаЗаказчики WHERE КодЛица = @Id";

        /// <summary>
        ///     Поиск лица по имени
        /// </summary>
        public static string SELECT_ЛицоЗаказчикаПоНазванию = @" 
SELECT  ЛицаЗаказчики.*
FROM    ЛицаЗаказчики
WHERE   LOWER(Кличка) = LOWER(@Название) OR LOWER(КраткоеНазваниеРус) = LOWER(@Название) OR LOWER(КраткоеНазваниеЛат) = LOWER(@Название)";

        /// <summary>
        ///     Строка запроса: Получить рабочие места сотрудника
        /// </summary>
        public static string SELECT_РабочиеМестаСотрудника = @" 
--Получение рабочих мест сотрудника
SELECT РабочиеМеста.КодРасположения
      ,ISNULL(Расположение,'#'+CONVERT(varchar,РабочиеМеста.КодРасположения)) Расположение
      ,РасположениеRL
      ,ЧасовойПояс
      ,Офис
      ,ЛичныеПапки
      ,КодНомернойЁмкости
      ,CCM_Pool
      ,ISNULL(РабочееМесто,0) РабочееМесто
      ,Ключи
      ,Закрыто
      ,РасположениеPath0
      ,ISNULL(РасположениеPath1,'#'+CONVERT(varchar,РабочиеМеста.КодРасположения)) РасположениеPath1
      ,Parent
      ,L
      ,R
      ,РабочиеМеста.Изменил
      ,РабочиеМеста.Изменено      
FROM    РабочиеМеста LEFT JOIN 
        vwРасположения ON РабочиеМеста.КодРасположения = vwРасположения.КодРасположения
WHERE   РабочиеМеста.КодСотрудника = @id
ORDER BY L";

        /// <summary>
        ///     Строка запроса: Рабочие места сотрудника
        /// </summary>
        public static string SELECT_РабочиеМестаСотрудника2 = @" 
SELECT * FROM РабочиеМеста WHERE КодСотрудника=@КодСотрудника
";

        /// <summary>
        ///     Сотрудники на рабочем месте, кроме указанного
        /// </summary>
        public static string SELECT_СотрудникиНаРабочемМесте = @"
--Получение информации о других сотрудниках на указанном расположении
SELECT  Сотрудники.*
FROM    РабочиеМеста INNER JOIN 
        Сотрудники ON Сотрудники.КодСотрудника = РабочиеМеста.КодСотрудника 
WHERE   РабочиеМеста.КодРасположения = @id 
        AND (@idEmpl = 0 OR РабочиеМеста.КодСотрудника <> @idEmpl) 
        AND (@state = -1 OR Сотрудники.Состояние < @state)
ORDER BY Сотрудники.Сотрудник
";

        /// <summary>
        ///     Работающие сотрудники в группе
        /// </summary>
        public static string SELECT_СотрудникиВГруппе = @" 
--Получение информации о сотрудниках, работающих в группе
SELECT  *
FROM    Сотрудники
WHERE   КодОбщегоСотрудника = @id AND Состояние < 3        
ORDER BY Сотрудник
";

        /// <summary>
        ///     Строка запроса: ФотографииСотрудника по его коду
        /// </summary>
        public static string SELECT_ФотографииСотрудника = @"
--Получение фотографий сотрудника по его коду
SELECT * FROM ФотографииСотрудников WHERE КодСотрудника = @id 
ORDER BY КодФотографииСотрудника desc";

        /// <summary>
        ///     Строка запроса: ФотографииСотрудника по коду фотографии
        /// </summary>
        public static string SELECT_ФотографииСотрудникаПоФото = @"
--Получение фотографий сотрудника по его коду
SELECT * FROM ФотографииСотрудников WHERE КодФотографииСотрудника = @КодФотографииСотрудника 
";

        /// <summary>
        ///     Строка запроса: Получить сотрудников, работающих совместно на рабочем месте
        /// </summary>
        public static string SELECT_СовместнаяРаботаНаРабочемМесте = @" 
SELECT  Сотрудники.*
FROM    РабочиеМеста INNER JOIN 
        Сотрудники ON Сотрудники.КодСотрудника = РабочиеМеста.КодСотрудника 
WHERE   РабочиеМеста.КодРасположения = @КодРасположения AND (@КодСотрудника = 0 OR (РабочиеМеста.КодСотрудника <> @КодСотрудника AND Сотрудники.КодЛица IS NOT NULL)) AND Сотрудники.Состояние = 0 
ORDER BY Сотрудники.Сотрудник";

        /// <summary>
        ///     Строка запроса: Получить сотрудников, работающих посменно на рабочем месте
        /// </summary>
        public static string SELECT_СотрудниковНаПосменнойРаботе = @"
DECLARE @СписокСотрудников varchar(1000)

SELECT  @СписокСотрудников = COALESCE(@СписокСотрудников + ', ', '') + Сотрудники.Сотрудник 
FROM    РабочиеМеста INNER JOIN 
        Сотрудники ON Сотрудники.КодСотрудника = РабочиеМеста.КодСотрудника INNER JOIN 
        vwРасположения ON vwРасположения.КодРасположения = РабочиеМеста.КодРасположения
WHERE   РабочиеМеста.КодРасположения = @КодРасположения AND РабочиеМеста.КодСотрудника <> @КодСотрудника AND Сотрудники.Состояние = 0 AND КодЛица IS NOT NULL AND vwРасположения.РабочееМесто = 1
ORDER BY Сотрудники.Сотрудник

SELECT @СписокСотрудников СписокСотрудников";

        /// <summary>
        ///     Строка запроса: Получить руководителя сотрудника --НЕ ИСПОЛЬЗОВАТЬ--
        /// </summary>
        public static string SELECT_ДанныеРуководителяСотрудника = @"
SELECT  ДолжностиСотрудников.КодЛица КодОрганизацииСотрудника, 
	    Сотрудники.КодСотрудника, Сотрудники.КодЛица КодЛицаСотрудника, Сотрудники.Сотрудник, ДолжностиСотрудников.Должность ДолжностьСотрудника,
        Руководитель.КодСотрудника КодСотрудникаРуководителя, Руководитель.КодЛица КодЛицаРуководителя, Руководитель.ФИО Руководитель, ДолжностиРуководителей.Должность ДолжностьРуководителя
FROM    Сотрудники INNER JOIN 
        vwДолжности ДолжностиСотрудников ON Сотрудники.КодСотрудника = ДолжностиСотрудников.КодСотрудника INNER JOIN 
        vwДолжности ДолжностиРуководителей ON ДолжностиСотрудников.Parent = ДолжностиРуководителей.КодДолжности LEFT JOIN 
        Сотрудники Руководитель ON ДолжностиРуководителей.КодСотрудника = Руководитель.КодСотрудника
WHERE	Сотрудники.КодСотрудника = @КодСотрудника 
	    AND (@Совместитель = -1 OR ДолжностиСотрудников.Совместитель = @Совместитель)
        AND (@ТолькоПоЛицуЗаказчику = 0 OR ДолжностиСотрудников.КодЛица = @КодЛицаЗаказчика)";

        /// <summary>
        ///     Состоит ли сотрудник в группе
        /// </summary>
        public static string SELECT_CHECK_СотрудникВГруппе = @"
        SELECT * FROM Сотрудники WHERE КодСотрудника = @КодСотрудника AND КодОбщегоСотрудника IS NOT NULL
";

        /// <summary>
        ///     Поиск сотрудника по ФИО
        /// </summary>
        public static string SELECT_СотрудникПоФИО = @"
        SELECT * FROM Сотрудники WHERE LOWER(Сотрудник) = LOWER(@Сотрудник)
";

        /// <summary>
        ///     Есть ли еще рабочие места у сотрудника
        /// </summary>
        public static string SELECT_CHECK_ДругиеРабочиеМеста = @"
        SELECT * FROM РабочиеМеста WHERE КодСотрудника = @КодСотрудника AND КодРасположения != @КодРасположения
";

        /// <summary>
        ///     Есть ли у сотрудника в расположении оборудование
        /// </summary>
        public static string SELECT_CHECK_ОборудованиеСотрудникаВРасположении = @"
        SELECT КодОборудования FROM vwОборудованиеСписок WHERE КодСотрудника = @КодСотрудника AND КодРасположения = @КодРасположения
";

        /// <summary>
        ///     Оборудование сотрудника в расположении
        /// </summary>
        public static string SELECT_ОборудованиеСотрудникаВРасположении = @"
SELECT КодОборудования, ТипОборудования, МодельОборудования, t.РасположениеPath
FROM vwОборудованиеСписок t
INNER JOIN vwРасположения r ON r.КодРасположения=t.КодРасположения
    WHERE t.Списано IS NULL AND (r.КодРасположения = @КодРасположения
            OR r.РабочееМесто = 0) AND КодСотрудника = @КодСотрудника
ORDER BY КодОборудования
";

        /// <summary>
        ///     Другое Оборудование сотрудника в расположении
        /// </summary>
        public static string SELECT_ДругоеОборудованиеВРасположении = @"
SELECT КодОборудования, ТипОборудования, МодельОборудования, ФИО 
FROM vwОборудованиеСписок 
WHERE Списано IS NULL AND КодРасположения = @КодРасположения 
    AND (КодСотрудника IS NULL OR КодСотрудника <> @КодСотрудника)
";

        /// <summary>
        ///     Перемещение Оборудования
        /// </summary>
        public static string UPDATE_ПеремещениеОборудования1 = @"
INSERT INTO ОборудованиеРасположение(КодОборудования, От, КодРасположения)
SELECT ОборудованиеСотрудников.КодОборудования, getutcdate(), @КодРасположения
FROM ОборудованиеСотрудников
WHERE До IS NULL AND КодСотрудника = @КодСотрудника AND КодОборудования IN(SELECT value FROM Инвентаризация.dbo.fn_SplitInts(@СписокОборудования))
";

        /// <summary>
        ///     Строка запроса: Оборудование
        /// </summary>
        public const string SELECT_Оборудование = @"
SELECT  DISTINCT T0.КодОборудования, 
    CASE WHEN T0.СетевоеИмя = '' THEN T1.МодельОборудования + ' SN ' + T0.SN ELSE T0.СетевоеИмя END Название
FROM vwОборудование T0
INNER JOIN МоделиОборудования T1 ON T0.КодМоделиОборудования = T1.КодМоделиОборудования
INNER JOIN ТипыОборудования T2 ON T2.КодТипаОборудования = T1.КодТипаОборудования
WHERE  T0.Списано IS NULL
";


        /// <summary>
        ///     Перемещение Оборудования
        /// </summary>
        public static string UPDATE_ПеремещениеОборудования2 = @"
UPDATE ОборудованиеСотрудников SET До = @Время1
WHERE КодОборудования IN (@СписокОборудования) AND До IS NULL
INSERT INTO ОборудованиеСотрудников(КодОборудования, КодСотрудника, От,Примечания)
SELECT КодОборудования, @КодСотрудника,@Время2,''
FROM vwОборудование WHERE КодОборудования IN (SELECT value FROM Инвентаризация.dbo.fn_SplitInts(@СписокОборудования))
";

        /// <summary>
        ///     Получение ФИО общего сотрудника
        /// </summary>
        public static string SELECT_FIO_ОбщегоСотрудника = @"
        SELECT ФИО FROM Сотрудники WHERE КодСотрудника IN(SELECT КодОбщегоСотрудника FROM Сотрудники WHERE КодСотрудника = @КодСотрудника)
";

        /// <summary>
        ///     Строка запроса: Поиск места хранения по коду
        /// </summary>
        public static string SELECT_РасположениеПоID =
            string.Format(@"{0} WHERE КодРасположения = @id", string.Format(SELECT_Расположения, ""));

        /// <summary>
        ///     Строка запроса: Получение подчиненных расположений
        /// </summary>
        public static string SELECT_РасположенияПодчиненные = string.Format(
            @"{0} WHERE T0.L >= @leftKey AND T0.R <= @rightKey ORDER BY L", string.Format(SELECT_Расположения, ""));


        /// <summary>
        ///     Строка запроса: Проверка, на расположении работает группа посменной работы
        /// </summary>
        public static string SELECT_РасположениеГруппы = @"
--Проверка, на расположении работает группа посменной работы
SELECT	КодСотрудника КодГруппы
FROM	РабочиеМеста
WHERE	EXISTS(SELECT * FROM Сотрудники WHERE КодОбщегоСотрудника = РабочиеМеста.КодСотрудника)
	    AND КодРасположения = @КодРасположения";
        /// <summary>
        ///     Строка запроса: Проверка, что переданное расположение находится в офисе
        /// </summary>
        public static string SELECT_РасположениеВОфисе = @"
--Проверка, что переданное расположение находится в офисе
SELECT  Parent.КодРасположения, Parent.Расположение
FROM 	vwРасположения Parent INNER JOIN 
        vwРасположения Child ON Parent.L<=Child.L AND Parent.R>=Child.R
WHERE   Child.КодРасположения = @КодРасположения AND Parent.Офис <> 0";

        /// <summary>
        ///     Строка запроса: Проверка, организовано ли рабочее место
        /// </summary>
        public static string SELECT_РасположенияОрганизованыРабочиеМеста = @"
--Проверка, организовано ли рабочее место
SELECT  *
FROM 	vwРасположенияОрганизованыРабочиеМеста 		
WHERE   КодРасположения = @КодРасположения";

        /// <summary>
        ///     Получение информации о расположениях для дерева расположений
        /// </summary>
        public static string SELECT_РасположенияДанныеДляДерева = @"
SELECT  T0.КодРасположения Id, T0.R-L ЕстьДети, T0.Расположение Text, T0.РасположениеPath1, ISNULL(T0.Parent,0) ParentId, T0.Офис Office, T0.РабочееМесто WorkPlace, '' Фильтр,
        ISNULL(x.ЕстьСотрудники,0) ЕстьСотрудники, ISNULL(orm.КодРасположения,0) ОрганизованыРабочиеМеста, T0.ЧасовойПояс, T0.Ключи,
       T0.[Изменил], s.Сотрудник, T0.[Изменено], T0.Закрыто, T0.Закрыто status
FROM    vwРасположения T0 
LEFT JOIN vwРасположенияОрганизованыРабочиеМеста orm ON orm.КодРасположения =  T0.КодРасположения
LEFT JOIN Сотрудники s ON s.КодСотрудника = T0.Изменил
LEFT JOIN 
        (SELECT COUNT(РабочиеМеста.КодРасположения) ЕстьСотрудники,РабочиеМеста.КодРасположения
		FROM    РабочиеМеста INNER JOIN 
                Сотрудники ON РабочиеМеста.КодСотрудника = Сотрудники.КодСотрудника
		WHERE   Сотрудники.Состояние = 0
		GROUP BY КодРасположения) x ON T0.КодРасположения = x.КодРасположения
WHERE   (( (@Потомки = 1 AND ( (@Код = 0 AND T0.Parent IS NULL) OR (@Код <> 0 AND T0.Parent = @Код) ))
        OR (@Потомки = 0 AND T0.КодРасположения = @Код))
        OR (@Потомки = 2 AND (T0.КодРасположения IN ({0}) OR T0.Parent IN ({0}))))
        @OFF_CONDITION
        @ADDWHERE
ORDER BY T0.L
";

        /// <summary>
        ///     Получение информации для дерева
        /// </summary>
        public static string SELECT_РасположенияДанныеДляДерева_State = @"
SET NOCOUNT ON

IF OBJECT_ID('tempdb.#Расположения') IS NOT NULL DROP TABLE #Расположения
CREATE TABLE #Расположения(
        TempID int IDENTITY(1,1),
        [КодРасположения] [int],
        Расположение [varchar](300),       
        [Parent] [int],
        [L] [int],
        [R] [int],
        [Изменил] [int],
        [Изменено] [datetime],  
        BitMask tinyint
)

INSERT #Расположения
SELECT	T0.[КодРасположения],
        T0.Расположение,      
        T0.[Parent],
        T0.[L],
        T0.[R],
        T0.[Изменил],
        T0.[Изменено], 
        1 BitMask
FROM	vwРасположения T0 
WHERE EXISTS(SELECT * FROM vwРасположения Child 
					WHERE	Child.КодРасположения IN ({0})
						AND T0.L <=	Child.L AND T0.R>=Child.R)         
                        @ADDWHERE
      AND NOT EXISTS(SELECT * FROM #Расположения X WHERE T0.КодРасположения = X.КодРасположения)
ORDER BY T0.L

INSERT #Расположения
SELECT	T0.[КодРасположения],
        T0.Расположение,      
        T0.[Parent],
        T0.[L],
        T0.[R],
        T0.[Изменил],
        T0.[Изменено], 
        2 BitMask
FROM	vwРасположения Parent
LEFT JOIN vwРасположения T0 ON T0.Parent = Parent.КодРасположения
WHERE Parent.КодРасположения IN ({0}) AND NOT EXISTS(SELECT * FROM #Расположения X WHERE T0.КодРасположения = X.КодРасположения)
@ADDWHERE
ORDER BY Parent.L

INSERT #Расположения 
SELECT  [КодРасположения],
        Расположение,      
        [Parent],
        [L],
        [R],
        [Изменил],
        [Изменено], 
        4 BitMask
FROM    vwРасположения T0
WHERE   Parent IS NULL                                  
        AND NOT EXISTS(SELECT * FROM #Расположения X WHERE T0.КодРасположения = X.КодРасположения) 
        @ADDWHERE

SELECT #Расположения.[КодРасположения] id,
       #Расположения.Расположение text,      
       r.РасположениеPath1,
       #Расположения.[Parent] ParentId,
       #Расположения.[L],
       #Расположения.[R],
       #Расположения.BitMask,
       #Расположения.R-#Расположения.L ЕстьДети,
       r.Офис Office,
       r.РабочееМесто WorkPlace,
       ISNULL(x.ЕстьСотрудники,0) ЕстьСотрудники, 
       ISNULL(orm.КодРасположения,0) ОрганизованыРабочиеМеста, 
       r.ЧасовойПояс,
       r.Ключи,
       #Расположения.[Изменил],
       s.Сотрудник,
       #Расположения.[Изменено], 
       r.Закрыто,
       r.Закрыто Status
FROM #Расположения
INNER JOIN vwРасположения r ON #Расположения.КодРасположения = r.КодРасположения
LEFT JOIN Сотрудники s ON s.КодСотрудника = r.Изменил
LEFT JOIN vwРасположенияОрганизованыРабочиеМеста orm ON orm.КодРасположения =  r.КодРасположения
LEFT JOIN 
        (SELECT COUNT(РабочиеМеста.КодРасположения) ЕстьСотрудники,РабочиеМеста.КодРасположения
		FROM    РабочиеМеста INNER JOIN 
                Сотрудники ON РабочиеМеста.КодСотрудника = Сотрудники.КодСотрудника
		WHERE   Сотрудники.Состояние = 0
		GROUP BY КодРасположения) x ON #Расположения.КодРасположения = x.КодРасположения
--WHERE r.Закрыто = 0
ORDER BY r.L
DROP TABLE #Расположения
";

        /// <summary>
        ///     Строка запроса: Фильтрация расположений
        /// </summary>
        public static string SELECT_РасположенияДанныеДляДерева_Фильтр = @"
DECLARE @МаксимальноеКоличествоНайденных int = 100
SET NOCOUNT ON
               
IF OBJECT_ID('tempdb.#Расположения') IS NOT NULL DROP TABLE #Расположения
--DECLARE @КоличествоНайденных int
CREATE TABLE #Расположения(
        TempID int IDENTITY(1,1),
        [КодРасположения] [int],
        Расположение [varchar](300),       
        [Parent] [int],
        [L] [int],
        [R] [int],
        [Изменил] [int],
        [Изменено] [datetime],  
        BitMask tinyint
)

CREATE UNIQUE CLUSTERED INDEX PK_TempID ON #Расположения (TempID)

INSERT #Расположения
SELECT  [КодРасположения],
        Расположение,      
        [Parent],
        [L],
        [R],
        [Изменил],
        [Изменено], 
        1 BitMask
FROM    vwРасположения AS t1
WHERE   (Расположение LIKE '{0}' {1})
    AND ('{2}' = '-1' OR EXISTS (SELECT 1 FROM vwРасположения AS t2 WHERE t2.КодРасположения IN ({2}) AND t1.L >= t2.L AND t1.R <= t2.R))  
    AND  ((Закрыто=0 AND NOT EXISTS (SELECT * FROM vwРасположения Parent WHERE T1.L > Parent.L AND T1.R < Parent.R AND Parent.Закрыто=1 )) OR @Закрыто = 1)
ORDER BY L
 
SET @КоличествоНайденных = @@ROWCOUNT
DELETE #Расположения WHERE TempID > @МаксимальноеКоличествоНайденных
 
UPDATE  Parent
SET     BitMask = BitMask ^ 2
FROM    #Расположения Parent
WHERE   EXISTS(SELECT * FROM #Расположения Child WHERE Parent.L < Child.L AND Parent.R > Child.R)
 
INSERT  #Расположения
SELECT  [КодРасположения],
        Расположение,      
        [Parent],
        [L],
        [R],
        [Изменил],
        [Изменено], 
        2 BitMask
FROM    vwРасположения Parent 
WHERE   EXISTS( SELECT * FROM #Расположения Child 
                WHERE Parent.L <= Child.L AND Parent.R>=Child.R)                                        
        AND NOT EXISTS(SELECT * FROM #Расположения X WHERE Parent.КодРасположения = X.КодРасположения) AND (Закрыто=0 OR @Закрыто = 1)
 
UPDATE  #Расположения
SET     BitMask = BitMask ^ 4
WHERE   Parent IS NULL
 
INSERT #Расположения 
SELECT  [КодРасположения],
        Расположение,      
        [Parent],
        [L],
        [R],
        [Изменил],
        [Изменено], 
        4 BitMask
FROM    vwРасположения 
WHERE   (('{2}' = '-1' AND Parent IS NULL) OR КодРасположения IN ({2})) 
        AND NOT EXISTS(SELECT * FROM #Расположения X WHERE vwРасположения.КодРасположения = X.КодРасположения) AND (Закрыто=0 OR @Закрыто = 1)
        
SELECT #Расположения.[КодРасположения] id,
       #Расположения.Расположение text,      
       r.РасположениеPath1,
       #Расположения.[Parent] ParentId,
       #Расположения.[L],
       #Расположения.[R],
       #Расположения.BitMask,
       #Расположения.R-#Расположения.L ЕстьДети,
       r.Офис Office,
       r.РабочееМесто WorkPlace,
       ISNULL(x.ЕстьСотрудники,0) ЕстьСотрудники, 
       ISNULL(orm.КодРасположения,0) ОрганизованыРабочиеМеста,
       r.ЧасовойПояс,
       r.Ключи,
       #Расположения.[Изменил],
       s.Сотрудник,
       #Расположения.[Изменено],
       r.Закрыто Status
FROM #Расположения
INNER JOIN vwРасположения r ON #Расположения.КодРасположения = r.КодРасположения
LEFT JOIN Сотрудники s ON s.КодСотрудника = r.Изменил
LEFT JOIN vwРасположенияОрганизованыРабочиеМеста orm ON orm.КодРасположения =  r.КодРасположения
LEFT JOIN 
        (SELECT COUNT(РабочиеМеста.КодРасположения) ЕстьСотрудники,РабочиеМеста.КодРасположения
		FROM    РабочиеМеста INNER JOIN 
                Сотрудники ON РабочиеМеста.КодСотрудника = Сотрудники.КодСотрудника
		WHERE   Сотрудники.Состояние = 0
		GROUP BY КодРасположения) x ON #Расположения.КодРасположения = x.КодРасположения
ORDER BY r.L
DROP TABLE #Расположения
";

        /// <summary>
        ///     Строка запроса: Фильтрация расположений
        /// </summary>
        public static string SELECT_РасположенияДанныеДляДерева_ФильтрExt = @"
DECLARE @МаксимальноеКоличествоНайденных int = 100
SET NOCOUNT ON
               
IF OBJECT_ID('tempdb.#Расположения') IS NOT NULL DROP TABLE #Расположения
--DECLARE @КоличествоНайденных int
CREATE TABLE #Расположения(
        TempID int IDENTITY(1,1),
        [КодРасположения] [int],
        Расположение [varchar](300),       
        [Parent] [int],
        [L] [int],
        [R] [int],
        [Изменил] [int],
        [Изменено] [datetime], 
        BitMask tinyint
)

CREATE UNIQUE CLUSTERED INDEX PK_TempID ON #Расположения (TempID)

INSERT #Расположения
SELECT DISTINCT Id, text, Parent, L, R, Изменил, Изменено, BitMask FROM (
SELECT  
        T1.[КодРасположения],
        T1.[КодРасположения] Id,
        T1.Расположение,      
        T1.Расположение text,      
        T1.[Parent],
        T1.[L],
        T1.[R],
        T1.[Изменил],
        empl.[Сотрудник],
        T1.[Изменено], 
        1 BitMask,
        T1.РасположениеPath1, 
        T1.ЧасовойПояс, 
        T1.Ключи,
        T1.Закрыто,
        T1.Закрыто Status,
        T1.РабочееМесто,
        T1.РабочееМесто WorkPlace
        @ADDFIELD
FROM    vwРасположения AS T1
LEFT JOIN Сотрудники empl ON empl.КодСотрудника =  T1.Изменил
@ADDTABLE
WHERE ('{0}' = '-1' OR EXISTS (SELECT 1 FROM vwРасположения AS T2 WHERE T2.КодРасположения IN ({0}) AND T1.L >= T2.L AND T1.R <= T2.R))  
    @OFF_PARENT_CONDITION
) T0 @WHERE ORDER BY L
 
SET @КоличествоНайденных = @@ROWCOUNT
DELETE #Расположения WHERE TempID > @МаксимальноеКоличествоНайденных
 
UPDATE  Parent
SET     BitMask = BitMask ^ 2
FROM    #Расположения Parent
WHERE   EXISTS(SELECT * FROM #Расположения Child WHERE Parent.L < Child.L AND Parent.R > Child.R)
 
INSERT  #Расположения
SELECT  T1.КодРасположения,
        T1.Расположение,      
        T1.Parent,
        T1.L,
        T1.R,
        T1.Изменил,
        T1.Изменено, 
        2 BitMask
FROM    vwРасположения T1 
WHERE   EXISTS( SELECT * FROM #Расположения Child 
                WHERE T1.L <= Child.L AND T1.R>=Child.R)                                        
        AND NOT EXISTS(SELECT * FROM #Расположения X WHERE T1.КодРасположения = X.КодРасположения) 
        @OFF_CONDITION
 
UPDATE  #Расположения
SET     BitMask = BitMask ^ 4
WHERE   Parent IS NULL
 
INSERT #Расположения 
SELECT  T1.[КодРасположения],
        T1.Расположение,      
        T1.[Parent],
        T1.[L],
        T1.[R],
        T1.[Изменил],
        T1.[Изменено], 
        4 BitMask
FROM    vwРасположения T1
WHERE   (('{0}' = '-1' AND Parent IS NULL) OR КодРасположения IN ({0})) 
        AND NOT EXISTS(SELECT * FROM #Расположения X WHERE T1.КодРасположения = X.КодРасположения)
        @OFF_CONDITION

SELECT #Расположения.[КодРасположения] id,
       #Расположения.Расположение text,      
       r.РасположениеPath1,
       #Расположения.[Parent] ParentId,
       #Расположения.[L],
       #Расположения.[R],
       #Расположения.BitMask,
       #Расположения.R-#Расположения.L ЕстьДети,
       r.Офис Office,
       r.РабочееМесто WorkPlace,
       ISNULL(x.ЕстьСотрудники,0) ЕстьСотрудники, 
       ISNULL(orm.КодРасположения,0) ОрганизованыРабочиеМеста,
       r.ЧасовойПояс,
       r.Ключи,
       #Расположения.[Изменил],
       s.Сотрудник,
       #Расположения.[Изменено],
       r.Закрыто Status
FROM #Расположения
INNER JOIN vwРасположения r ON #Расположения.КодРасположения = r.КодРасположения
LEFT JOIN Сотрудники s ON s.КодСотрудника = r.Изменил
LEFT JOIN vwРасположенияОрганизованыРабочиеМеста orm ON orm.КодРасположения =  r.КодРасположения
LEFT JOIN 
        (SELECT COUNT(РабочиеМеста.КодРасположения) ЕстьСотрудники,РабочиеМеста.КодРасположения
		FROM    РабочиеМеста INNER JOIN 
                Сотрудники ON РабочиеМеста.КодСотрудника = Сотрудники.КодСотрудника
		WHERE   Сотрудники.Состояние = 0
		GROUP BY КодРасположения) x ON #Расположения.КодРасположения = x.КодРасположения
ORDER BY r.L
DROP TABLE #Расположения
";

        /// <summary>
        ///     Строка запроса: Поиск услуг провайдера по коду
        /// </summary>
        public static string SELECT_УслугиПровайдераПоID =
            string.Format(@"{0} WHERE КодИмпортаДопУслугБилайн = @id", string.Format(SELECT_УслугиПровайдера, ""));

        /// <summary>
        ///     Строка запроса: simкарта по id
        /// </summary>
        public static string SELECT_ID_SimКарта = @" 
SELECT * FROM vwSimКарты WHERE КодОборудования = @id";

        /// <summary>
        /// Строка запроса: Получение информации о sim-картах
        /// </summary>
        public static string SELECT_SimКарты = @"
--получение информации о sim-картах
SELECT * FROM vwSimКарты T0
";

        #endregion

        #region Service

        /// <summary>
        ///     Запрос к функции fn_ReplaceRusLat
        /// </summary>
        public const string SELECT_FN_ReplaceRusLat = "SELECT @s = dbo.fn_ReplaceRusLat(@str)";

        /// <summary>
        ///     Строка запроса: Права доступа к таблице
        /// </summary>
        public const string SELECT_ПраваНаТаблицу = @"
SELECT
    HAS_PERMS_BY_NAME(@TableName, 'OBJECT', 'select') as PermOnSelect, 
    HAS_PERMS_BY_NAME(@TableName, 'OBJECT', 'insert') as PermOnInsert, 
    HAS_PERMS_BY_NAME(@TableName, 'OBJECT', 'update') as PermOnUpdate, 
    HAS_PERMS_BY_NAME(@TableName, 'OBJECT', 'delete') as PermOnDelete; 
";

        #endregion

        #region TreeView

        /// <summary>
        ///     Строка запроса: Все узлы конкретной ветки дерева (если не заполнена строка поиска и не выбраны узлы)
        ///     @Потомки = 2 - для частичной загрузки дерева
        /// </summary>
        public const string SELECT_ДеревоВсеПотомкиУзла = @"
SELECT {1} Id, R-L ЕстьДети, {2} Text, ISNULL(Parent,0) ParentId, '' Фильтр
FROM {0}
WHERE   ((@Потомки = 1 AND ((@Код = 0 AND Parent IS NULL) OR (@Код <> 0 AND Parent = @Код)))
        OR (@Потомки = 0 AND {1} = @Код))
        OR (@Потомки = 2 AND ({1} IN ({4}) OR Parent IN ({4})))
ORDER BY {3}
";

        /// <summary>
        ///     Строка запроса: Получить список открытых узлов дерева
        /// </summary>
        public const string SELECT_ДеревоВсеРодителиУзла = @"
SELECT T0.{1} FROM {0} T0, {0} T1 WHERE T1.{1} = @id AND T1.L BETWEEN T0.L AND T0.R AND T0.{1} <> @id ORDER BY T0.L
";

        /// <summary>
        ///     Строка запроса: Получить список открытых узлов дерева
        /// </summary>
        public const string SELECT_ДеревоВсеРодителиУзлов = @"
SELECT Parent AS {1} FROM {0} 
WHERE {1} IN (SELECT value FROM Инвентаризация.dbo.fn_SplitInts(@ids))
ORDER BY L
";

        /// <summary>
        ///     Строка запроса: Загрузить узлы дерева с учетом открытых
        /// </summary>
        public const string SELECT_ДеревоОткрытыеУзлы = @"
SET NOCOUNT ON

IF OBJECT_ID('tempdb.#TreeFilter') IS NOT NULL DROP TABLE #TreeFilter
CREATE TABLE #TreeFilter(
        TempID int IDENTITY(1,1),
        [{0}] [int],
        {1} [varchar] (300),       
        [Parent] [int],
        [L] [int],
        [R] [int],
        {3} 
        {4} 
        BitMask tinyint
)

INSERT #TreeFilter
SELECT  Parent.[{0}],
        Parent.{1},      
        Parent.[Parent],
        Parent.[L],
        Parent.[R],
        {5} 
        {6} 
        1 BitMask
FROM {2} Parent
WHERE EXISTS (SELECT * FROM {2} Child WHERE Child.{0} IN({12}) AND Parent.L <= Child.L AND Parent.R>=Child.R)
ORDER BY Parent.L

INSERT #TreeFilter
SELECT Child.[{0}],
        Child.{1},      
        Child.[Parent],
        Child.[L],
        Child.[R],
        {7} 
        {8}
        2 BitMask
FROM {2} Parent
    LEFT JOIN {2} Child ON Child.Parent = Parent.{0}
WHERE Parent.{0} IN({12}) AND NOT EXISTS(SELECT* FROM #TreeFilter X WHERE Child.{0} = X.{0})
ORDER BY Parent.L

INSERT #TreeFilter 
SELECT[{0}],
        {1},      
        [Parent],
        [L],
        [R],
        {3} 
        {4} 
        4 BitMask
FROM {2}
WHERE Parent IS NULL AND NOT EXISTS(SELECT* FROM #TreeFilter X WHERE {2}.{0} = X.{0})

SELECT #TreeFilter.[{0}] id,
        #TreeFilter.{1} text,      
        #TreeFilter.[Parent] ParentId,
        #TreeFilter.[L],
        #TreeFilter.[R],
        {9} 
        {10} 
        #TreeFilter.BitMask,
        #TreeFilter.R-#TreeFilter.L ЕстьДети
FROM #TreeFilter
ORDER BY {11}
DROP TABLE #TreeFilter
";

        /// <summary>
        ///     Строка запроса: Поиск по узлам дерева
        /// </summary>
        public const string SELECT_ДеревоНайденныеУзлы = @"
DECLARE @МаксимальноеКоличествоНайденных int = 100

SET NOCOUNT ON

IF OBJECT_ID('tempdb..#TreeFilter') IS NOT NULL DROP TABLE #TreeFilter
CREATE TABLE #TreeFilter(
        TempID int IDENTITY(1,1),
        [{0}] [int],
        {1} [varchar] (300),       
        [Parent] [int],
        [L] [int],
        [R] [int],
        {5} 
        {6} 
        BitMask tinyint
)

CREATE UNIQUE CLUSTERED INDEX PK_TempID ON #TreeFilter (TempID)

INSERT #TreeFilter
SELECT [{0}],
        {1},      
        [Parent],
        [L],
        [R],
        {7} 
        {8} 
        1 BitMask
FROM {2} AS t1
WHERE {1} LIKE '{4}' 
    AND ('{12}' = '-1' OR EXISTS (SELECT 1 FROM {2} AS t2 WHERE t2.{0} IN ({12}) AND t1.L >= t2.L AND t1.R <= t2.R))  
ORDER BY L

SET @КоличествоНайденных = @@ROWCOUNT
DELETE #TreeFilter WHERE TempID > @МаксимальноеКоличествоНайденных

UPDATE Parent
SET BitMask = BitMask ^ 2
FROM #TreeFilter Parent
WHERE EXISTS (SELECT * FROM #TreeFilter Child WHERE Parent.L < Child.L AND Parent.R > Child.R)

INSERT  #TreeFilter
SELECT  [{0}],
        {1},      
        [Parent],
        [L],
        [R],
        {7} 
        {8} 
        2 BitMask
FROM {2} Parent
WHERE EXISTS (SELECT * FROM #TreeFilter Child WHERE Parent.L <= Child.L AND Parent.R>=Child.R)
        AND NOT EXISTS (SELECT * FROM #TreeFilter X WHERE Parent.{0} = X.{0})

UPDATE  #TreeFilter
SET BitMask = BitMask ^ 4
WHERE Parent IS NULL

IF 1 = {11}
BEGIN
    INSERT #TreeFilter 
    SELECT  [{0}],
            {1},      
            [Parent],
            [L],
            [R],
            {7} 
            {8} 
            4 BitMask FROM {2}
    WHERE (('{12}' = '-1' AND Parent IS NULL) OR {0} IN ({12})) AND NOT EXISTS (SELECT * FROM #TreeFilter X WHERE {2}.{0} = X.{0})
END

SELECT[{0}] id,
    {1} text,      
    [Parent] ParentId,
    [L],
    [R],
    {9} 
    {10} 
    BitMask,
    R-L ЕстьДети
FROM #TreeFilter
ORDER BY {3}

DROP TABLE #TreeFilter
";

        /// <summary>
        ///     Строка запроса: Получить полный путь к узлу дерева с помощью функции
        /// </summary>
        public const string SELECT_ДеревоПолныйПутьКУзлуФункция = @"
DECLARE  @sql nvarchar(500);
SET @sql = N'SELECT ' + @funcname + '(@Code, @PathType) Path';
exec sp_executesql @sql, N'@Code int, @PathType bit', @Code, @PathType;
";

        /// <summary>
        ///     Строка запроса: Получить полный путь к узлу дерева из поля
        /// </summary>
        public const string SELECT_ДеревоПолныйПутьКУзлу = @"
SELECT {2}{3} FROM {0} WHERE {1} = @id
";


        /// <summary>
        ///     Строка запроса: Переместить узел дерева со сменой родительского узла
        /// </summary>
        public const string UPDATE_ДеревоПеремещениеУзла = @"
UPDATE {0} SET Parent = @Parent WHERE {1} = @Id
";

        /// <summary>
        ///     Строка запроса: Переместить узел дерева без смены родительского узла
        /// </summary>
        public const string UPDATE_ДеревоПеремещениеУзлаБезСменыРодителя = @"
DECLARE @L int, @L1 int, @OLD_ID_ON_NEW_POSITION int
SELECT @L1 = L FROM {1} WHERE {2} = @Id
SELECT @L = L, @OLD_ID_ON_NEW_POSITION = {2} FROM(
    SELECT row_number() OVER (ORDER BY L ASC) AS rownumber, * FROM {1} WHERE(@Parent<> 0 AND Parent = @Parent) OR @Parent = 0 AND Parent IS NULL) RN
WHERE rownumber = @NewPosition+1
UPDATE {0} SET L = @L WHERE {2} = @Id
IF(@L1<@L)
BEGIN
    SELECT @L=L FROM {1} WHERE {2} = @Id
    UPDATE {0} SET L = @L WHERE {2} = @OLD_ID_ON_NEW_POSITION
END
";

        /// <summary>
        ///     Строка запроса: Добавить узел дерева
        /// </summary>
        public const string INSERT_ДеревоДобавлениеУзла = @"
INSERT {0} ({1}, Parent) VALUES (@name, {2})
";

        /// <summary>
        ///     Строка запроса: Редактировать узел дерева
        /// </summary>
        public const string UPDATE_ДеревоРедактированиеУзла = @"
UPDATE {0} SET {2} = @name WHERE {1} = @id
";

        /// <summary>
        ///     Строка запроса: Удалить узел дерева
        /// </summary>
        public const string DELETE_ДеревоУдалениеУзла = @"
DELETE FROM {0} WHERE {1} = @Id
";

        #endregion

        //++++++++++++++++++ CORPORATE ++++++++++++++++++

        #region Сотрудники

        /// <summary>
        ///     Строка запроса:  Является ли переданная дата рабочим днем сотрудника
        /// </summary>
        public const string SELECT_Сотрудник_РабочийДень = @"
--проверка является ли переданная дата рабочим днем сотрудника

SET DATEFIRST 1

SELECT  ISNULL((SELECT  РабочийВыходной 
                FROM    Праздники INNER JOIN 
		                vwТерритории Территории ON Праздники.КодТерритории = Территории.КодТерритории INNER JOIN
		                vwТерритории Тофиса ON Территории.L <= Тофиса.L AND Территории.R >= Тофиса.R
		                WHERE Дата = @Дата AND Тофиса.КодТерритории = ISNULL((SELECT TOP 1 Р.КодТерритории FROM РабочиеМеста INNER JOIN vwРасположения Расположения ON РабочиеМеста.КодРасположения = Расположения.КодРасположения INNER JOIN
			            vwРасположения AS Р ON Расположения.L >= Р.L AND Расположения.R <= Р.R WHERE КодСотрудника = @КодСотрудника AND Р.КодТерритории IS NOT NULL ORDER BY Р.L DESC),188)),
		                CASE WHEN DATEPART(dw, @Дата) > 5 THEN 0 ELSE 1 END) РабочийДень
";


        /// <summary>
        ///     Строка запроса:  Получить список дежурных
        /// </summary>
        public const string SELECT_ДежурныеИнженеры = @"
--получение списка дежурных инженерров
DECLARE @Дата datetime = '{0}'
SELECT * 
FROM (
    SELECT	Сотрудники.КодСотрудника, Сотрудник, ISNULL(CONVERT(varchar, Всего) + ' (в вых: ' + CONVERT(varchar, Выходных) + ')','') Дежурства
    FROM	Сотрудники LEFT JOIN
	        (SELECT	КодСотрудника, SUM(CASE WHEN РабочийДень = 0 THEN 1 ELSE 0 END) Выходных, COUNT(*) Всего
	        FROM (	SELECT	ISNULL(КодСотрудникаФакт, КодСотрудника) КодСотрудника, РабочийДень
		            FROM	ДежурныеИнженерыРасписание
		            WHERE	РабочийДень IS NOT NULL AND Дата BETWEEN DATEADD(day,1-day(@Дата),@Дата) AND DATEADD(month,1,DATEADD(day,1-day(@Дата),@Дата))-1) X
	        GROUP BY КодСотрудника) Дежурства ON Сотрудники.КодСотрудника = Дежурства.КодСотрудника
    WHERE	Состояние = 0 AND
	        EXISTS(SELECT * FROM РолиСотрудников WHERE КодРоли=102 AND РолиСотрудников.КодСотрудника = Сотрудники.КодСотрудника)
) Т0
";
        /// <summary>
        /// Строка запроса:  Добавление расписания дежурного инженера
        /// </summary>
        public const string INSERT_ДежурныеИнженерыРасписание = @"
-- добавление расписания дежурного инженера    
INSERT ДежурныеИнженерыРасписание(Дата, КодСотрудника)
VALUES(@Дата, @КодСотрудника)
";


        /// <summary>
        /// Строка запроса:  Изменение статуса дежурства
        /// </summary>
        public const string UPDATE_ДежурныеИнженерыРасписание = @"
--изменение статуса дежурства
DECLARE @ДатаОтгула_Tmp date, @КодНерабочихДней int, @КодСотрудникаД int, @ДатаОтгулаД date

SELECT @ДатаОтгула_Tmp = ДатаОтгула FROM ДежурныеИнженерыРасписание WHERE Дата = @Дата

SET @ДатаОтгулаД = CASE WHEN @ТипЗакрытия NOT IN(1,2) OR @РабочийДень = 1  THEN NULL ELSE @ДатаОтгула END
SET @КодСотрудникаД = CASE WHEN @ТипЗакрытия = 1 THEN @КодСотрудника WHEN @ТипЗакрытия = 2 THEN @КодСотрудникаФакт ELSE NULL END

BEGIN TRAN
BEGIN TRY
	IF @ДатаОтгула_Tmp IS NOT NULL
	BEGIN
		SELECT @КодНерабочихДней = КодНерабочихДней FROM ЗаявкиIT.dbo.НерабочиеДни WHERE КодСотрудника = @КодСотрудникаД AND От = @ДатаОтгула_Tmp AND До = DATEADD(day,1,@ДатаОтгула_Tmp)
		IF @@ROWCOUNT = 1	
			EXEC ЗаявкиIT.dbo.sp_НерабочиеДниDel @КодНерабочихДней, 'Отмена отгула за дежурство'	
	END

	UPDATE  ДежурныеИнженерыРасписание
	SET     КодСотрудникаФакт =  @КодСотрудникаД,	
		    ДатаОтгула= @ДатаОтгулаД,
		    Закрыто = @Закрыто
	WHERE   Дата = @Дата

	SET @ДатаОтгулаД = NULL
	SELECT @ДатаОтгулаД = ДатаОтгула, @КодСотрудникаД = ISNULL(КодСотрудникаФакт, КодСотрудника) FROM ДежурныеИнженерыРасписание WHERE Дата = @Дата AND Закрыто = 1
	IF @ДатаОтгулаД IS NOT NULL
	BEGIN
		SET @ДатаОтгула_Tmp = DATEADD(day, 1, @ДатаОтгулаД)
		EXEC ЗаявкиIT.dbo.sp_НерабочиеДниIns @КодСотрудникаД, @ДатаОтгулаД, @ДатаОтгула_Tmp, 'Отгул', 'Отгул за дежурство'
	END
	COMMIT TRAN
END TRY
BEGIN CATCH
	ROLLBACK TRAN
	DECLARE @errMessage nvarchar(max) = ERROR_MESSAGE(), @ErrorSeverity int = ERROR_SEVERITY()
	RAISERROR(@errMessage, @ErrorSeverity, 1)
END CATCH
";

        /// <summary>
        /// Строка запроса:  Изменение дежурного инженера в расписании
        /// </summary>
        public const string UPDATE_ДежурныеИнженерыРасписание_Инженер = @"
--изменение дежурного инженера в расписании
UPDATE  ДежурныеИнженерыРасписание
SET     КодСотрудника = @КодСотрудника
WHERE   Дата = @Дата
";

        /// <summary>
        ///  Строка запроса:  Нет дежурства на следующий день
        /// </summary>
        public const string SELECT_ДежурныеИнженеры_НетДежурстваНаСледующийДень = @"
--получение даты дежурства, после которой не составлено расписание
;WITH Расписание (Дата)  
AS  
(  	SELECT	Дата 
	FROM	ДежурныеИнженерыРасписание 
	WHERE	Дата > DATEADD(day, -1, CONVERT(date, GETDATE()))
	UNION	SELECT DATEADD(day, -1, CONVERT(date, GETDATE())) Дата
)
SELECT	MIN(Дата) Дата
FROM	Расписание  
WHERE	NOT EXISTS(SELECT * FROM Расписание X WHERE X.Дата = DATEADD(day, 1, Расписание.Дата))
";
        /// <summary>
        ///     Строка запроса:  Получить список сотрудников
        /// </summary>
        public const string SELECT_ВсеСотрудники = @"
--Получение информации о сотруднике
DECLARE @Язык char(2)
SELECT @Язык = Язык FROM Сотрудники WHERE SID=SUSER_SID()

SELECT  CASE WHEN @Язык <> 'ru' THEN Employee ELSE Сотрудник END AS СотрудникLocal,
        CASE WHEN @Язык <> 'ru' THEN FIO ELSE ФИО END AS ФИОLocal, * 
FROM Сотрудники (nolock) ";

        /// <summary>
        ///     Строка запроса:  Получить список сотрудников
        /// </summary>
        public const string SELECT_ФотографииСотрудников = @"
SELECT S.КодСотрудника, S.Сотрудник, S.КодЛицаЗаказчика, L.Кличка, CASE WHEN TP.КодСотрудника IS NULL THEN 0 ELSE 1 END ЕстьФото, TPS.Сотрудник ФИОИзменил, TP.Изменил, TP.Изменено
    FROM Сотрудники S
    LEFT JOIN ThumbnailPhotos TP ON TP.КодСотрудника = S.КодСотрудника
    LEFT JOIN Сотрудники TPS ON TP.Изменил = TPS.КодСотрудника
    LEFT JOIN ЛицаЗаказчики L ON L.КодЛица = S.КодЛицаЗаказчика
    WHERE S.Состояние< 3 AND EXISTS(SELECT* FROM ФотографииСотрудников PS WHERE PS.КодСотрудника= S.КодСотрудника)
ORDER BY S.Сотрудник
";

        /// <summary>
        ///     Строка запроса:  Получить мини-фото сотрудника
        /// </summary>
        public const string SELECT_MiniФотографияСотрудникаПоКодуСотрудника = @"
SELECT TOP 1 Фотография, Изменено, Изменил FROM ThumbnailPhotos
    WHERE КодСотрудника = @КодСотрудника
";

        /// <summary>
        ///     Строка запроса:  Получить фото сотрудника
        /// </summary>
        public const string SELECT_ФотографияСотрудникаПоКодуСотрудника = @"
SELECT TOP 1 Фотография, Изменено, Изменил FROM ФотографииСотрудников
    WHERE КодСотрудника= @КодСотрудника
    ORDER BY КодФотографииСотрудника DESC
";

        /// <summary>
        ///     Строка запроса:  Получить мини-фото сотрудника
        /// </summary>
        public const string SELECT_MiniФотографияСотрудникаПоКодуФото = @"
SELECT TOP 1 Фотография as Фотография, Изменено, Изменил FROM ThumbnailPhotos
    WHERE КодСотрудника = @КодФотографииСотрудника
";

        /// <summary>
        ///     Строка запроса:  Получить фото сотрудника
        /// </summary>
        public const string SELECT_ФотографияСотрудникаПоКодуФото = @"
SELECT TOP 1 Фотография, Изменено, Изменил FROM ФотографииСотрудников
    WHERE КодФотографииСотрудника= @КодФотографииСотрудника
";

        /// <summary>
        ///     Строка запроса:  Получить фото сотрудника
        /// </summary>
        public const string SELECT_ФотографияСотрудникаПоФото = @"
SELECT ДатаФотографирования, DATALENGTH(Фотография) as l
    FROM ФотографииСотрудников WHERE КодФотографииСотрудника = @КодФотографииСотрудника
";

        /// <summary>
        ///     Хранимая процедура: Добавление фото сотрудника
        /// </summary>
        public const string SP_ФотографииСотрудников_Ins = "sp_ФотографииСотрудников_Ins";

        /// <summary>
        ///     Строка запроса:  Удалить мини-фото сотрудника
        /// </summary>
        public const string DELETE_MiniФотографияСотрудника = @"
DELETE ThumbnailPhotos WHERE КодСотрудника = @КодСотрудника
";

        /// <summary>
        ///     Хранимая процедура: Обновить минифото сотрудника
        /// </summary>
        public const string SP_ThumbnailPhotos_InsUpd = "sp_ThumbnailPhotos_InsUpd";

        /// <summary>
        ///     Строка запроса: Проверка наличия расположения
        /// </summary>
        public const string SELECT_СотрудникФото_EXISTS = @"
IF EXISTS( SELECT TOP 1 КодСотрудника FROM Сотрудники WHERE КодСотрудника = @КодСотрудника AND КодЛица IS NULL AND Состояние = 0 )
    SELECT 1
ELSE
    SELECT 0";


        /// <summary>
        ///     Строка запроса:  Получить фото сотрудника
        /// </summary>
        public const string SELECT_MiniФотографияСотрудника = @"
SELECT S.ФИО, ThumbnailPhotos.Изменено, S.КодСотрудника, ThumbnailPhotos.Изменил 
FROM ThumbnailPhotos LEFT OUTER JOIN Сотрудники S ON S.КодСотрудника = ThumbnailPhotos.изменил 
WHERE ThumbnailPhotos.КодСотрудника = @КодСотрудника
";

        /// <summary>
        ///     Строка запроса:  Получить фото сотрудника
        /// </summary>
        public const string SELECT_КодЛицаПоКодуСотрудника = @"
DECLARE @КодЛица int
SET @КодЛица = (SELECT КодЛица FROM Инвентаризация.dbo.Сотрудники WHERE КодСотрудника = @КодСотрудника)
IF @КодЛица IS NOT NULL
    SELECT КодЛица FROM vwКодыЛиц WHERE КодЛица = @КодЛица
ELSE
    SELECT NULL КодЛица
";

        /// <summary>
        ///     Установка EMail
        /// </summary>
        public const string SP_AD_ChangePrimaryEmail = "sp_AD_ChangePrimaryEmail";


        /// <summary>
        ///     Строка запроса: Получить Список Текущих Сотрудников
        /// </summary>
        public const string SELECT_FN_ТекущийСотрудник = @"SELECT КодСотрудника FROM fn_ТекущийСотрудник() X";

        /// <summary>
        ///     Строка запроса:  Получить Данные Текущего Сотрудника
        /// </summary>
        public const string SELECT_SID_ТекущийСотрудник = @"
--получение информации о текущем сотруднике
SELECT * FROM Сотрудники (nolock) WHERE SID = SUSER_SID()";

        /// <summary>
        ///     Строка запроса:  Получить Сотрудника по коду лица
        /// </summary>
        public const string SELECT_PERSON_ID_Сотрудник = @"
--получение информации о сотруднике по коду лица
SELECT КодСотрудника FROM Сотрудники (nolock) WHERE КодЛица = @КодЛица";

        /// <summary>
        ///     Строка запроса: Получаем подразделение сотрудника
        /// </summary>
        public const string SELECT_ПодразделениеСотрудника = @"
SELECT TOP 1 Child.Подразделение 
FROM vwДолжности Child (nolock) INNER JOIN vwДолжности Parent (nolock) ON Child.L <= Parent.L AND Child.R >= Parent.R 
WHERE Parent.КодСотрудника = @Id AND Child.Подразделение <> '' ORDER BY Child.R";


        /// <summary>
        ///     Строка запроса: Получение информации из vwADSI_AllUsers по логину
        /// </summary>
        public const string SELECT_ADSI_ПоЛогину = @"
--Получение информации из vwADSI_AllUsers по логину
SELECT Disabled, Path, accountExpires FROM vwADSI_AllUsers WHERE Login=@Login
";

        /// <summary>
        ///     Хранимая процедура: Получить Контакты сотрудника
        /// </summary>
        public const string SP_Сотрудники_Контакты = "sp_Сотрудники_Контакты";

        /// <summary>
        ///     Хранимая процедура: Состояние учетной записи сотрудника
        /// </summary>
        public const string SP_UserGetStatus = "master.dbo.sp_UserGetStatus";


        /// <summary>
        ///     Строка запроса: ПроверкаПодчиненияСотрудника
        /// </summary>
        public const string SELECT_ПроверкаПодчиненияСотрудника = @"
SELECT Child.КодДолжности
FROM	dbo.vwДолжности Parent
		INNER JOIN dbo.vwДолжности Child ON Parent.L <= Child.L AND Parent.R >= Child.R
WHERE 	(Child.КодСотрудника=@КодСотрудника AND Parent.КодСотрудника=@КодРуководителя)OR
	    (Child.КодСотрудника=@КодСотрудника AND
		(EXISTS(SELECT Slave.*
			FROM dbo.ПодчинениеАдминистративное Chief
				INNER JOIN dbo.ПодчинениеАдминистративное Slave ON Chief.L <= Slave.L AND Chief.R >= Slave.R
				INNER JOIN dbo.vwДолжности D ON Chief.КодДолжности = D.КодДолжности
			WHERE Slave.КодДолжности=Parent.КодДолжности AND D.КодСотрудника=@КодРуководителя
			)
		)
	)";


        /// <summary>
        ///     Строка запроса: Получение непостредственного руководителя
        /// </summary>
        public const string SELECT_НепосредственныйРуководитель = @"
--Получение непостредственного руководителя
SELECT dbo.fn_НепосредственныйРуководитель(@КодСотрудника) Руководитель
";

        /// <summary>
        ///     Строка запроса: Получение непостредственного руководителя
        /// </summary>
        public const string SELECT_НепосредственныйРуководитель_Данные = @"
--Получение информации о сотруднике(должность, работодатель) и о его руководителе (должность, работодатель)
SELECT * 
FROM	(SELECT	Сотрудники.КодЛица КодЛицаСотрудника, vwДолжности.КодЛица КодЛицаКомпанииСотрудника, vwДолжности.Должность ДолжностьСотрудника,
		        vwДолжности.Совместитель СотрудникСовместитель
	    FROM	Сотрудники LEFT JOIN 
		        vwДолжности ON Сотрудники.КодСотрудника = vwДолжности.КодСотрудника
	    WHERE	Сотрудники.КодСотрудника = @КодСотрудника) X CROSS JOIN 
	    (SELECT Сотрудники.КодСотрудника КодРуководителя, Сотрудники.Сотрудник Руководитель, Сотрудники.Employee РуководительЛат,
                Сотрудники.Дополнение, Сотрудники.Addition, Сотрудники.КодЛица КодЛицаРуководителя, vwДолжности.КодЛица КодЛицаКомпанииРуководителя,
		        ЛицаЗаказчики.КраткоеНазваниеРус НазваниеКомпанииРуководителя, ЛицаЗаказчики.КраткоеНазваниеЛат НазваниеКомпанииРуководителяЛат,
		        vwДолжности.Должность ДолжностьРуководителя, vwДолжности.Совместитель РуководительСовместитель
	    FROM	Сотрудники LEFT JOIN 
		        vwДолжности ON Сотрудники.КодСотрудника = vwДолжности.КодСотрудника LEFT JOIN
		        ЛицаЗаказчики ON vwДолжности.КодЛица = ЛицаЗаказчики.КодЛица
	    WHERE	Сотрудники.КодСотрудника = dbo.fn_НепосредственныйРуководитель(@КодСотрудника)) Y";

        /// <summary>
        ///     Строка запроса: Получение компаний сотрудника
        /// </summary>
        public const string SELECT_КомпанииСотрудника = @"
SELECT DISTINCT ЛицаЗаказчики.КодЛица, 
CASE WHEN X.Язык='ru' THEN ЛицаЗаказчики.Кличка ELSE CASE WHEN ЛицаЗаказчики.КраткоеНазваниеЛат = '' THEN ЛицаЗаказчики.Кличка ELSE ЛицаЗаказчики.КраткоеНазваниеЛат END END Кличка
FROM ЛицаЗаказчики 
INNER JOIN  fn_ТекущиеЛица() fn ON ЛицаЗаказчики.КодЛица = fn.КодЛица 
INNER JOIN  dbo.vwТелефонныеНомера ON ЛицаЗаказчики.КодЛица = vwТелефонныеНомера.КодЛицаЗаказчика AND vwТелефонныеНомера.ВСправочнике > 0
CROSS JOIN (SELECT * FROM Сотрудники WHERE SID = SUSER_SID()) X
ORDER BY Кличка 
";

        /// <summary>
        ///     Строка запроса: Получение компаний сотрудника
        /// </summary>
        public const string SELECT_ТелефонныеНомерВСправочнике = @"
IF EXISTS(SELECT*
    FROM vwТелефонныеНомера
    WHERE   (ВСправочнике= 8 OR (ВСправочнике>0 AND ВСправочнике<>8

AND КодЛицаЗаказчика IN (SELECT value FROM dbo.fn_SplitInts(@PersonsIDs) X)))
AND КодТипаТелефонныхНомеров = 10
)
  SELECT 1 ELSE SELECT 0
";




        /// <summary>
        ///     Строка запроса: Получение списка языков
        /// </summary>
        public const string SELECT_Языки = "SELECT * FROM Языки ORDER BY Язык";

        /// <summary>
        ///     Строка запроса: Получение языка
        /// </summary>
        public const string SELECT_ID_Язык = "SELECT * FROM Языки WHERE Язык = @id";

        /// <summary>
        ///     Строка запроса: Получение списка языков
        /// </summary>
        public const string SELECT_ЯзыкиСортОписание = "SELECT * FROM Языки ORDER BY Описание";

        /// <summary>
        ///     Строка запроса: Установка языка по умолчанию
        /// </summary>
        public const string UPDATE_ЯзыкПоУмолчанию = @"
SET ARITHABORT ON
UPDATE Сотрудники SET Язык = @Lang WHERE SID = SUSER_SID()
";


        /// <summary>
        ///     Строка запроса: Получение списка доменных имен
        /// </summary>
        public const string SELECT_DomainNames = @"
-- получение списка доменных имен
SELECT * FROM DomainNames ORDER BY DomainName";

        /// <summary>
        ///     Строка запроса: Получение доменного имени
        /// </summary>
        public const string SELECT_ID_DomainName = @"
--получение доменного имени
SELECT * FROM DomainNames WHERE DomainName = @id";

        /// <summary>
        ///     Строка запроса: Получение расписания на дату
        /// </summary>
        public const string SELECT_ID_ДежурныеИнженерыРасписание = @"
--получение расписания дежурного инженера на дату
SELECT * FROM ДежурныеИнженерыРасписание WHERE Дата = @id";

        /// <summary>
        ///     Строка запроса: Получение списка общих папок
        /// </summary>
        public const string SELECT_CommonFolders = @"
--получение списка общих папок
SELECT * FROM ОбщиеПапки ORDER BY ОбщаяПапка";

        /// <summary>
        ///     Строка запроса: Получение общей папки
        /// </summary>
        public const string SELECT_ID_CommonFolder = @"
--получение общей папки
SELECT * FROM ОбщиеПапки WHERE КодОбщейПапки = @id";

        /// <summary>
        ///     Строка запроса: Получение общих папок, доступных сотруднику
        /// </summary>
        public const string SP_ОбщиеПапкиСотрудника = "sp_ОбщиеПапкиСотрудника";


        /// <summary>
        ///     Получение списка дополнительных прав
        /// </summary>
        public const string SELECT_AdvancedGrants = @"
--получение списка дополнительных прав
SELECT * FROM ДопПараметрыУказанийИТ ORDER BY ПорядокВывода, Описание";

        /// <summary>
        ///     Строка запроса:  Получение дополнительного права
        /// </summary>
        public const string SELECT_ID_AdvancedGrant = @"
--Получение информации о дополнительном параметре указаний ИТ
SELECT * FROM ДопПараметрыУказанийИТ WHERE КодДопПараметраУказанийИТ = @id";

        /// <summary>
        ///     Строка запроса: Получение для сотрудника прав на типы лиц
        /// </summary>
        public const string SELECT_ПраваТипыЛицСотрудника = @"
--Получение для сотрудника прав на типы лиц
SELECT	КодПраваТипыЛиц, 
        ПраваТипыЛиц.КодСотрудника, 
        ПраваТипыЛиц.КодКаталога, 
        CASE WHEN ПраваТипыЛиц.КодКаталога IS NOT NULL AND Каталоги.КодКаталога IS NULL THEN '#' + CONVERT(varchar,ПраваТипыЛиц.КодКаталога) ELSE Каталоги.Каталог END Каталог, 
        ПраваТипыЛиц.КодТемыЛица,
        CASE WHEN ПраваТипыЛиц.КодТемыЛица IS NOT NULL AND vwТемыЛиц.КодТемыЛица IS NULL THEN '#' + CONVERT(varchar,ПраваТипыЛиц.КодТемыЛица) ELSE vwТемыЛиц.ТемаЛица END ТемаЛица,  
        МожетДаватьПрава 
FROM	ПраваТипыЛиц (nolock) LEFT JOIN 
	    Каталоги ON ПраваТипыЛиц.КодКаталога = Каталоги.КодКаталога LEFT JOIN
	    vwТемыЛиц ON ПраваТипыЛиц.КодТемыЛица = vwТемыЛиц.КодТемыЛица
WHERE КодСотрудника = @КодСотрудника";

        /// <summary>
        ///     Строка запроса: Получение для сотрудника прав на типы лиц
        /// </summary>
        public const string SELECT_ПраваТипыЛицСотрудникаВГруппе = @"
--Получение для сотрудника прав на типы лиц в группе
SELECT	DISTINCT
	    КодПраваТипыЛиц, 
        @КодОбщегоСотрудника КодСотрудника, 
        ПраваТипыЛиц.КодКаталога, 
        CASE WHEN ПраваТипыЛиц.КодКаталога IS NOT NULL AND Каталоги.КодКаталога IS NULL THEN '#' + CONVERT(varchar,ПраваТипыЛиц.КодКаталога) ELSE Каталоги.Каталог END Каталог, 
        ПраваТипыЛиц.КодТемыЛица,
        CASE WHEN ПраваТипыЛиц.КодТемыЛица IS NOT NULL AND vwТемыЛиц.КодТемыЛица IS NULL THEN '#' + CONVERT(varchar,ПраваТипыЛиц.КодТемыЛица) ELSE vwТемыЛиц.ТемаЛица END ТемаЛица,  
        МожетДаватьПрава 
FROM	ПраваТипыЛиц (nolock) LEFT JOIN 
	    Каталоги ON ПраваТипыЛиц.КодКаталога = Каталоги.КодКаталога LEFT JOIN
	    vwТемыЛиц ON ПраваТипыЛиц.КодТемыЛица = vwТемыЛиц.КодТемыЛица
WHERE КодСотрудника IN (SELECT КодСотрудника FROM Инвентаризация.dbo.Сотрудники WHERE КодОбщегоСотрудника = @КодОбщегоСотрудника)";

        /// <summary>
        ///     Строка запроса: Получение для сотрудника свободного логина
        /// </summary>
        public const string SELECT_СвободныйЛогин = @"
--Получение для сотрудника свободного логина
DECLARE @LName varchar(50), @FName varchar(50), @MName varchar(50), @Login varchar(50), @F tinyint

SELECT @LName=REPLACE(LastName,' ',''), @FName=REPLACE(FirstName,' ',''), @MName=REPLACE(MiddleName,' ',''), @Login = Login FROM Сотрудники WHERE КодСотрудника=@КодСотрудника

IF ISNULL(@Login,'') = ''
BEGIN
    SET @Login=@LName
    SET @F=0

    WHILE EXISTS(SELECT * FROM Сотрудники WHERE Login=@Login AND КодСотрудника !=@КодСотрудника)
    BEGIN
	    SET @Login= LEFT(@FName,1)+ CASE WHEN @F=1 THEN LEFT(@MName,1) ELSE '' END +  @LName	
	    SET @F=@F+1	
	    IF @F>1 BEGIN SET @Login = '' BREAK	END
    END
END
SELECT LOWER(@Login) Login
";

        /// <summary>
        ///     Строка запроса: Получение для сотрудника данных из Лиц
        /// </summary>
        public const string SELECT_ДанныеСотрудникаИзЛиц = @"
DECLARE @КодЛица int, @КодТерритории int, @Территория varchar(80), @ИНН varchar(20), @ДатаРождения datetime, @Формат tinyint, @ЕстьРеквизиты tinyint,
@Фамилия nvarchar(50), @Имя nvarchar(50), @Отчество nvarchar(50),@ФамилияЛат nvarchar(50), @ИмяЛат nvarchar(50), @ОтчествоЛат nvarchar(50), @lang char(2)

SELECT @lang=Язык FROM Инвентаризация.dbo.Сотрудники WHERE SID=SUSER_SID()

SELECT @КодЛица = КодЛица FROM Инвентаризация.dbo.Сотрудники WHERE КодСотрудника = @КодСотрудника

SELECT @КодТерритории = КодТерритории, @ИНН = ИНН, @ДатаРождения = ДатаРождения FROM Справочники.dbo.vwЛица Лица WHERE КодЛица = @КодЛица

SET @ЕстьРеквизиты = 1
SELECT @Фамилия = ФамилияРус, @Имя = ИмяРус, @Отчество = ОтчествоРус, @ФамилияЛат = ФамилияЛат, @ИмяЛат = ИмяЛат, @ОтчествоЛат = ОтчествоЛат 
FROM Справочники.dbo.vwКарточкиФизЛиц X WHERE КодЛица = @КодЛица AND FLOOR(CONVERT(float,GETDATE())) BETWEEN От AND DATEADD(day,-1,До)
IF @@ROWCOUNT = 0 SET @ЕстьРеквизиты = 0

SET @Формат = 0
IF @КодТерритории IS NOT NULL
BEGIN
	IF EXISTS(SELECT * FROM Справочники.dbo.ФорматНомеровРегистрацииЛиц X WHERE КодТерритории = @КодТерритории) SET @Формат = 1
	SELECT @Территория = CASE WHEN @lang <> 'ru' AND Caption <> '' THEN Caption ELSE Территория END FROM Инвентаризация.dbo.Территории WHERE КодТерритории = @КодТерритории
END

SELECT @КодЛица КодЛица, @КодТерритории КодТерритории, @Территория Территория, @ИНН ИНН, @ДатаРождения ДатаРождения, @Формат Формат,
@Фамилия Фамилия, @Имя Имя, @Отчество Отчество, @ФамилияЛат ФамилияЛат, @ИмяЛат ИмяЛат, @ОтчествоЛат ОтчествоЛат, @ЕстьРеквизиты ЕстьРеквизиты
WHERE @КодЛица = @КодЛица
       ";


        /// <summary>
        ///     Хранимая процедура: sp_UserUnlock
        /// </summary>
        public const string SP_Сотрудники_Поиск = "sp_Сотрудники_Поиск";

        /// <summary>
        ///     Получение информации о расположениях для дерева расположений
        /// </summary>
        public static string SELECT_СотрудникиДанныеДляДерева = @"
WITH Tree AS(
    SELECT КодДолжности, CASE WHEN Parent IS NULL THEN Кличка ELSE Подразделение END Подразделение, Parent, L, R ROLD
FROM vwДолжности Подразделения INNER JOIN
    ЛицаЗаказчики ON ЛицаЗаказчики.КодЛица = Подразделения.КодЛица
    WHERE Подразделение <> '' 

AND EXISTS(SELECT *
    FROM vwДолжности Должности
WHERE   Подразделения.L <= Должности.L AND Подразделения.R >= Должности.R
    AND Должности.КодСотрудника IS NOT NULL)
) 

SELECT T0.КодДолжности Id, T0.R-L ЕстьДети, T0.Подразделение Text, ISNULL(T0.Parent,0) ParentId, '' Фильтр
FROM (        
    SELECT *, CASE WHEN EXISTS(SELECT * FROM Tree ChildTree WHERE ChildTree.Parent = Tree.КодДолжности) THEN Tree.ROLD ELSE Tree.L+1 END R FROM Tree) T0
WHERE   (( (@Потомки = 1 AND ( (@Код = 0 AND T0.Parent IS NULL) OR (@Код <> 0 AND T0.Parent = @Код) ))
        OR (@Потомки = 0 AND T0.КодДолжности = @Код))
        OR (@Потомки = 2 AND (T0.КодДолжности IN ({0}) OR T0.Parent IN ({0}))))

ORDER BY T0.L
";

        /// <summary>
        ///     Получение информации о расположениях для дерева расположений
        /// </summary>
        public static string SELECT_СотрудникиДанныеДляДерева_State = @"
SET NOCOUNT ON

IF OBJECT_ID('tempdb.#Tree') IS NOT NULL DROP TABLE #Tree
CREATE TABLE #Tree(
        [КодПодразделения] [int],
        Подразделение [varchar](300),       
        [Parent] [int],
        [L] [int],
        [R] [int]
)

INSERT #Tree
    SELECT КодДолжности, CASE WHEN Parent IS NULL THEN Кличка ELSE Подразделение END Подразделение, Parent, L, R ROLD
FROM vwДолжности Подразделения INNER JOIN
    ЛицаЗаказчики ON ЛицаЗаказчики.КодЛица = Подразделения.КодЛица
WHERE   Подразделение <> '' 
        AND EXISTS(SELECT *
            FROM vwДолжности Должности
            WHERE   Подразделения.L <= Должности.L AND Подразделения.R >= Должности.R
                AND Должности.КодСотрудника IS NOT NULL
        )

UPDATE #Tree 
SET R = CASE WHEN EXISTS(SELECT * FROM #Tree ChildTree WHERE ChildTree.Parent = #Tree.КодПодразделения) THEN #Tree.R ELSE #Tree.L+1 END

IF OBJECT_ID('tempdb.#Расположения') IS NOT NULL DROP TABLE #Расположения
CREATE TABLE #Подразделения(
        TempID int IDENTITY(1,1),
        [КодПодразделения] [int],
        Подразделение [varchar](300),       
        [Parent] [int],
        [L] [int],
        [R] [int],
        BitMask tinyint
)

INSERT #Подразделения
SELECT	T0.[КодПодразделения],
        T0.Подразделение,      
        T0.[Parent],
        T0.[L],
        T0.[R],
        1 BitMask
FROM	#Tree T0 
WHERE EXISTS(SELECT * FROM #Tree Child 
					WHERE	Child.КодПодразделения IN ({0})
						AND T0.L <=	Child.L AND T0.R>=Child.R)         
                        @ADDWHERE
      AND NOT EXISTS(SELECT * FROM #Подразделения X WHERE T0.КодПодразделения = X.КодПодразделения)
ORDER BY T0.L

INSERT #Подразделения
SELECT	T0.[КодПодразделения],
        T0.Подразделение,      
        T0.[Parent],
        T0.[L],
        T0.[R],
        2 BitMask
FROM	#Tree Parent
LEFT JOIN #Tree T0 ON T0.Parent = Parent.КодПодразделения
WHERE Parent.КодПодразделения IN ({0}) AND NOT EXISTS(SELECT * FROM #Подразделения X WHERE T0.КодПодразделения = X.КодПодразделения)
@ADDWHERE
ORDER BY Parent.L

INSERT #Подразделения 
SELECT  [КодПодразделения],
        Подразделение,      
        [Parent],
        [L],
        [R],
        4 BitMask
FROM    #Tree T0
WHERE   Parent IS NULL                                  
        AND NOT EXISTS(SELECT * FROM #Подразделения X WHERE T0.КодПодразделения = X.КодПодразделения) 
        @ADDWHERE

SELECT #Подразделения.[КодПодразделения] id,
       #Подразделения.Подразделение text,      
       #Подразделения.[Parent] ParentId,
       #Подразделения.[L],
       #Подразделения.[R],
       #Подразделения.BitMask,
       #Подразделения.R-#Подразделения.L ЕстьДети,
       0 Status
FROM #Подразделения
ORDER BY #Подразделения.L
DROP TABLE #Подразделения
DROP TABLE #Tree
";


        /// <summary>
        ///     Хранимая процедура: sp_UserUnlock
        /// </summary>
        public const string SP_UserUnlock = "sp_UserUnlock";

        #region Несоответствие прав сотрудника в группе посменной работы

        /// <summary>
        ///     Проверка несоответсвия прав в группе посменной работы
        /// </summary>
        public const string SELECT_НесоотвествиеПравСотрудниковВГруппе = @"
--Проверка несоответствия прав сотрудников в группе посменной работы
SET NOCOUNT ON

IF OBJECT_ID('tempdb..#ПапкиИДопПараметры') IS NOT NULL		DROP TABLE #ПапкиИДопПараметры

DECLARE  @СотрудникиВГруппах TABLE (КодЗаписи int IDENTITY(1,1) PRIMARY KEY, КодГруппы int, Группа varchar(155), КодСотрудника int, Сотрудник varchar(155))
CREATE TABLE #ПапкиИДопПараметры (КодЗаписи int IDENTITY(1,1) PRIMARY KEY, КодГруппы int, Группа varchar(155), КодСотрудника int, Сотрудник varchar(155), Код int, Значение varchar(50), ДопПараметр tinyint)
DECLARE  @Отчет TABLE (	КодЗаписи int IDENTITY(1,1) PRIMARY KEY, КодГруппы int, Группа varchar(155), КодСотрудника int, Сотрудник varchar(155), ВидПрав varchar(15), 
			Отсутствует varchar(300), КодРоли int, КодЛица int, КодТемыЛица int, КодКаталога int,
			КодОбщейПапки int, КодДопПараметра int, Есть tinyint, ПараметрОтноситсяК tinyint,
			СотрудникиУКогоЕсть varchar (300), КоличествоЕсть int, СотрудникиУКогоНет varchar (300), КоличествоНет int)

DECLARE  @ПапкиПоДокументу TABLE (КодСотрудника int, КодОбщейПапки int, ОбщаяПапка varchar(50)) 
DECLARE  @РолиПоДокументу TABLE (КодСотрудника int, КодРоли int, КодЛица int)
DECLARE  @ТипыПоДокументу TABLE (КодСотрудника int, КодКаталога int, КодТемыЛица int)
DECLARE  @ПараметрыПоДокументу TABLE (КодСотрудника int, КодДопПараметраУказанийИТ int, Описание varchar(100))

IF @КодДокумента IS NOT NULL
BEGIN
	INSERT @ПапкиПоДокументу	SELECT @КодСотрудника, КодОбщейПапки, ОбщаяПапка FROM {0}.Документы.dbo.vwПозицииУказанийИТПапки WHERE КодДокумента=@КодДокумента 
	INSERT @РолиПоДокументу		SELECT @КодСотрудника, КодРоли, КодЛица FROM {0}.Документы.dbo.vwПозицииУказанийИТРоли WHERE КодДокумента=@КодДокумента
	INSERT @ТипыПоДокументу		SELECT @КодСотрудника, КодКаталога, КодТемыЛица FROM {0}.Документы.dbo.vwПозицииУказанийИТТипыЛиц WHERE КодДокумента=@КодДокумента
	INSERT @ПараметрыПоДокументу	SELECT @КодСотрудника, КодДопПараметраУказанийИТ, Описание FROM {0}.Документы.dbo.vwПозицииУказанийИТДопПараметры WHERE КодДокумента=@КодДокумента
END


DECLARE @КодЗаписи int = 0, @КодЗаписиОтсутствуют int = 0, @КодГруппы int, @Группа varchar(155), @КодСотрудникаГруппы int, @Сотрудник varchar(155),
	@ВидПрав_ТипыЛиц varchar(15) = 'Типы лиц', @ВидПрав_Роли varchar(15) = 'Роли', @ВидПрав_Папки varchar(15) = 'Общие папки', @ВидПрав_Параметры varchar(15) = 'Доп. параметры'
DECLARE @СотрудникиИмеютПрава TABLE(КодЗаписи int PRIMARY KEY IDENTITY(1,1), КодЗаписиОтсутствуют int, КодСотрудника int, Сотрудник varchar(155))

--получаем информацию обо всех работающих в группах посменной работы сотрудниках с учетной записью
INSERT	@СотрудникиВГруппах
SELECT	Группы.КодСотрудника, Группы.ФИО, Сотрудники.КодСотрудника, Сотрудники.ФИО 
FROM	Сотрудники INNER JOIN Сотрудники Группы ON Сотрудники.КодОбщегоСотрудника = Группы.КодСотрудника 
WHERE	Сотрудники.Состояние < 3 
	        AND EXISTS(SELECT * FROM Сотрудники X WHERE X.КодСотрудника = @КодСотрудника AND X.КодОбщегоСотрудника = Сотрудники.КодОбщегоСотрудника)


--заполняем существующие права
--#####################################################
INSERT	@РолиПоДокументу	
SELECT	КодСотрудника, КодРоли, КодЛица 
FROM	РолиСотрудников 
WHERE	КодСотрудника IN (SELECT КодСотрудника FROM @СотрудникиВГруппах) AND (@КодДокумента IS NULL OR @КодДокумента IS NOT NULL AND КодСотрудника <> @КодСотрудника)
	AND NOT EXISTS(SELECT * FROM @РолиПоДокументу X WHERE X.КодСотрудника = РолиСотрудников.КодСотрудника AND X.КодРоли = РолиСотрудников.КодРоли AND X.КодЛица = РолиСотрудников.КодЛица)

			

INSERT	@ТипыПоДокументу	
SELECT	КодСотрудника, КодКаталога, КодТемыЛица 
FROM	{0}.Справочники.dbo.ПраваТипыЛиц Права 
WHERE	КодСотрудника IN (SELECT КодСотрудника FROM @СотрудникиВГруппах) AND (@КодДокумента IS NULL OR @КодДокумента IS NOT NULL AND КодСотрудника <> @КодСотрудника)
	AND NOT EXISTS(SELECT * FROM @ТипыПоДокументу X WHERE X.КодСотрудника = Права.КодСотрудника AND ISNULL(X.КодТемыЛица,0) = ISNULL(Права.КодТемыЛица,0) AND ISNULL(X.КодКаталога,0) = ISNULL(Права.КодКаталога,0))


--#####################################################
--проверим каждого сотрудника
WHILE EXISTS(SELECT * FROM @СотрудникиВГруппах WHERE КодЗаписи > @КодЗаписи)
BEGIN	
	SELECT TOP 1  @КодЗаписи = КодЗаписи, @КодГруппы = КодГруппы, @Группа = Группа, @КодСотрудникаГруппы = КодСотрудника, @Сотрудник = Сотрудник
	FROM @СотрудникиВГруппах WHERE КодЗаписи > @КодЗаписи ORDER BY КодЗаписи
	
--получим информацию о ролях, которые есть у других сотрудников группы, но нет у текущего
	INSERT	@Отчет(КодГруппы, Группа, КодСотрудника, Сотрудник, ВидПрав, Отсутствует, КодРоли, КодЛица)
	SELECT	DISTINCT 
		@КодГруппы, @Группа, @КодСотрудникаГруппы, @Сотрудник, @ВидПрав_Роли, 
		CASE WHEN Роли.КодРоли IS NULL THEN '#' + CONVERT(varchar,РолиСотрудников.КодРоли) ELSE Роли.Роль END 
		+ CASE WHEN РолиСотрудников.КодЛица <> 0 THEN ' ' + ISNULL(ЛицаЗаказчики.Кличка, '#' + CONVERT(varchar,РолиСотрудников.КодЛица)) ELSE '--все компании--' END,
		РолиСотрудников.КодРоли, РолиСотрудников.КодЛица
	FROM	@СотрудникиВГруппах Сотрудники INNER JOIN 
		@РолиПоДокументу РолиСотрудников ON Сотрудники.КодСотрудника = РолиСотрудников.КодСотрудника LEFT JOIN 
		vwРоли Роли ON РолиСотрудников.КодРоли = Роли.КодРоли LEFT JOIN 
		ЛицаЗаказчики ON РолиСотрудников.КодЛица = ЛицаЗаказчики.КодЛица
	WHERE	КодГруппы = @КодГруппы AND Сотрудники.КодСотрудника <> @КодСотрудникаГруппы  
		AND NOT EXISTS(	SELECT * FROM @РолиПоДокументу X 
				WHERE КодСотрудника = @КодСотрудникаГруппы AND X.КодРоли = РолиСотрудников.КодРоли AND X.КодЛица = РолиСотрудников.КодЛица)
	
				
--получим информацию о типах лиц, доступ к которым есть у других сотрудников группы, но нет у текущего
	INSERT	@Отчет(КодГруппы, Группа, КодСотрудника, Сотрудник, ВидПрав, Отсутствует, КодТемыЛица, КодКаталога)
	SELECT	DISTINCT 
		@КодГруппы, @Группа, @КодСотрудникаГруппы, @Сотрудник, @ВидПрав_ТипыЛиц,		 
		LTRIM(
		 CASE	WHEN Каталоги.КодКаталога IS NULL AND Права.КодКаталога IS NULL THEN ' --все каталоги--'
			WHEN Каталоги.КодКаталога IS NULL AND Права.КодКаталога IS NOT NULL THEN '#' + CONVERT(varchar,Права.КодКаталога)
			ELSE + Каталоги.Каталог END  
		 + CASE	WHEN ТемыЛиц.КодТемыЛица IS NULL AND Права.КодТемыЛица IS NULL THEN ' --все типы лиц--'
			WHEN ТемыЛиц.КодТемыЛица IS NULL AND Права.КодТемыЛица IS NOT NULL THEN '#' + CONVERT(varchar,Права.КодТемыЛица)
			ELSE ' ' + ТемыЛиц.ТемаЛица END),
		Права.КодТемыЛица, Права.КодКаталога 		
	FROM	@СотрудникиВГруппах Сотрудники INNER JOIN 
		@ТипыПоДокументу Права ON Сотрудники.КодСотрудника = Права.КодСотрудника LEFT JOIN 
		{0}.Справочники.dbo.vwТемыЛиц ТемыЛиц ON Права.КодТемыЛица = ТемыЛиц.КодТемыЛица LEFT JOIN 
		{0}.Справочники.dbo.vwКаталоги Каталоги ON Права.КодКаталога = Каталоги.КодКаталога
	WHERE	КодГруппы = @КодГруппы AND Сотрудники.КодСотрудника <> @КодСотрудникаГруппы 
		AND NOT EXISTS(	SELECT * FROM @ТипыПоДокументу X 
				WHERE КодСотрудника = @КодСотрудникаГруппы AND ISNULL(X.КодТемыЛица,0) = ISNULL(Права.КодТемыЛица,0) AND ISNULL(X.КодКаталога,0) = ISNULL(Права.КодКаталога,0))
		
--получим информацию о доступе сотрудника к общим папкам и установленных доп. параметрах

	IF @КодДокумента IS NOT NULL AND @КодСотрудникаГруппы = @КодСотрудника CONTINUE

	INSERT	#ПапкиИДопПараметры(Код, Значение)
	EXEC	sp_ОбщиеПапкиСотрудника @КодСотрудникаГруппы

--заполним недостающие поля и определим, является ли запись доп.параметром
	UPDATE	#ПапкиИДопПараметры
	SET	КодГруппы = @КодГруппы,
		Группа = @Группа,
		КодСотрудника = @КодСотрудникаГруппы,
		Сотрудник = @Сотрудник,
		ДопПараметр = ISNUMERIC(ISNULL(Значение,0))
	WHERE	ДопПараметр IS NULL
END

--удалим те доп.параметры, состояние которых определить невозможно
DELETE #ПапкиИДопПараметры WHERE Значение IS NULL AND ДопПараметр = 1

--дополним таблицу правами по документу
--#####################################################
INSERT #ПапкиИДопПараметры(КодГруппы, Группа, КодСотрудника, Сотрудник, Код, Значение, ДопПараметр)
SELECT Группа.КодГруппы, Группа.Группа, Сотрудники.КодСотрудника, Сотрудники.ФИО,  X.Код, X.Значение, X.ДопПараметр
  FROM(	SELECT КодСотрудника, КодОбщейПапки Код, ОбщаяПапка Значение, 0 ДопПараметр FROM @ПапкиПоДокументу 
		UNION SELECT КодСотрудника, КодДопПараметраУказанийИТ Код, '1' Значение, 1 ДопПараметр  FROM @ПараметрыПоДокументу) X INNER JOIN
		Сотрудники ON X.КодСотрудника = Сотрудники.КодСотрудника INNER JOIN
		(SELECT TOP 1 КодГруппы, Группа FROM  @СотрудникиВГруппах) Группа ON X.КодСотрудника = Сотрудники.КодСотрудника
WHERE NOT EXISTS(SELECT * FROM #ПапкиИДопПараметры Y WHERE X.КодСотрудника = Y.КодСотрудника AND X.Код = Y.Код AND X.Значение = Y.Значение AND X.ДопПараметр = Y.ДопПараметр)


--удалим параметры, которых реально нет (Значение = 0), а в документе они есть
DELETE	X FROM #ПапкиИДопПараметры X WHERE ДопПараметр = 1 AND Значение = 0  
	AND EXISTS(SELECT * FROM #ПапкиИДопПараметры Y WHERE X.Код = Y.Код AND X.КодСотрудника = Y.КодСотрудника AND ДопПараметр = 1 AND Значение = 1 )

--если указан код документа, но в документе не требуется доп. параметр или общая папка, но процедура вернула, что эти данные у сотрудника есть - обнуляем их
IF @КодДокумента IS NOT NULL
BEGIN
	DELETE	X FROM #ПапкиИДопПараметры X WHERE КодСотрудника = @КодСотрудника AND ДопПараметр = 0 AND NOT EXISTS(SELECT * FROM @ПапкиПоДокументу WHERE КодОбщейПапки = X.Код)
	UPDATE	X 
	SET		Значение = 0
	FROM	#ПапкиИДопПараметры X 
	WHERE	КодСотрудника = @КодСотрудника AND ДопПараметр = 1 AND Значение = 1 
			AND NOT EXISTS(SELECT * FROM @ПараметрыПоДокументу WHERE КодДопПараметраУказанийИТ = X.Код)
END


--#####################################################
INSERT	@Отчет(КодГруппы, Группа, КодСотрудника, Сотрудник, ВидПрав, Отсутствует, КодОбщейПапки, КодДопПараметра)
--добавим в отчет информацию об отсутствии у сотрудников доступа к общим папкам, если другие сотрудники группы имеют доступ к этим папкам
SELECT	Сотрудники.КодГруппы, Сотрудники.Группа, Сотрудники.КодСотрудника, Сотрудники.Сотрудник, @ВидПрав_Папки, X.Значение Отсутствует, X.Код КодОбщейПапки, NULL КодДопПараметра
FROM	@СотрудникиВГруппах Сотрудники INNER JOIN (SELECT DISTINCT КодГруппы, Код, Значение FROM #ПапкиИДопПараметры WHERE ДопПараметр = 0) X ON Сотрудники.КодГруппы = X.КодГруппы
WHERE	NOT EXISTS(SELECT * FROM #ПапкиИДопПараметры Y WHERE ДопПараметр = 0 AND Сотрудники.КодГруппы = Y.КодГруппы AND Сотрудники.КодСотрудника = Y.КодСотрудника AND X.Код = Y.Код)
UNION
--добавим в отчет информацию об отсутствии у сотрудников установленных доп.параметров, если эти параметры установлены у других сотрудников группы
SELECT	X.КодГруппы, X.Группа, X.КодСотрудника, X.Сотрудник, @ВидПрав_Параметры, ДопПараметрыУказанийИТ.Описание Отсутствует, NULL КодОбщейПапки, X.Код КодДопПараметра
FROM	#ПапкиИДопПараметры X INNER JOIN ДопПараметрыУказанийИТ ON X.Код = ДопПараметрыУказанийИТ.КодДопПараметраУказанийИТ
WHERE	X.ДопПараметр = 1 AND CONVERT(tinyint,X.Значение) = 0
		AND EXISTS( SELECT * FROM #ПапкиИДопПараметры Y 
			WHERE Y.КодСотрудника <> X.КодСотрудника AND Y.КодГруппы = X.КодГруппы AND Y.ДопПараметр = 1 AND Y.Код = X.Код AND CONVERT(tinyint,Y.Значение) = 1)

--проставим группы параметров
UPDATE	X
SET		ПараметрОтноситсяК = ДопПараметрыУказанийИТ.ПараметрОтноситсяК
FROM	@Отчет X INNER JOIN ДопПараметрыУказанийИТ ON X.КодДопПараметра = ДопПараметрыУказанийИТ.КодДопПараметраУказанийИТ

--проставим сотрудников, у которых есть права
INSERT	@СотрудникиИмеютПрава
--роли
	SELECT	КодЗаписи, Сотрудники.КодСотрудника, Сотрудники.ФИО  
	FROM	@Отчет X INNER JOIN 
		@РолиПоДокументу РолиСотрудников ON X.КодРоли = РолиСотрудников.КодРоли AND X.КодЛица = РолиСотрудников.КодЛица INNER JOIN
		Сотрудники ON Сотрудники.КодСотрудника = РолиСотрудников.КодСотрудника AND Сотрудники.КодОбщегоСотрудника = X.КодГруппы
	WHERE	Сотрудники.Состояние < 3 AND Сотрудники.КодСотрудника <> X.КодСотрудника AND X.ВидПрав=@ВидПрав_Роли 
UNION
--типы лиц	
	SELECT	КодЗаписи, Сотрудники.КодСотрудника, Сотрудники.ФИО  
	FROM	@Отчет X INNER JOIN
		@ТипыПоДокументу Права ON ISNULL(X.КодТемыЛица,0) = ISNULL(Права.КодТемыЛица,0) AND ISNULL(X.КодКаталога,0) = ISNULL(Права.КодКаталога,0) INNER JOIN	
		Сотрудники ON Сотрудники.КодСотрудника = Права.КодСотрудника AND Сотрудники.КодОбщегоСотрудника = X.КодГруппы
	WHERE	Сотрудники.Состояние < 3 AND Сотрудники.КодСотрудника <> X.КодСотрудника AND X.ВидПрав = @ВидПрав_ТипыЛиц 
UNION
--папки
	SELECT	X.КодЗаписи, Папки.КодСотрудника, Папки.Сотрудник  
	FROM	@Отчет X INNER JOIN 
		#ПапкиИДопПараметры Папки ON Папки.Код = X.КодОбщейПапки AND Папки.ДопПараметр = 0 AND Папки.КодСотрудника <> X.КодСотрудника AND Папки.КодГруппы = X.КодГруппы 
	WHERE	X.ВидПрав = @ВидПрав_Папки
UNION
--параметры
	SELECT	X.КодЗаписи, Параметры.КодСотрудника, Параметры.Сотрудник  
	FROM	@Отчет X INNER JOIN 
		#ПапкиИДопПараметры Параметры ON Параметры.Код = X.КодДопПараметра 
			AND Параметры.ДопПараметр = 1 
			AND CONVERT(tinyint,Параметры.Значение) = 1
			AND Параметры.КодСотрудника <> X.КодСотрудника AND Параметры.КодГруппы = X.КодГруппы
			
	WHERE	X.ВидПрав = @ВидПрав_Параметры
ORDER BY ФИО

--для каждого отсутствия прав у сотрудника сформируем в одну строку информацию о сотрудниках, которые эти права имеют
SET @КодЗаписи = 0 SET @КодСотрудникаГруппы = 0 SET @Сотрудник = ''
WHILE EXISTS(SELECT * FROM @СотрудникиИмеютПрава WHERE КодЗаписи > @КодЗаписи )
BEGIN
	SELECT TOP 1 @КодЗаписи = КодЗаписи, @КодЗаписиОтсутствуют = КодЗаписиОтсутствуют, @КодСотрудникаГруппы = КодСотрудника, @Сотрудник = Сотрудник
	FROM @СотрудникиИмеютПрава WHERE КодЗаписи > @КодЗаписи ORDER BY КодЗаписи
	
	UPDATE	@Отчет
	SET	СотрудникиУКогоЕсть = CASE WHEN ISNULL(СотрудникиУКогоЕсть,'') <> '' THEN СотрудникиУКогоЕсть + ', ' ELSE '' END + @Сотрудник,
		КоличествоЕсть = ISNULL(КоличествоЕсть,0) + 1
	WHERE	КодЗаписи = @КодЗаписиОтсутствуют 
END



--для каждого отсутствия прав у сотрудника сформируем в одну строку информацию о сотрудниках, которые эти прав не имеют
DECLARE @ВидПрав varchar(15), @Отсутствует varchar(300) 
WHILE EXISTS(SELECT * FROM @Отчет X INNER JOIN @Отчет Y ON X.КодГруппы = Y.КодГруппы AND X.ВидПрав = Y.ВидПрав AND X.Отсутствует = Y.Отсутствует AND X.КодЗаписи <> Y.КодЗаписи)
BEGIN
	SELECT TOP 1 @КодЗаписи = X.КодЗаписи, @КодГруппы = X.КодГруппы, @ВидПрав = X.ВидПрав, @Отсутствует = X.Отсутствует   
	FROM @Отчет X INNER JOIN @Отчет Y ON X.КодГруппы = Y.КодГруппы AND X.ВидПрав = Y.ВидПрав AND X.Отсутствует = Y.Отсутствует AND X.КодЗаписи <> Y.КодЗаписи
	ORDER BY X.Группа, X.ВидПрав, X.Отсутствует, X.Сотрудник
	
	UPDATE @Отчет 
	SET СотрудникиУКогоНет = STUFF((
		SELECT ', ' + X.Сотрудник
		FROM @Отчет X WHERE X.КодГруппы = @КодГруппы AND X.ВидПрав = @ВидПрав AND X.Отсутствует = @Отсутствует
		FOR XML PATH('')), 1, 2, '')
	WHERE КодЗаписи = @КодЗаписи

	UPDATE @Отчет SET КоличествоНет = (SELECT COUNT(*) FROM @Отчет X WHERE X.КодГруппы = @КодГруппы AND X.ВидПрав = @ВидПрав AND X.Отсутствует = @Отсутствует) WHERE КодЗаписи = @КодЗаписи
	       
	DELETE X FROM @Отчет X WHERE КодЗаписи <> @КодЗаписи AND X.КодГруппы = @КодГруппы AND X.ВидПрав = @ВидПрав AND X.Отсутствует = @Отсутствует
	SELECT @КодГруппы = 0,  @ВидПрав = '', @Отсутствует = ''
END

UPDATE	@Отчет
SET	СотрудникиУКогоНет = Сотрудник,
	КоличествоНет = 1	
WHERE	КоличествоНет IS NULL

SELECT	Группа, ВидПрав, Отсутствует, СотрудникиУКогоЕсть, КоличествоЕсть, СотрудникиУКогоНет, КоличествоНет, ПараметрОтноситсяК
FROM	@Отчет 
ORDER BY Группа, ВидПрав, CASE WHEN КоличествоЕсть > КоличествоНет THEN СотрудникиУКогоНет ELSE СотрудникиУКогоЕсть END, Отсутствует

DROP TABLE #ПапкиИДопПараметры
";

        #endregion

        #endregion

        #region Лица заказчики

        /// <summary>
        ///     Строка запроса: Получение лиц заказчиков
        /// </summary>
        public const string SELECT_ЛицаЗаказчики = @"
SELECT {0} T0.КодЛица, T0.Кличка, КраткоеНазваниеЛат = CASE T0.КраткоеНазваниеЛат WHEN '' THEN T0.Кличка ELSE T0.КраткоеНазваниеЛат END 
FROM ЛицаЗаказчики T0 (nolock)
WHERE EXISTS (SELECT * FROM dbo.fn_ТекущиеЛица() X WHERE КодЛица = T0.КодЛица)";


        /// <summary>
        ///     Строка запроса: Поиск лица заказчика по ID
        /// </summary>
        public const string SELECT_ID_ЛицоЗаказчик = @"
SELECT КодЛица, Кличка, КраткоеНазваниеЛат = CASE КраткоеНазваниеЛат WHEN '' THEN Кличка ELSE КраткоеНазваниеЛат END 
FROM ЛицаЗаказчики (nolock) WHERE КодЛица = @id";

        /// <summary>
        ///     Строка запроса: ЛицаЗаказчики для контрола
        /// </summary>
        public const string SELECT_ЛицаЗаказчикиDBS = @"
SELECT {0} T0.КодЛица, T0.Кличка FROM ЛицаЗаказчики T0 (nolock)";

        #endregion

        #region Расположения

        /// <summary>
        ///     Строка запроса: Получение расположений
        /// </summary>
        public const string SELECT_Расположения = @"
--Получение информации о расположении
SELECT {0} T0.КодРасположения, T0.Расположение, T0.РабочееМесто, T0.Офис, T0.Закрыто, T0.РасположениеPath0, T0.РасположениеPath1, T0.Кодтерритории, T0.Parent, T0.L, T0.R, T0.Изменил, T0.Изменено
FROM    vwРасположения T0 (nolock)";

        /// <summary>
        ///     Строка запроса: Добавить место работы сотруднику
        /// </summary>
        public const string INSERT_РабочееМестоСотруднику = @"
IF NOT EXISTS(SELECT * FROM vwРасположения WHERE КодРасположения = @КодРасположения) 
BEGIN RAISERROR  (N'Указанное расположение в базе данных отсутствует - %s.', 12, 1, @КодРасположения) RETURN END
        
IF NOT EXISTS(SELECT * FROM РабочиеМеста WHERE КодСотрудника = @КодСотрудника AND КодРасположения = @КодРасположения)
INSERT INTO РабочиеМеста (КодСотрудника, КодРасположения) VALUES (@КодСотрудника, @КодРасположения)";


        /// <summary>
        ///     Строка запроса: Изменить место работы сотруднику
        /// </summary>
        public const string UPDATE_РабочееМестоСотруднику = @"
IF EXISTS(SELECT* FROM РабочиеМеста WHERE КодСотрудника=@КодСотрудника AND КодРасположения = @КодРасположения_New)
        DELETE FROM РабочиеМеста WHERE КодСотрудника=@КодСотрудника AND КодРасположения = @КодРасположения_Old
ELSE
        UPDATE РабочиеМеста SET КодРасположения=@КодРасположения_New WHERE КодСотрудника = @КодСотрудника AND КодРасположения = @КодРасположения_Old
";

        /// <summary>
        ///     Строка запроса: Удалить место работы сотруднику
        /// </summary>
        public const string DELETE_РабочееМестоСотруднику = @"
DELETE FROM РабочиеМеста WHERE КодСотрудника=@КодСотрудника AND КодРасположения = @КодРасположения
";

        /// <summary>
        ///     Строка запроса: рабочее место сотрудника
        /// </summary>
        public const string SELECT_РабочееМестоСотрудника = @"
        SELECT * FROM РабочиеМеста WHERE КодСотрудника = @КодСотрудника AND КодРасположения = @КодРасположения
            ";

        /// <summary>
        ///     Обновление наименования расположения
        /// </summary>
        public const string UPDATE_Расположения = @"
UPDATE Инвентаризация.dbo.vwРасположения SET Расположение=@Расположение WHERE КодРасположения=@КодРасположения
";

        /// <summary>
        ///     Закрытие / Открытие расположения
        /// </summary>
        public const string UPDATE_Расположения_Закрыто = @"
UPDATE Инвентаризация.dbo.vwРасположения SET Закрыто=@Закрыто WHERE КодРасположения=@КодРасположения
";

        /// <summary>
        ///     Обновить РабочееМесто у расположения
        /// </summary>
        public const string UPDATE_Расположения_РабочееМесто = @"
UPDATE Инвентаризация.dbo.vwРасположения SET РабочееМесто=@РабочееМесто WHERE КодРасположения=@КодРасположения
";

        /// <summary>
        ///     Обновить Офис у расположения
        /// </summary>
        public const string UPDATE_Расположения_Офис = @"
UPDATE Инвентаризация.dbo.vwРасположения SET Офис=@Офис WHERE КодРасположения=@КодРасположения
";

        /// <summary>
        ///     Обновить Офис у расположения
        /// </summary>
        public const string UPDATE_Расположения_Территория = @"
UPDATE Инвентаризация.dbo.vwРасположения SET КодТерритории=@КодТерритории WHERE КодРасположения=@КодРасположения
";

        /// <summary>
        ///     Строка запроса: розетка по id
        /// </summary>
        public const string SELECT_РозеткаПоID = @"
SELECT КодРозетки, КодРасположения, Розетка, Работает, Примечание, Изменил, Изменено FROM Инвентаризация.dbo.vwРозетки WHERE КодРозетки=@id
";

        /// <summary>
        ///     Добавить розетку
        /// </summary>
        public const string INSERT_Розетки = @"
INSERT INTO Инвентаризация.dbo.vwРозетки (КодРасположения, Розетка, Работает, Примечание) VALUES (@КодРасположения, @Розетка, @Работает, @Примечание)
";

        /// <summary>
        ///     Переместить розетку
        /// </summary>
        public const string MOVE_Розетки = @"
UPDATE Инвентаризация.dbo.vwРозетки SET КодРасположения = @КодРасположения WHERE КодРозетки = @КодРозетки
";

        /// <summary>
        ///     Обновить розетку
        /// </summary>
        public const string UPDATE_Розетки = @"
UPDATE Инвентаризация.dbo.vwРозетки SET Розетка = @Розетка, Работает = @Работает, Примечание = @Примечание WHERE КодРозетки = @КодРозетки
";

        /// <summary>
        ///     Строка запроса: Проверка наличия расположения
        /// </summary>
        public const string SELECT_Расположения_ADD_EXISTS = @"
IF EXISTS(SELECT  * 
FROM    Инвентаризация.dbo.vwРасположения 
WHERE   Parent=@КодРасположения AND Расположение = @Расположение)
    SELECT 1
ELSE
    SELECT 0";

        /// <summary>
        ///     Строка запроса: Проверка наличия расположения
        /// </summary>
        public const string SELECT_Расположения_UPDATE_EXISTS = @"
IF EXISTS(SELECT * 
FROM    Инвентаризация.dbo.vwРасположения 
WHERE Parent IN (SELECT Parent 
FROM    Инвентаризация.dbo.vwРасположения 
WHERE  КодРасположения = @КодРасположения) AND Расположение = @Расположение AND  КодРасположения <> @КодРасположения)
    SELECT 1
ELSE
    SELECT 0";

        /// <summary>
        ///     Удалить розетку
        /// </summary>
        public const string DELETE_ID_Розетки = @"
DELETE FROM Инвентаризация.dbo.vwРозетки where КодРозетки = @id
";

        /// <summary>
        ///     Добавить расположение и получить его идентификатор
        /// </summary>
        public const string INSERT_Расположения = @"
INSERT Инвентаризация.dbo.vwРасположения (Расположение, РабочееМесто, Parent) VALUES (@Расположение, @РабочееМесто, @Parent)
SELECT @@IDENTITY";

        #endregion

        #region Услуги провайдера

        /// <summary>
        ///     Строка запроса: Получение услуг провайдера
        /// </summary>
        public const string SELECT_УслугиПровайдера = @"
SELECT КодИмпортаДопУслугБилайн,ДатаЗагрузки,НомерАбонента,ФИОАбонента,Email,СтатусАбонента,ДатаПоследнегоИзмененияСтатуса,ПричинаПоследнегоИзменения,ОписаниеУслугиТарифногоПлана,ДатаНачалаДействия
,ДатаОкончанияДействия,КодУслугиТарифногоПлана,ДатаАктивацииАбонента 
FROM ИмпортДопУслугБилайн (nolock)";


        /// <summary>
        ///     Удалить услугу
        /// </summary>
        public const string DELETE_ID_УслугиПровайдера = @"
DELETE FROM Инвентаризация.dbo.ИмпортДопУслугБилайн where КодИмпортаДопУслугБилайн = @id
";

        /// <summary>
        ///     Обновить услугу. Выставление стоимости.
        /// </summary>
        public const string UPDATE_УслугиОператора = @"
INSERT ТипыДопУслугСотОператора (КодТипаДопУслугиСотОператора,ДопУслугаСотОператора,Описание,КодОбязательнойУслугиДляКомпании,СтоимостьВключения,СтоимостьВдень,СтоимостьВмесяц,ГигабайтВмесяц)
SELECT КодУслугиТарифногоПлана,ОписаниеУслугиТарифногоПлана, ОписаниеУслугиТарифногоПлана, NULL, @СтоимостьВключения, @СтоимостьВДень, @СтоимостьВМесяц, @ГигабайтВМесяц FROM ИмпортДопУслугБилайн T WHERE КодИмпортаДопУслугБилайн = @id
AND NOT EXISTS(SELECT * FROM ТипыДопУслугСотОператора WHERE КодТипаДопУслугиСотОператора = T.КодУслугиТарифногоПлана)

INSERT	vwSIMКартыДопУслугиСотОператора (НомерТелефона, КодТипаДопУслугиСотОператора, От, До, СтоимостьВключения, СтоимостьВдень, СтоимостьВмесяц, Сохранено)
SELECT	'7'+НомерАбонента, КодУслугиТарифногоПлана, ДатаНачалаДействия, ДатаОкончанияДействия, X.СтоимостьВключения, X.СтоимостьВдень, X.СтоимостьВмесяц, GETUTCDATE()
FROM	ИмпортДопУслугБилайн T INNER JOIN
		ТипыДопУслугСотОператора X ON T.КодУслугиТарифногоПлана = X.КодТипаДопУслугиСотОператора	
WHERE	X.СтоимостьВмесяц IS NOT NULL AND
	NOT EXISTS(SELECT * FROM vwSIMКартыДопУслугиСотОператора WHERE НомерТелефона = T.НомерАбонента AND КодТипаДопУслугиСотОператора = T.КодУслугиТарифногоПлана)

DELETE	ИмпортДопУслугБилайн
FROM	ИмпортДопУслугБилайн T INNER JOIN 
		vwSIMКартыДопУслугиСотОператора SIM ON	SIM.НомерТелефона = T.НомерАбонента 
												AND SIM.КодТипаДопУслугиСотОператора = T.КодУслугиТарифногоПлана 
												AND SIM.От = T.ДатаНачалаДействия 
												AND (SIM.До IS NULL AND T.ДатаОкончанияДействия IS NULL OR SIM.До = T.ДатаОкончанияДействия) 

";

        /// <summary>
        ///     Строка запроса: Получение списка личных кабинетов
        /// </summary>
        public const string SELECT_ЛичныеКабинеты = @"
SELECT vwЛичныеКабинеты.[КодЛичногоКабинета]
      ,vwЛичныеКабинеты.[Название]
      ,ТипыЛичныхКабинетов.КодТипаЛичногоКабинета
      ,ТипыЛичныхКабинетов.ТипЛичногоКабинета
      ,vwЛичныеКабинеты.[Url]
      ,vwЛичныеКабинеты.[Логин]
      ,vwЛичныеКабинеты.[Пароль]
      ,vwЛичныеКабинеты.[Изменил]
      ,Сотрудники.Сотрудник ИзменилФИО
      ,vwЛичныеКабинеты.[Изменено]
  FROM vwЛичныеКабинеты
  INNER JOIN ТипыЛичныхКабинетов ON vwЛичныеКабинеты.КодТипаЛичногоКабинета = ТипыЛичныхКабинетов.КодТипаЛичногоКабинета
  INNER JOIN Сотрудники ON vwЛичныеКабинеты.Изменил = Сотрудники.КодСотрудника
  ORDER BY vwЛичныеКабинеты.[Название]";

        /// <summary>
        ///     Строка запроса: Поиск ЛК по коду
        /// </summary>
        public static string SELECT_ЛичныйКабинетПоID = @"
            SELECT vwЛичныеКабинеты.[КодЛичногоКабинета]
        ,vwЛичныеКабинеты.[Название]
        ,ТипыЛичныхКабинетов.КодТипаЛичногоКабинета
        ,ТипыЛичныхКабинетов.ТипЛичногоКабинета
        ,vwЛичныеКабинеты.[Url]
        ,vwЛичныеКабинеты.[Логин]
        ,vwЛичныеКабинеты.[Пароль]
        ,vwЛичныеКабинеты.[Изменил]
        ,vwЛичныеКабинеты.[Изменено]
        FROM vwЛичныеКабинеты
        INNER JOIN ТипыЛичныхКабинетов ON vwЛичныеКабинеты.КодТипаЛичногоКабинета = ТипыЛичныхКабинетов.КодТипаЛичногоКабинета  
        WHERE КодЛичногоКабинета = @id";

        /// <summary>
        ///     Строка запроса: Поиск ЛК по url, логину, паролю
        /// </summary>
        public static string SELECT_ЛичныйКабинетПоUrlЛогинПароль = @"
            SELECT vwЛичныеКабинеты.[КодЛичногоКабинета]
        FROM vwЛичныеКабинеты
        WHERE КодЛичногоКабинета <> @КодЛичногоКабинета AND (Url = @Url AND Логин = @Логин AND Пароль = @Пароль)";

        /// <summary>
        ///     Удаление личного кабинета
        /// </summary>
        public static string DELETE_ID_ЛичныйКабинет =
            @"DELETE vwЛичныеКабинеты WHERE КодЛичногоКабинета = @id";

        /// <summary>
        ///     Добавление личного кабинета
        /// </summary>
        public const string INSERT_ЛичныйКабинет = @"
INSERT vwЛичныеКабинеты (Название,КодТипаЛичногоКабинета,Url,Логин,Пароль)
VALUES (@Название, @КодТипаЛичногоКабинета, @Url, @Логин, @Пароль)
SELECT @@IDENTITY;
";

        /// <summary>
        ///     Обновление личного кабинета
        /// </summary>
        public const string UPDATE_ЛичныйКабинет = @"
UPDATE vwЛичныеКабинеты SET Название = @Название, КодТипаЛичногоКабинета = @КодТипаЛичногоКабинета, Url = @Url, Логин = @Логин, Пароль = @Пароль
WHERE КодЛичногоКабинета = @КодЛичногоКабинета
SELECT @КодЛичногоКабинета;
";

        /// <summary>
        ///     Получить список типов личного кабинета
        /// </summary>
        public const string SELECT_ТипыЛичногоКабинета = @"
SELECT КодТипаЛичногоКабинета, ТипЛичногоКабинета, SeleniumScript 
FROM ТипыЛичныхКабинетов";

        /// <summary>
        ///     Получить вид отпуска
        /// </summary>
        public const string SELECT_ID_ТипЛичногоКабинета = @"
SELECT КодТипаЛичногоКабинета, ТипЛичногоКабинета, SeleniumScript
FROM ТипыЛичныхКабинетов
WHERE КодТипаЛичногоКабинета = @id";


        /// <summary>
        ///     Строка запроса: Получение прав личного кабинета
        /// </summary>
        public const string SELECT_ЛичныеКабинетыПраваПоID = @"
SELECT ЛичныеКабинетыПрава.[КодЛичногоКабинета]
      ,ЛичныеКабинетыПрава.[КодСотрудника]
      ,Сотрудники.[Сотрудник]
      ,ЛичныеКабинетыПрава.[МожетДаватьПрава] 
      ,ЛичныеКабинетыПрава.[Изменил]
      ,Change.Сотрудник ИзменилФИО
      ,ЛичныеКабинетыПрава.[Изменено]
  FROM ЛичныеКабинетыПрава
  INNER JOIN Сотрудники ON ЛичныеКабинетыПрава.КодСотрудника = Сотрудники.КодСотрудника
  INNER JOIN Сотрудники Change ON ЛичныеКабинетыПрава.Изменил = Change.КодСотрудника
  WHERE КодЛичногоКабинета = @КодЛичногоКабинета";

        /// <summary>
        ///     Строка запроса: Получение прав личного кабинета
        /// </summary>
        public const string SELECT_ЛичныйКабинетПраваПоID = @"
SELECT ЛичныеКабинетыПрава.[КодЛичногоКабинета]
      ,ЛичныеКабинетыПрава.[КодСотрудника]
      ,ЛичныеКабинетыПрава.[МожетДаватьПрава]
      ,ЛичныеКабинетыПрава.[Изменил]
      ,ЛичныеКабинетыПрава.[Изменено]
  FROM ЛичныеКабинетыПрава
  WHERE КодЛичногоКабинета = @КодЛичногоКабинета AND КодСотрудника = @КодСотрудника";

        /// <summary>
        ///     Добавление прав к личному кабинету
        /// </summary>
        public const string INSERT_ЛичныйКабинетПрава = @"
INSERT ЛичныеКабинетыПрава (КодЛичногоКабинета,КодСотрудника,МожетДаватьПрава)
VALUES (@КодЛичногоКабинета, @КодСотрудника, @МожетДаватьПрава)
SELECT @@IDENTITY;
";

        /// <summary>
        ///     Обновление прав личного кабинета
        /// </summary>
        public const string UPDATE_ЛичныйКабинетПрава = @"
UPDATE ЛичныеКабинетыПрава SET КодЛичногоКабинета = @КодЛичногоКабинета, КодСотрудника = @КодСотрудника, МожетДаватьПрава = @МожетДаватьПрава
WHERE КодЛичногоКабинета = @КодЛичногоКабинета AND КодСотрудника = @КодСотрудника
SELECT @КодСотрудника;
";

        /// <summary>
        ///     Удаление прав личного кабинета
        /// </summary>
        public static string DELETE_ЛичныйКабинетПрава =
            @"DELETE ЛичныеКабинетыПрава WHERE КодЛичногоКабинета = @КодЛичногоКабинета AND КодСотрудника = @КодСотрудника";

        #endregion

        #region Должности (Штатное расписание)

        /// <summary>
        ///     Строка запроса: Получение Должности
        /// </summary>
        public const string SELECT_Должности = @"
SELECT  DISTINCT {0} T0.Должность
FROM    vwДолжности T0 INNER JOIN 
        ЛицаЗаказчики T1 ON T0.КодЛица = T1.КодЛица
WHERE   T0.Должность <> ''";

        /// <summary>
        ///     Строка запроса: Получение Подразделения
        /// </summary>
        public const string SELECT_Подразделения = @"
SELECT  DISTINCT {0} T0.Подразделение
FROM    vwДолжности T0 INNER JOIN 
        ЛицаЗаказчики T1 ON T0.КодЛица = T1.КодЛица
WHERE   T0.Подразделение <> ''";

        /// <summary>
        ///     Строка запроса: Получение Подразделений Лица
        /// </summary>
        public const string SELECT_ПодразделенияЛиц =
            @"SELECT {0} КодПодразделенияЛица, Подразделение FROM vwПодразделенияЛиц T0";

        /// <summary>
        ///     Строка запроса: Поиск Должность по коду
        /// </summary>
        public const string SELECT_ID_Должность = @"
--Получение информации о должности
SELECT  КодДолжности, Должность, Подразделение, КодЛица, КодСотрудника, Совместитель, ТелефонныйНомер,
        СтационарныйТелефон, ТрубкаDECT, НеобходимаSIMКарта, SIMКартаНомер, ЛимитКомпании, ПодключитьGPRSПакет,
        Оклад, ТарифнаяСтавка, Parent, L, R, Изменил, Изменено
FROM    vwДолжности (nolock)
WHERE   КодДолжности = @id";

        /// <summary>
        ///     Строка запроса: Получить должности сотрудника
        /// </summary>
        public static string SELECT_ДолжностиСотрудника = @"
--Получение информации о должностях сотрудника
SELECT  vwДолжности.КодДолжности, vwДолжности.Должность, vwДолжности.КодСотрудника, vwДолжности.КодЛица, vwДолжности.Совместитель,
        ISNULL(NULLIF (ЛицаЗаказчики.КраткоеНазваниеРус, ''), ЛицаЗаказчики.КраткоеНазваниеЛат) Организация, Подразделение,
        vwДолжности.КодЛица КодЛицаКомпанииСотрудника, vwДолжности.Должность ДолжностьСотрудника, vwДолжности.Изменил, vwДолжности.Изменено
FROM    vwДолжности LEFT JOIN 
        ЛицаЗаказчики ON vwДолжности.КодЛица = ЛицаЗаказчики.КодЛица
WHERE   vwДолжности.КодСотрудника = @КодСотрудника AND (@Совместитель = -1 OR vwДолжности.Совместитель = @Совместитель)
ORDER BY vwДолжности.Совместитель";

        /// <summary>
        ///     Строка запроса: Сотруднику по должности положена Sim-карта
        /// </summary>
        public const string SELECT_СотрудникуПоДолжностиПоложенаSIM = @"
-- Получение информации о необходимости выдачи sim-карты сотруднику
SELECT  НеобходимаSIMКарта, ПодключитьGPRSПакет, Должность, SIMКартаНомер
FROM    vwДолжности 
WHERE   КодСотрудника = @КодСотрудника AND НеобходимаSIMКарта <> 0
";

        /// <summary>
        ///     Строка запроса: Обновление vwДолжности(только телефонные номера) для администратора тарифов связи
        /// </summary>
        public const string UPDATE_Должности_ТарифАдмин = @"
-- Обновление информации о телефонных номерах должности. Выполнить может только администратор тарифов связи
UPDATE  vwДолжности
SET     ТелефонныйНомер = @ТелефонныйНомер, 
        СтационарныйТелефон = @СтационарныйТелефон,
        ТрубкаDECT = @ТрубкаDECT,
        SIMКартаНомер = CASE WHEN НеобходимаSIMКарта = 1 THEN @SIMКартаНомер ELSE SIMКартаНомер END
WHERE   КодДолжности = @КодДолжности
";

        /// <summary>
        ///     Строка запроса: Обновление vwДолжности для кадровика
        /// </summary>
        public const string UPDATE_Должности = @"
-- Обновление информации о должности. 
UPDATE  vwДолжности
SET     КодЛица = @КодЛица, 
        Должность = @Должность,
        КодСотрудника = @КодСотрудника,
        Совместитель = @Совместитель,
        НеобходимаSIMКарта = @НеобходимаSIMКарта,
        ЛимитКомпании = @ЛимитКомпании,
        ПодключитьGPRSПакет = @ПодключитьGPRSПакет
WHERE   КодДолжности = @КодДолжности
";

        /// <summary>
        ///     Строка запроса: Обновление vwДолжности для кадровика и админа тарифов
        /// </summary>
        public const string UPDATE_Должности_All = @"
-- Обновление информации о должности. 
UPDATE  vwДолжности
SET     КодЛица = @КодЛица, 
        Должность = @Должность,
        КодСотрудника = @КодСотрудника,
        Совместитель = @Совместитель,
        НеобходимаSIMКарта = @НеобходимаSIMКарта,
        ЛимитКомпании = @ЛимитКомпании,
        ПодключитьGPRSПакет = @ПодключитьGPRSПакет,
        ТелефонныйНомер = @ТелефонныйНомер,
        СтационарныйТелефон = @СтационарныйТелефон, 
        ТрубкаDECT = @ТрубкаDECT,
        SIMКартаНомер = CASE WHEN НеобходимаSIMКарта = 1 THEN @SIMКартаНомер ELSE SIMКартаНомер END
WHERE   КодДолжности = @КодДолжности
";

        /// <summary>
        ///     Строка запроса: Добавление в vwДолжности для кадровика
        /// </summary>
        public const string INSERT_Должности = @"
INSERT vwДолжности (КодЛица, Должность, КодСотрудника, Совместитель, НеобходимаSIMКарта, ЛимитКомпании, ПодключитьGPRSПакет)
VALUES (@КодЛица, @Должность, @КодСотрудника, @Совместитель, @НеобходимаSIMКарта, @ЛимитКомпании, @ПодключитьGPRSПакет)
SELECT @@IDENTITY
";

        /// <summary>
        ///     Удалить должность
        /// </summary>
        public const string DELETE_ID_Должность = @"
INSERT INTO ДолжностиИстория (От, КодДолжности, КодОперации, КодДокумента1) VALUES (@ДатаОт, @КодДолжности, 13, @КодДокумета)";

        /// <summary>
        ///     Строка запроса: Поиск Административного подчинения по коду
        /// </summary>
        public const string SELECT_ID_ПодчинениеАдминистративное = @"
SELECT	КодДолжности, КодЛица, Parent, ЕстьДети, Изменил, Изменено
FROM    fn_ПодчиненияАдминНаДату(NULL, NULL, @id)";

        /// <summary>
        ///     Строка запроса: Загрузка актуальных значений ДолжностиИстория
        /// </summary>
        public const string SELECT_ДолжностиИстория = @"
SELECT  От, КодДолжности, КодОперации, КодЛица, КодДокумента1, ЗначениеInt1, ЗначениеInt2, ЗначениеInt3, ЗначениеNvarchar1, ЗначениеNvarchar2, Изменил, Изменено
FROM    ДолжностиИстория
WHERE   От = @От AND КодДолжности = @КодДолжности AND КодОперации = @КодОперации";

        /// <summary>
        ///     Строка запроса: Добавление ДолжностиИстория
        /// </summary>
        public const string INSERT_ДолжностиИстория = @"
INSERT  ДолжностиИстория (От, КодДолжности, КодОперации, КодЛица, КодДокумента1, ЗначениеInt1, ЗначениеInt2, ЗначениеInt3, ЗначениеNvarchar1, ЗначениеNvarchar2)
VALUES  (@От, @КодДолжности, @КодОперации, @КодЛица, @КодДокумента1, @ЗначениеInt1, @ЗначениеInt2, @ЗначениеInt3, @ЗначениеNvarchar1, @ЗначениеNvarchar2)
SELECT  @@IDENTITY";

        /// <summary>
        ///     Строка запроса: Обновление ДолжностиИстория
        /// </summary>
        public const string UPDATE_ДолжностиИстория = @" 
UPDATE  ДолжностиИстория
SET     КодЛица = @КодЛица, КодДокумента1 = @КодДокумента1, 
	    ЗначениеInt1 = @ЗначениеInt1, ЗначениеInt2 = @ЗначениеInt2, ЗначениеInt3 = @ЗначениеInt3, ЗначениеNvarchar1 = @ЗначениеNvarchar1, ЗначениеNvarchar2 = @ЗначениеNvarchar2
WHERE   От = @От AND КодДолжности = @КодДолжности AND КодОперации = @КодОперации";

        /// <summary>
        ///     Строка запроса: Получение списка параметров операции
        /// </summary>
        public const string SELECT_ДолжностиПараметрыОпераций_Список = @"
SELECT  КодПараметра, КодОперации, Колонка, Обязательный, ТолькоЧтение, Порядок, ЭлементЛокализации, V4ControlClassName, КлючURL
FROM    ДолжностиПараметрыОпераций
WHERE   КодОперации = @КодОперации
ORDER BY Порядок";

        /// <summary>
        ///     Строка запроса: Загрузка ДолжностиПараметрыОпераций
        /// </summary>
        public const string SELECT_ID_ДолжностиПараметрыОпераций = @"
SELECT  КодПараметра, КодОперации, Колонка, Обязательный, ТолькоЧтение, Автозаполнение, Порядок, ЭлементЛокализации, V4ControlClassName, КлючURL
FROM    ДолжностиПараметрыОпераций
WHERE   КодПараметра = @КодПараметра AND КодОперации = @КодОперации";

        /// <summary>
        ///     Строка запроса: Добавление ДолжностиПараметрыОпераций
        /// </summary>
        public const string INSERT_ДолжностиПараметрыОпераций = @"
INSERT  ДолжностиПараметрыОпераций (КодПараметра, КодОперации, Колонка, Обязательный, ТолькоЧтение, Автозаполнение, Порядок, ЭлементЛокализации, V4ControlClassName, КлючURL)
VALUES  (@КодПараметра, @КодОперации, @Колонка, @Обязательный, @ТолькоЧтение, @Автозаполнение, @Порядок, @ЭлементЛокализации, @V4ControlClassName, @КлючURL)
SELECT  @@IDENTITY";

        /// <summary>
        ///     Строка запроса: Обновление ДолжностиПараметрыОпераций
        /// </summary>
        public const string UPDATE_ДолжностиПараметрыОпераций = @" 
UPDATE  ДолжностиПараметрыОпераций
SET     Обязательный = @Обязательный, ТолькоЧтение = @ТолькоЧтение, Автозаполнение = @Автозаполнение, Порядок = @Порядок,
        ЭлементЛокализации = @ЭлементЛокализации, V4ControlClassName = @V4ControlClassName, КлючURL = @КлючURL
WHERE   КодПараметра = @КодПараметра AND КодОперации = @КодОперации";

        /// <summary>
        ///     Строка запроса: Получение актуального значения параметра по должности
        /// </summary>
        public const string SELECT_ДолжностиЗначениеПараметра = @"
SELECT dbo.ДолжностиЗначениеПараметра (@От, @КодДолжности, @КодПараметра)";

        /// <summary>
        ///     Строка запроса: Загрузка ДолжностиОперации
        /// </summary>
        public const string SELECT_ID_ДолжностиОперации = @"
SELECT  КодОперации, Операция, Описание, НестандартнаяФорма, ЭлементЛокализации, Пиктограмма, КодРоли, ТипПодчинения,
        УровеньПрименения, Существует, ОбразуетПодразделение, Вакантна, НаличиеПодчинений, ГоловноеПодразделение
FROM    ДолжностиОперации
WHERE   КодОперации = @КодОперации";

        /// <summary>
        ///     Строка запроса: Получение списка ДолжностиОперации
        /// </summary>
        public const string SELECT_ДолжностиОперации = @"
SELECT  КодОперации, Операция, Описание, НестандартнаяФорма, ЭлементЛокализации, Пиктограмма, КодРоли, ТипПодчинения,
        УровеньПрименения, Существует, ОбразуетПодразделение, Вакантна, НаличиеПодчинений, ГоловноеПодразделение
FROM    ДолжностиОперации
WHERE   (LEN(@Роли) = 0 OR КодРоли IN (SELECT value FROM dbo.fn_SplitInts(@Роли))) 
        AND (LEN(@ТипыПодчинения) = 0 OR ТипПодчинения IN (SELECT value FROM dbo.fn_SplitInts(@ТипыПодчинения)))
        AND (LEN(@УровниПрименения) = 0 OR УровеньПрименения IN (SELECT value FROM dbo.fn_SplitInts(@УровниПрименения)))
ORDER BY КодОперации";

        /// <summary>
        ///     Строка запроса: Добавление ДолжностиОперации
        /// </summary>
        public const string INSERT_ДолжностиОперации = @"
INSERT  ДолжностиОперации (КодОперации, Операция, Описание, НестандартнаяФорма, ЭлементЛокализации, Пиктограмма, КодРоли, ТипПодчинения,
        УровеньПрименения, Существует, ОбразуетПодразделение, Вакантна, НаличиеПодчинений, ГоловноеПодразделение)
VALUES  (@КодОперации, @Операция, @Описание, @НестандартнаяФорма, @ЭлементЛокализации, @Пиктограмма, @КодРоли, @ТипПодчинения,
        @УровеньПрименения, @Существует, @ОбразуетПодразделение, @Вакантна, @НаличиеПодчинений, @ГоловноеПодразделение)
SELECT  @@IDENTITY";

        /// <summary>
        ///     Строка запроса: Обновление ДолжностиОперации
        /// </summary>
        public const string UPDATE_ДолжностиОперации = @" 
UPDATE  ДолжностиОперации
SET     Операция = @Операция, Описание = @Описание, НестандартнаяФорма = @НестандартнаяФорма, ЭлементЛокализации = @ЭлементЛокализации, 
        Пиктограмма = @Пиктограмма, КодРоли = @КодРоли, ТипПодчинения = @ТипПодчинения, УровеньПрименения = @УровеньПрименения, 
        Существует = @Существует, ОбразуетПодразделение = @ОбразуетПодразделение, Вакантна = @Вакантна, НаличиеПодчинений = @НаличиеПодчинений, 
        ГоловноеПодразделение = @ГоловноеПодразделение
WHERE   КодОперации = @КодОперации";

        /// <summary>
        ///     Получение информации для дерева Должности и подразделения
        /// </summary>
        public static string SELECT_Должности_TreeView = @"
SELECT	T0.КодДолжности AS id,
	    CASE
            WHEN T0.Parent IS NULL 
            THEN '[' + ISNULL(ISNULL(NULLIF(T1.КраткоеНазваниеРус, ''), NULLIF(T1.КраткоеНазваниеЛат, '')),
                              ISNULL(T1.Кличка + ' (не действует)', '#' + CAST(T0.КодЛица AS varchar))) + 
                 '] '
            ELSE ''
        END + ISNULL(ISNULL(NULLIF(T0.Подразделение,''), NULLIF(T0.Должность,'')),'[нет подразделения]') AS [text],
        T0.КодЛица,
        T1.Кличка,
        T0.Подразделение,
        T0.Должность,
        ISNULL(T0.Parent,0) AS ParentId,
        0 AS L,
        0 AS R,
        T0.ЕстьДети,
        '' AS Фильтр,
        T0.Изменил,
        T2.Сотрудник,
        T0.Изменено
FROM	dbo.fn_ДолжностиНаДату('@ДатаОт', NULL, NULL, 0) AS T0 LEFT JOIN
	    ЛицаЗаказчики AS T1 ON T1.КодЛица = T0.КодЛица LEFT JOIN
	    Сотрудники AS T2 ON T2.КодСотрудника = T0.Изменил
WHERE	(T0.Parent IS NULL OR LEN(T0.Подразделение) > 0)
	    AND (((@Потомки = 1 AND ((@Код = 0 AND T0.Parent IS NULL) OR (@Код <> 0 AND T0.Parent = @Код)))
		    OR (@Потомки = 0 AND T0.КодДолжности = @Код)
             ) OR (@Потомки = 2 AND T0.КодДолжности IN ({1}) OR T0.Parent IN ({1})))
	    @OFF_CONDITION
	    @ADDWHERE
ORDER BY [text]";

        /// <summary>
        ///     Получение информации для дерева Должности и подразделения
        /// </summary>
        public static string SELECT_Должности_TreeView_State = @"
SET NOCOUNT ON

IF OBJECT_ID('tempdb.#Должности') IS NOT NULL DROP TABLE #Должности
CREATE TABLE #Должности(
        КодЗаписи int IDENTITY(1,1),
        КодДолжности int,
        Должность nvarchar(100),
        Подразделение nvarchar(100),
        КодЛица int,
        Parent int,
        ЕстьДети int,
        Изменил int,
        Изменено datetime,
        BitMask tinyint
)

;WITH cte_Должности AS (
	SELECT * FROM dbo.fn_ДолжностиНаДату('@ДатаОт', NULL, NULL, 0) AS T0 WHERE КодДолжности IN ({1})
	UNION ALL
	SELECT T1.* FROM dbo.fn_ДолжностиНаДату('@ДатаОт', NULL, NULL, 0) AS T1 INNER JOIN cte_Должности ON cte_Должности.Parent = T1.КодДолжности
)
INSERT  #Должности
SELECT	КодДолжности,
        Должность,
        Подразделение,
        КодЛица,
        Parent,
        ЕстьДети,
        Изменил,
        Изменено, 
        1 BitMask
FROM    cte_Должности
WHERE   NOT EXISTS(SELECT * FROM #Должности WHERE КодДолжности = cte_Должности.КодДолжности)
        @ADDWHERE
--ORDER BY L

INSERT	#Должности
SELECT	T1.КодДолжности,
        T1.Должность,
        T1.Подразделение,
        T1.КодЛица,    
        T1.Parent,
        T1.ЕстьДети,
        T1.Изменил,
        T1.Изменено, 
        2 BitMask
FROM	dbo.fn_ДолжностиНаДату('@ДатаОт', NULL, NULL, 0) AS T0 INNER JOIN
        dbo.fn_ДолжностиНаДату('@ДатаОт', NULL, NULL, 0) AS T1 ON T1.Parent = T0.КодДолжности
WHERE   T0.КодДолжности IN ({1}) 
        AND NOT EXISTS(SELECT * FROM #Должности WHERE КодДолжности = T1.КодДолжности)
        @ADDWHERE
--ORDER BY T0.L

INSERT	#Должности 
SELECT  КодДолжности,
        Должность,
        Подразделение,   
        КодЛица,
        Parent,
        ЕстьДети,
        Изменил,
        Изменено,
        4 BitMask
FROM    dbo.fn_ДолжностиНаДату('@ДатаОт', NULL, NULL, 0) AS T0
WHERE   Parent IS NULL                                  
        AND NOT EXISTS(SELECT * FROM #Должности WHERE КодДолжности = T0.КодДолжности) 
        @ADDWHERE

SELECT  T0.КодДолжности id,
        CASE
            WHEN T0.Parent IS NULL 
            THEN '[' + ISNULL(ISNULL(NULLIF(T1.КраткоеНазваниеРус, ''), NULLIF(T1.КраткоеНазваниеЛат, '')),
                              ISNULL(T1.Кличка + ' (не действует)', '#' + CAST(T0.КодЛица AS varchar))) + 
                 '] '
            ELSE ''
        END + ISNULL(ISNULL(NULLIF(T0.Подразделение,''), NULLIF(T0.Должность,'')),'[нет подразделения]') AS [text],
        T0.КодЛица,
        T1.Кличка,
        T0.Подразделение,
        T0.Должность,
        T0.Parent AS ParentId,
        0 AS L,
        0 AS R,
        T0.ЕстьДети,
        T0.BitMask,
        T0.Изменил,
        T2.Сотрудник,
        T0.Изменено
FROM    #Должности T0 LEFT JOIN 
        ЛицаЗаказчики T1 ON T1.КодЛица = T0.КодЛица LEFT JOIN
        Сотрудники T2 ON T2.КодСотрудника = T0.Изменил
ORDER BY [text]

DROP TABLE #Должности
";

        /// <summary>
        ///     Фильтрация дерева Должности и подразделения
        /// </summary>
        public static string SELECT_Должности_TreeView_ФильтрExt = @"
DECLARE @МаксимальноеКоличествоНайденных int = 100
SET NOCOUNT ON

IF OBJECT_ID('tempdb.#Должности') IS NOT NULL DROP TABLE #Должности

CREATE TABLE #Должности(
        TempID int IDENTITY(1,1),
        КодДолжности int,
        Должность nvarchar(100),
        Подразделение nvarchar(100),
        КодЛица int,
        Кличка varchar(50),
        Parent int,
        ЕстьДети int,
        Изменил int,
        Изменено datetime,
        BitMask tinyint
)

CREATE UNIQUE CLUSTERED INDEX PK_TempID ON #Должности (TempID)

;WITH cte_Должности AS (
	SELECT * FROM dbo.fn_ДолжностиНаДату('@ДатаОт', NULL, NULL, 0) AS T0 WHERE КодДолжности IN ({0}) OR ('{0}' = '-1' AND Parent IS NULL)
	UNION ALL
	SELECT T1.* FROM dbo.fn_ДолжностиНаДату('@ДатаОт', NULL, NULL, 0) AS T1 INNER JOIN cte_Должности ON cte_Должности.КодДолжности = T1.Parent
    WHERE (T1.Parent IS NULL OR LEN(T1.Подразделение) > 0)
)
INSERT  #Должности
SELECT  DISTINCT КодДолжности AS id, Должность, Подразделение AS text, КодЛица, Кличка, Parent, ЕстьДети, Изменил, Изменено, BitMask FROM (
    SELECT  T0.КодДолжности, 
            T0.Должность,
            T0.Подразделение,   
            T0.КодЛица,
            T1.Кличка,
            T0.Parent,
            T0.ЕстьДети,
            T0.Изменил,
            T0.Изменено, 
            1 BitMask
    FROM    cte_Должности T0 LEFT JOIN 
            ЛицаЗаказчики T1 ON T1.КодЛица = T0.КодЛица LEFT JOIN
            Сотрудники T2 ON T2.КодСотрудника = T0.Изменил
            @ADDTABLE
) T0 @WHERE
--ORDER BY L

SET @КоличествоНайденных = @@ROWCOUNT
DELETE #Должности WHERE TempID > @МаксимальноеКоличествоНайденных
 
UPDATE  Parent
SET     BitMask = BitMask ^ 2
FROM    #Должности Parent
WHERE	EXISTS(SELECT * FROM #Должности WHERE Parent = Parent.КодДолжности)
--WHERE   EXISTS(SELECT * FROM #Должности Child WHERE Parent.L < Child.L AND Parent.R > Child.R)

INSERT  #Должности
SELECT	Parent.КодДолжности,
        Parent.Должность,
        Parent.Подразделение,
        Parent.КодЛица,
        T1.Кличка,
        Parent.Parent,
        Parent.ЕстьДети,
        Parent.Изменил,
        Parent.Изменено, 
        2 BitMask
FROM	dbo.fn_ДолжностиНаДату('@ДатаОт', NULL, NULL, 0) AS Parent LEFT JOIN
        ЛицаЗаказчики T1 ON T1.КодЛица = Parent.КодЛица
WHERE	EXISTS(SELECT * FROM #Должности WHERE Parent = Parent.КодДолжности)
-- EXISTS(SELECT * FROM #Подразделения Child WHERE Parent.L <= Child.L AND Parent.R >= Child.R)           
	    AND NOT EXISTS(SELECT * FROM #Должности WHERE КодДолжности = Parent.КодДолжности)

UPDATE  #Должности
SET     BitMask = BitMask ^ 4
WHERE   Parent IS NULL

INSERT  #Должности 
SELECT  T0.КодДолжности,
        T0.Должность,
        T0.Подразделение,  
        T0.КодЛица,
        T1.Кличка,
        T0.Parent,
        T0.ЕстьДети,
        T0.Изменил,
        T0.Изменено, 
        4 BitMask
FROM    dbo.fn_ДолжностиНаДату('@ДатаОт', NULL, NULL, 0) T0 LEFT JOIN
        ЛицаЗаказчики T1 ON T1.КодЛица = T0.КодЛица
WHERE   (('{0}' = '-1' AND T0.Parent IS NULL) OR T0.КодДолжности IN ({0})) 
        AND NOT EXISTS(SELECT * FROM #Должности X WHERE T0.КодДолжности = X.КодДолжности)

SELECT  T0.КодДолжности id,
        CASE
            WHEN T0.Parent IS NULL 
            THEN '[' + ISNULL(ISNULL(NULLIF(T1.КраткоеНазваниеРус, ''), NULLIF(T1.КраткоеНазваниеЛат, '')),
                              ISNULL(T1.Кличка + ' (не действует)', '#' + CAST(T0.КодЛица AS varchar))) + 
                 '] '
            ELSE ''
        END + ISNULL(ISNULL(NULLIF(T0.Подразделение,''), NULLIF(T0.Должность,'')),'[нет подразделения]') AS [text],
        T0.КодЛица,
        T1.Кличка,
        T0.Подразделение,
        T0.Должность,
        T0.Parent AS ParentId,
        0 AS L,
        0 AS R,
        T0.ЕстьДети,
        T0.BitMask,
        T0.Изменил,
        T2.Сотрудник,
        T0.Изменено
FROM    #Должности T0 LEFT JOIN
        ЛицаЗаказчики T1 ON T1.КодЛица = T0.КодЛица LEFT JOIN
        Сотрудники T2 ON T2.КодСотрудника = T0.Изменил 
ORDER BY [text]

DROP TABLE #Должности
";

        /// <summary>
        ///     Получение должностей, входящих в подразделение
        /// </summary>
        public static string SELECT_Должности_Grid = @"
SELECT  Сотрудники.ФИО AS СотрудникФИО, Сотрудники2.ФИО AS ИзменилФИО, Должности.*
FROM    dbo.fn_ДолжностиНаДату(@ДатаОт, @id, @id, 1) AS Должности LEFT JOIN
	    Сотрудники ON Сотрудники.КодСотрудника = Должности.КодСотрудника LEFT JOIN
        Сотрудники AS Сотрудники2 ON Сотрудники2.КодСотрудника = Должности.Изменил
ORDER BY CASE WHEN LEN(Должности.Подразделение) > 0 THEN 0 ELSE 1 END, Должности.Подразделение, Должности.Должность";

        /// <summary>
        ///     Получение информации для дерева Административное подчинение
        /// </summary>
        public static string SELECT_АдминистративныеПодчинения_TreeView = @"
SELECT	T0.КодДолжности AS id,
	    '[' + ISNULL(ISNULL(NULLIF(T2.КраткоеНазваниеРус, ''), NULLIF(T2.КраткоеНазваниеЛат, '')), ISNULL(T2.Кличка + ' (не действует)', '#' + CAST(T1.КодЛица AS varchar))) + 
        '] ' + ISNULL(ISNULL(NULLIF(T1.Подразделение,''), NULLIF(T1.Должность,'')),'[нет подразделения]') AS [text],
        T1.КодЛица,
        T2.Кличка,
        T1.Подразделение,
        T1.Должность,
        ISNULL(T0.Parent,0) AS ParentId,
        0 AS L,
        0 AS R,
        T0.ЕстьДети,
        '' AS Фильтр,
        T0.Изменил,
        T3.Сотрудник,
        T0.Изменено
FROM	dbo.fn_ПодчиненияАдминНаДату('@ДатаОт', NULL, NULL) AS T0 INNER JOIN
        dbo.fn_ДолжностиНаДату('@ДатаОт', NULL, NULL, 0) AS T1 ON T1.КодДолжности = T0.КодДолжности LEFT JOIN
	    ЛицаЗаказчики AS T2 ON T2.КодЛица = T1.КодЛица LEFT JOIN
	    Сотрудники AS T3 ON T3.КодСотрудника = T0.Изменил
WHERE	(((@Потомки = 1 AND ((@Код = 0 AND T0.Parent IS NULL) OR (@Код <> 0 AND T0.Parent = @Код)))
		    OR (@Потомки = 0 AND T0.КодДолжности = @Код)
             ) OR (@Потомки = 2 AND T0.КодДолжности IN ({1}) OR T0.Parent IN ({1})))
	    @OFF_CONDITION
	    @ADDWHERE
ORDER BY [text]";


        /// <summary>
        ///     Получение информации для дерева Административное подчинение
        /// </summary>
        public static string SELECT_АдминистративныеПодчинения_TreeView_State = @"
SET NOCOUNT ON

IF OBJECT_ID('tempdb.#Подчинения') IS NOT NULL DROP TABLE #Подчинения
CREATE TABLE #Подчинения(
        КодЗаписи int IDENTITY(1,1),
        КодДолжности int,
        Parent int,
        ЕстьДети int,
        Изменил int,
        Изменено datetime,
        BitMask tinyint
)

;WITH cte_Подчинения AS (
	SELECT * FROM dbo.fn_ПодчиненияАдминНаДату('@ДатаОт', NULL, NULL) AS T0 WHERE КодДолжности IN ({1})
	UNION ALL
	SELECT T1.* FROM dbo.fn_ПодчиненияАдминНаДату('@ДатаОт', NULL, NULL) AS T1 INNER JOIN cte_Подчинения ON cte_Подчинения.Parent = T1.КодДолжности
)
INSERT  #Подчинения
SELECT	КодДолжности,
        Parent,
        ЕстьДети,
        Изменил,
        Изменено, 
        1 BitMask
FROM	cte_Подчинения
WHERE	NOT EXISTS(SELECT * FROM #Подчинения WHERE КодДолжности = cte_Подчинения.КодДолжности)
        @ADDWHERE
--ORDER BY L

INSERT	#Подчинения
SELECT	T1.КодДолжности,  
        T1.Parent,
        T1.ЕстьДети,
        T1.Изменил,
        T1.Изменено,
        2 BitMask
FROM	dbo.fn_ПодчиненияАдминНаДату('@ДатаОт', NULL, NULL) AS T0 INNER JOIN
        dbo.fn_ПодчиненияАдминНаДату('@ДатаОт', NULL, NULL) AS T1 ON T1.Parent = T0.КодДолжности
WHERE   T0.КодДолжности IN ({1}) 
        AND NOT EXISTS(SELECT * FROM #Подчинения WHERE КодДолжности = T1.КодДолжности)
        @ADDWHERE
--ORDER BY T0.L
    
INSERT	#Подчинения 
SELECT  КодДолжности, 
        Parent,
        ЕстьДети,
        Изменил,
        Изменено, 
        4 BitMask
FROM    dbo.fn_ПодчиненияАдминНаДату('@ДатаОт', NULL, NULL) AS T0
WHERE   Parent IS NULL                                  
        AND NOT EXISTS(SELECT * FROM #Подчинения WHERE КодДолжности = T0.КодДолжности) 
        @ADDWHERE

SELECT  T0.КодДолжности id,
        '[' + ISNULL(ISNULL(NULLIF(T2.КраткоеНазваниеРус, ''), NULLIF(T2.КраткоеНазваниеЛат, '')), ISNULL(T2.Кличка + ' (не действует)', '#' + CAST(T1.КодЛица AS varchar))) + 
        '] ' + ISNULL(ISNULL(NULLIF(T1.Подразделение,''), NULLIF(T1.Должность,'')),'[нет подразделения]') AS [text],
        T1.КодЛица,
        T2.Кличка,
        T1.Подразделение,
        T1.Должность,
        T0.Parent AS ParentId,
        0 AS L,
        0 AS R,
        T0.ЕстьДети,
        T0.BitMask,
        T0.Изменил,
        T3.Сотрудник,
        T0.Изменено
FROM    #Подчинения T0 INNER JOIN 
        dbo.fn_ДолжностиНаДату('@ДатаОт', NULL, NULL, 0) AS T1 ON T1.КодДолжности = T0.КодДолжности LEFT JOIN
        ЛицаЗаказчики T2 ON T2.КодЛица = T1.КодЛица LEFT JOIN
        Сотрудники T3 ON T3.КодСотрудника = T0.Изменил
ORDER BY [text]

DROP TABLE #Подчинения
";

        /// <summary>
        ///     Фильтрация дерева Административное подчинение
        /// </summary>
        public static string SELECT_АдминистративныеПодчинения_TreeView_ФильтрExt = @"
DECLARE @МаксимальноеКоличествоНайденных int = 100
SET NOCOUNT ON

IF OBJECT_ID('tempdb.#АдминистративноеПодчинение') IS NOT NULL DROP TABLE #АдминистративноеПодчинение

CREATE TABLE #АдминистративноеПодчинение(
        TempID int IDENTITY(1,1),
        КодДолжности int,
        Должность nvarchar(100),
        Подразделение nvarchar(100),
        КодЛица int,
        Кличка varchar(50),
        Parent int,
        ЕстьДети int,
        Изменил int,
        Изменено datetime,
        BitMask tinyint
)

CREATE UNIQUE CLUSTERED INDEX PK_TempID ON #АдминистративноеПодчинение (TempID)

;WITH cte_Подчинения AS (
	SELECT * FROM dbo.fn_ПодчиненияАдминНаДату('@ДатаОт', NULL, NULL) AS T0 WHERE КодДолжности IN ({0}) OR ('{0}' = '-1' AND Parent IS NULL)
	UNION ALL
	SELECT T1.* FROM dbo.fn_ПодчиненияАдминНаДату('@ДатаОт', NULL, NULL) AS T1 INNER JOIN cte_Подчинения ON cte_Подчинения.КодДолжности = T1.Parent
)
INSERT  #АдминистративноеПодчинение
SELECT  DISTINCT КодДолжности AS id, Должность, Подразделение AS text, КодЛица, Кличка, Parent, ЕстьДети, Изменил, Изменено, BitMask FROM (
    SELECT  T0.КодДолжности, 
            T1.Должность,
            T1.Подразделение,   
            T1.КодЛица,
            T2.Кличка,
            T0.Parent,
            T0.ЕстьДети,
            T0.Изменил,
            T0.Изменено, 
            1 BitMask
    FROM	cte_Подчинения T0 INNER JOIN
            dbo.fn_ДолжностиНаДату('@ДатаОт', NULL, NULL, 0) AS T1 ON T1.КодДолжности = T0.КодДолжности LEFT JOIN 
            ЛицаЗаказчики T2 ON T2.КодЛица = T1.КодЛица LEFT JOIN
            Сотрудники T3 ON T3.КодСотрудника = T0.Изменил
            @ADDTABLE
) T0 @WHERE
--ORDER BY L


SET @КоличествоНайденных = @@ROWCOUNT
DELETE #АдминистративноеПодчинение WHERE TempID > @МаксимальноеКоличествоНайденных
 
UPDATE  Parent
SET     BitMask = BitMask ^ 2
FROM    #АдминистративноеПодчинение Parent
WHERE	EXISTS(SELECT * FROM #АдминистративноеПодчинение WHERE Parent = Parent.КодДолжности)
--WHERE   EXISTS(SELECT * FROM #АдминистративноеПодчинение Child WHERE Parent.L < Child.L AND Parent.R > Child.R)
 
INSERT  #АдминистративноеПодчинение
SELECT  T0.КодДолжности,
        T1.Должность,
        T1.Подразделение,
        T1.КодЛица,
        T2.Кличка,
        T0.Parent,
        T0.ЕстьДети,
        T0.Изменил,
        T0.Изменено, 
        2 BitMask
FROM	dbo.fn_ПодчиненияАдминНаДату('@ДатаОт', NULL, NULL) T0 INNER JOIN
        dbo.fn_ПодчиненияАдминНаДату('@ДатаОт', NULL, NULL) Parent ON Parent.КодДолжности = T0.КодДолжности INNER JOIN
        dbo.fn_ДолжностиНаДату('@ДатаОт', NULL, NULL, 0) AS T1 ON T1.КодДолжности = T0.КодДолжности LEFT JOIN
        ЛицаЗаказчики T2 ON T2.КодЛица = Parent.КодЛица
WHERE	EXISTS(SELECT * FROM #АдминистративноеПодчинение WHERE Parent = Parent.КодДолжности)
-- EXISTS(SELECT * FROM #АдминистративноеПодчинение Child WHERE Parent.L <= Child.L AND Parent.R >= Child.R)           
	    AND NOT EXISTS(SELECT * FROM #АдминистративноеПодчинение WHERE КодДолжности = Parent.КодДолжности)

UPDATE  #АдминистративноеПодчинение
SET     BitMask = BitMask ^ 4
WHERE   Parent IS NULL

INSERT  #АдминистративноеПодчинение 
SELECT  T0.КодДолжности,
        T1.Должность,
        T1.Подразделение,  
        T1.КодЛица,
        T2.Кличка,
        T0.Parent,
        T0.ЕстьДети,
        T0.Изменил,
        T0.Изменено, 
        4 BitMask
FROM    dbo.fn_ПодчиненияАдминНаДату('@ДатаОт', NULL, NULL) T0 INNER JOIN
        dbo.fn_ДолжностиНаДату('@ДатаОт', NULL, NULL, 0) AS T1 ON T1.КодДолжности = T0.КодДолжности LEFT JOIN
        ЛицаЗаказчики T2 ON T2.КодЛица = T1.КодЛица
WHERE   (('{0}' = '-1' AND T0.Parent IS NULL) OR T0.КодДолжности IN ({0})) 
        AND NOT EXISTS(SELECT * FROM #АдминистративноеПодчинение WHERE КодДолжности = T0.КодДолжности)

SELECT  T0.КодДолжности id,
        '[' + ISNULL(ISNULL(NULLIF(T1.КраткоеНазваниеРус, ''), NULLIF(T1.КраткоеНазваниеЛат, '')), ISNULL(T1.Кличка + ' (не действует)', '#' + CAST(T0.КодЛица AS varchar))) + 
        '] ' + ISNULL(ISNULL(NULLIF(T0.Подразделение,''), NULLIF(T0.Должность,'')),'[нет подразделения]') AS [text],
        T0.КодЛица,
        T1.Кличка,
        T0.Подразделение,
        T0.Должность,
        T0.Parent AS ParentId,
        0 AS L,
        0 AS R,
        T0.ЕстьДети,
        T0.BitMask,
        T0.Изменил,
        T2.Сотрудник,
        T0.Изменено
FROM    #АдминистративноеПодчинение T0 INNER JOIN
        ЛицаЗаказчики T1 ON T1.КодЛица = T0.КодЛица LEFT JOIN
        Сотрудники T2 ON T2.КодСотрудника = T0.Изменил 
ORDER BY [text]

DROP TABLE #АдминистративноеПодчинение
";

        /// <summary>
        ///     Получение должностей, входящих в административное подчинение
        /// </summary>
        public static string SELECT_АдминистративныеПодчинения_Grid = @"
SELECT	ПодчинениеАдминистративное.Изменено, Сотрудники.ФИО AS СотрудникФИО, Сотрудники2.ФИО AS ИзменилФИО, 
        ЛицаЗаказчики.Кличка, Должности.*
FROM	dbo.fn_ПодчиненияАдминНаДату(@ДатаОт, NULL, NULL) AS ПодчинениеАдминистративное INNER JOIN
        dbo.fn_ДолжностиНаДату(@ДатаОт, NULL, NULL, 1) AS Должности ON Должности.КодДолжности = ПодчинениеАдминистративное.КодДолжности LEFT JOIN 
	    Сотрудники AS Сотрудники ON Сотрудники.КодСотрудника = Должности.КодСотрудника LEFT JOIN
	    Сотрудники AS Сотрудники2 ON Сотрудники2.КодСотрудника = ПодчинениеАдминистративное.Изменил LEFT JOIN
	    ЛицаЗаказчики ON ЛицаЗаказчики.КодЛица = Должности.КодЛица
WHERE	ПодчинениеАдминистративное.КодДолжности = @id";

        /// <summary>
        ///     Удалить административное подчинение
        /// </summary>
        public static string DELETE_ID_ПодчинениеАдминистративное = @"
INSERT INTO ДолжностиИстория (От, КодДолжности, КодОперации, КодДокумента1) VALUES (@ДатаОт, @КодДолжности, 32, @КодДокумета)";

        /// <summary>
        ///     Получение списка сотрудников
        /// </summary>
        public static string SELECT_СотрудникиСписок = @"
SELECT  T1.КодСотрудника, T1.КодЛица, T1.Сотрудник,
	    (SELECT T4.Кличка FROM ЛицаЗаказчики T4 INNER JOIN vwДолжности T5 ON T4.КодЛица = T5.КодЛица WHERE T5.КодСотрудника = T1.КодСотрудника AND T5.Совместитель = 0) МестоРаботы,
	    STUFF((SELECT ', ' + T6.Кличка FROM ЛицаЗаказчики T6 INNER JOIN vwДолжности T7 ON T6.КодЛица = T7.КодЛица WHERE T7.КодСотрудника = T1.КодСотрудника AND T7.Совместитель = 1 FOR XML PATH('')), 1, 2, '') Совмещает,
        T4.Сотрудник Руководитель, T1.КодЛицаЗаказчика, T2.Кличка Заказчик,	    
        ISNULL(CONVERT(varchar(8), T3.ВремяПрихода, 108), '') ВремяПрихода, CASE WHEN T1.КодЛица IS NOT NULL THEN '*' ELSE '' END Спр
FROM    Сотрудники T1 LEFT JOIN
	    ЛицаЗаказчики T2 ON T2.КодЛица = T1.КодЛицаЗаказчика LEFT JOIN
        ВремяПрихода T3 ON T3.КодСотрудника = T1.КодСотрудника LEFT JOIN
        Сотрудники T4 ON T4.КодСотрудника = dbo.fn_НепосредственныйРуководитель(T1.КодСотрудника)
WHERE   T1.Состояние IN (0,1,2,3,5)
ORDER BY T1.ФИО";

        /// <summary>
        ///     Проверка того что одним из мест работы сотрудника является указанное лицо
        /// </summary>
        public const string SELECT_МестаРаботыСотрудника = @"
SELECT  T1.КодЛица, T2.Кличка Организация, T1.Подразделение, T1.Должность, CASE WHEN T1.Совместитель = 1 THEN 'совм.' ELSE '' END Совместитель, T1.Оклад
FROM    vwДолжности T1 LEFT JOIN
        ЛицаЗаказчики T2 ON T2.КодЛица = T1.КодЛица 
WHERE   T1.КодСотрудника = @КодСотрудника";

        #endregion

        #region Отчёты по складам

        /// <summary>
        ///     Строка запроса: ТипОтчётаПоСкладам
        /// </summary>
        public static string SELECT_ТипОтчётаПоСкладам = @"
SELECT {0} КодТипаОтчётаПоСкладам, ТипОтчётаПоСкладам FROM ТипыОтчётовПоСкладам ТО WHERE EXISTS(SELECT * FROM Инвентаризация.dbo.fn_ТекущиеРоли() X
			WHERE X.КодРоли IN (ТО.КодРоли1, ТО.КодРоли2))";

        /// <summary>
        ///     Строка запроса: КодыТиповОтчётовПоСкладам
        /// </summary>
        public static string SELECT_КодыТиповОтчётовПоСкладам = @"
SELECT vwОтчётыПоСкладам.КодТипаОтчётаПоСкладам, ТипОтчётаПоСкладам FROM vwОтчётыПоСкладам INNER JOIN ТипыОтчётовПоСкладам ON vwОтчётыПоСкладам.КодТипаОтчётаПоСкладам=ТипыОтчётовПоСкладам.КодТипаОтчётаПоСкладам WHERE КодСклада=@КодСклада ORDER BY ТипыОтчётовПоСкладам.ТипОтчётаПоСкладам";

        /// <summary>
        ///     Строка запроса: ОтчётыПоСкладам
        /// </summary>
        public static string SELECT_ОтчётыПоСкладам = @"
SELECT
    Типы.ТипСклада,
    Склады.IBAN,
    Отчёты.Склад,
    Отчёты.Порядок,
    Отчёты.КодТипаОтчётаПоСкладам,
    Отчёты.Хранитель,
    Отчёты.Распорядитель,
    Отчёты.Ресурс,
    Отчёты.КодСклада,
    Отчёты.КодХранителя,
    Отчёты.КодРаспорядителя,
    Склады.От,
    DATEADD(day,-1, Склады.До) AS По
FROM vwОтчётыПоСкладам AS Отчёты
INNER JOIN vwСклады AS Склады ON Отчёты.КодСклада = Склады.КодСклада
INNER JOIN ТипыСкладов AS Типы ON Склады.КодТипаСклада = Типы.КодТипаСклада
WHERE КодТипаОтчётаПоСкладам=@КодТипаОтчётаПоСкладам ORDER BY Отчёты.Порядок";

        /// <summary>
        ///     Строка запроса: СкладыВОтчете
        /// </summary>
        public static string SELECT_СкладыВОтчете = @"
SELECT
КодСклада, Порядок
FROM vwОтчётыПоСкладам
WHERE КодТипаОтчётаПоСкладам=@КодТипаОтчётаПоСкладам ORDER BY Порядок";

        /// <summary>
        ///     Строка запроса: Добавление отчета по складам
        /// </summary>
        public static string INSERT_СкладОтчётыПоСкладам = @"
INSERT vwОтчётыПоСкладам(КодСклада, КодТипаОтчётаПоСкладам, Порядок)
SELECT T0.КодСклада, T1.КодОтчёта, T1.СледПорядок FROM (SELECT @КодСклада КодСклада) AS T0
CROSS JOIN(
SELECT value AS КодОтчёта, ISNULL(T12.МаксПорядок,0)+1 AS СледПорядок FROM Инвентаризация.dbo.fn_SplitInts(@КодыТиповОтчётаПоСкладам) AS T11 LEFT JOIN (SELECT КодТипаОтчётаПоСкладам, MAX(Порядок) AS МаксПорядок FROM vwОтчётыПоСкладам GROUP BY КодТипаОтчётаПоСкладам) AS T12 ON T12.КодТипаОтчётаПоСкладам=T11.value
) AS T1
LEFT JOIN vwОтчётыПоСкладам AS T2 ON T2.КодСклада = T0.КодСклада AND КодТипаОтчётаПоСкладам=T1.КодОтчёта
WHERE КодТипаОтчётаПоСкладам is NULL";

        /// <summary>
        ///     Строка запроса: Обновление СкладОтчётыПоСкладам
        /// </summary>
        public const string UPDATE_СкладОтчётыПоСкладам = @"
UPDATE vwОтчётыПоСкладам SET Порядок=T1.Порядок
FROM (VALUES {0}) AS T1(Код, Порядок)
WHERE КодСклада = T1.Код AND КодТипаОтчётаПоСкладам = @КодТипаОтчётаПоСкладам";

        /// <summary>
        ///     Строка запроса: Удаление СкладыИзОтчётаПоСкладам
        /// </summary>
        public const string DELETE_СкладыИзОтчётаПоСкладам = @"
DELETE FROM vwОтчётыПоСкладам WHERE КодСклада IN(SELECT value FROM Инвентаризация.dbo.fn_SplitInts(@КодыСкладов)) AND КодТипаОтчётаПоСкладам=@КодТипаОтчётаПоСкладам";

        /// <summary>
        ///     Строка запроса: Удаление ВсеСкладыИзОтчётаПоСкладам
        /// </summary>
        public const string DELETE_ВсеСкладыИзОтчётаПоСкладам = @"
DELETE FROM vwОтчётыПоСкладам WHERE КодТипаОтчётаПоСкладам=@КодТипаОтчётаПоСкладам";

        /// <summary>
        ///     Строка запроса: Удаление СкладИзОтчётовПоСкладам
        /// </summary>
        public const string DELETE_СкладИзОтчётовПоСкладам = @"
DELETE FROM vwОтчётыПоСкладам WHERE КодСклада = @КодСклада AND КодТипаОтчётаПоСкладам NOT IN(SELECT value FROM Инвентаризация.dbo.fn_SplitInts(@КодТипаОтчётаПоСкладам))";

        /// <summary>
        ///     Строка запроса: ОтчётыПоСкладам
        /// </summary>
        public const string MERGE_СкладОтчётыПоСкладам = @"
;WITH СкладПланы AS
(
SELECT КодТипаОтчётаПоСкладам, КодСклада, Порядок
FROM vwОтчётыпоСкладам WHERE КодСклада=@КодСклада
)
MERGE INTO СкладПланы
USING 
(SELECT T1.КодОтчёта, T0.КодСклада, T1.СледПорядок FROM (SELECT @КодСклада КодСклада) AS T0
CROSS JOIN(
SELECT value AS КодОтчёта, ISNULL(T12.МаксПорядок,0)+1 AS СледПорядок FROM Инвентаризация.dbo.fn_SplitInts(@КодыТиповОтчётаПоСкладам) AS T11 LEFT JOIN (SELECT КодТипаОтчётаПоСкладам, MAX(Порядок) AS МаксПорядок FROM vwОтчётыПоСкладам GROUP BY КодТипаОтчётаПоСкладам) AS T12 ON T12.КодТипаОтчётаПоСкладам=T11.value
) AS T1) AS НовыеПланы(КодТипаОтчётаПоСкладам, КодСклада, Порядок)
ON НовыеПланы.КодТипаОтчётаПоСкладам = СкладПланы.КодТипаОтчётаПоСкладам
WHEN NOT MATCHED THEN INSERT VALUES(НовыеПланы.КодТипаОтчётаПоСкладам, НовыеПланы.КодСклада, НовыеПланы.Порядок)
WHEN NOT MATCHED BY SOURCE THEN DELETE;";

        /// <summary>
        ///     Строка запроса: ОтчётПоСкладам
        /// </summary>
        public const string MERGE_СкладыОтчётПоСкладам = @"
;WITH СкладыПлан AS
(
SELECT КодТипаОтчётаПоСкладам, КодСклада, Порядок
FROM dbo.vwОтчётыпоСкладам WHERE КодТипаОтчётаПоСкладам=@КодТипаОтчётаПоСкладам
),
НовыйПлан AS
(
SELECT КодТипаОтчётаПоСкладам,КодСклада,Порядок FROM (SELECT @КодТипаОтчётаПоСкладам) AS T1(КодТипаОтчётаПоСкладам) CROSS JOIN (VALUES {0}) AS T2(КодСклада, Порядок)
)
MERGE INTO СкладыПлан
USING НовыйПлан
ON НовыйПлан.КодСклада = СкладыПлан.КодСклада
WHEN NOT MATCHED THEN INSERT VALUES(@КодТипаОтчётаПоСкладам, НовыйПлан.КодСклада, НовыйПлан.Порядок)
WHEN MATCHED THEN UPDATE SET СкладыПлан.Порядок = НовыйПлан.Порядок
WHEN NOT MATCHED BY SOURCE THEN DELETE;";

        #endregion

        #region Территории и телефонные коды

        /// <summary>
        ///     Строка запроса: Получаем территории - страны
        /// </summary>
        public const string SELECT_Территории_Страны = @"
SELECT  КодТерритории, Территория, Caption, Аббревиатура, ТелКодСтраны
FROM    vwТерритории (nolock)
";

        /// <summary>
        ///     Строка запроса: Типы территорий
        /// </summary>
        public const string SELECT_ТипыТерриитории = @"
SELECT КодТТерритории, ТипТерриитории FROM dbo.ТипыТерриитории";

        /// <summary>
        ///     Строка запроса: Типы телефонной связи
        /// </summary>
        public const string SELECT_ТипыТелефоннойСвязи = @"
SELECT КодТипаТелефоннойСвязи, ТипТелефоннойСвязи FROM dbo.ТипыТелефоннойСвязи";

        /// <summary>
        ///     Строка запроса: Получаем территорию - страну по ID
        /// </summary>
        public const string SELECT_ID_Территории_Страна = @"
SELECT  *
FROM    vwТерритории (nolock) 
WHERE   КодТерритории = @id AND КодТТерритории = 2";

        /// <summary>
        ///     Строка запроса: Получаем территорию - страну по ID
        /// </summary>
        public const string SELECT_ID_Территории = @"
SELECT  *
FROM    vwТерритории (nolock) 
WHERE   КодТерритории = @id";

        /// <summary>
        ///     Строка запроса: Получаем телефонный код по ID
        /// </summary>
        public const string SELECT_ID_ТелефонныеКоды = @"
SELECT  *
FROM    ТелефонныеКоды (nolock) 
WHERE   ТелефонныйКод = @id";


        /// <summary>
        ///     Строка запроса: Добавление телефонного кода
        /// </summary>
        public const string INSERT_ТелефонныйКод = @"
INSERT INTO [Инвентаризация].[dbo].[ТелефонныеКоды]
    (   ТелефонныйКод
       ,КодТерритории
       ,ДлинаКодаОбласти
       ,КодТипаТелефоннойСвязи
       ,Комментарий
    )
     VALUES
    (  @ТелефонныйКод,
       @КодТерритории,
       @ДлинаКодаОбласти,
       @КодТипаТелефоннойСвязи,
       @Комментарий
)";

        /// <summary>
        ///     Строка запроса: Изменение телефонного кода
        /// </summary>
        public const string UPDATE_ТелефонныйКод = @"
UPDATE [Инвентаризация].[dbo].[ТелефонныеКоды]
      SET 
        [КодТерритории] = @КодТерритории
       ,[ДлинаКодаОбласти] = @ДлинаКодаОбласти
       ,[КодТипаТелефоннойСвязи] = @КодТипаТелефоннойСвязи
       ,[Комментарий] = @Комментарий
    WHERE ТелефонныйКод = @ТелефонныйКод
";

        /// <summary>
        ///     Строка запроса: Получение информации о территориях для дерева
        /// </summary>
        public const string SELECT_ТерриторииДанныеДляДерева = @"
SELECT  r.КодТерритории Id, CASE WHEN EXISTS(SELECT * FROM vwТерритории r0 WHERE r0.Parent = r.КодТерритории AND r0.КодТТерритории <> 4) THEN r.R-r.L ELSE 1 END ЕстьДети, r.Территория Text, ISNULL(r.Parent,0) ParentId, '' Фильтр
FROM vwТерритории r
        WHERE((@Потомки = 1 AND ((@Код = 0 AND r.Parent IS NULL) OR(@Код<> 0 AND r.Parent = @Код)))
        OR(@Потомки = 0 AND r.КодТерритории = @Код))        
        AND r.КодТТерритории <> 4        
ORDER BY {0}";

        /// <summary>
        ///     Строка запроса: Получение информации о территориях для дерева
        /// </summary>
        public const string SELECT_ТерриторииДанныеДляДерева_State = @"
SET NOCOUNT ON

IF OBJECT_ID('tempdb.#Территории') IS NOT NULL DROP TABLE #Территории
CREATE TABLE #Территории(
        КодЗаписи int IDENTITY(1,1),
        [КодТерритории] [int],
        Территория [varchar](300),       
        [Parent] [int],
        [L] [int],
        [R] [int],
        [Изменил] [int],
        [Изменено] [datetime],  
        BitMask tinyint
)

INSERT #Территории
SELECT	Parent.[КодТерритории],
        Parent.Территория,      
        Parent.[Parent],
        Parent.[L],
        Parent.[R],
        Parent.[Изменил],
        Parent.[Изменено], 
        1 BitMask
FROM	vwТерритории Parent 
WHERE EXISTS(SELECT * FROM vwТерритории Child 
					WHERE	Child.КодТерритории IN ({1})
						AND Parent.L <=	Child.L AND Parent.R>=Child.R)
    AND NOT EXISTS(SELECT * FROM #Территории X WHERE Parent.КодТерритории = X.КодТерритории)    
ORDER BY Parent.L

INSERT #Территории
SELECT	Child.[КодТерритории],
        Child.Территория,      
        Child.[Parent],
        Child.[L],
        Child.[R],
        Child.[Изменил],
        Child.[Изменено], 
        2 BitMask
FROM	vwТерритории Parent
LEFT JOIN vwТерритории Child ON Child.Parent = Parent.КодТерритории
WHERE Parent.КодТерритории IN ({1}) AND NOT EXISTS(SELECT * FROM #Территории X WHERE Child.КодТерритории = X.КодТерритории)
ORDER BY Parent.L

INSERT #Территории 
SELECT  [КодТерритории],
        Территория,      
        [Parent],
        [L],
        [R],
        [Изменил],
        [Изменено], 
        4 BitMask
FROM    vwТерритории 
WHERE   Parent IS NULL                                  
        AND NOT EXISTS(SELECT * FROM #Территории X WHERE vwТерритории.КодТерритории = X.КодТерритории)
        

SELECT  t.[КодТерритории] id,
        t.Территория text,      
        t.[Parent] ParentId,
        t.[L],
        t.[R],
        t.[Изменил],
        t.[Изменено], 
        t.BitMask,
        CASE WHEN EXISTS(SELECT * FROM vwТерритории r0 WHERE r0.Parent = r.КодТерритории AND r0.КодТТерритории <> 4) THEN t.R-t.L ELSE 1 END ЕстьДети
FROM    #Территории t INNER JOIN 
        vwТерритории r ON t.КодТерритории = r.КодТерритории
WHERE r.Территория NOT LIKE '%связь%' AND r.КодТТерритории <> 4
ORDER BY r.{0}
DROP TABLE #Территории
";

        /// <summary>
        ///     Строка запроса: Получение информации о территориях для дерева, учитывая фильтр
        /// </summary>
        public static string SELECT_ТерриторииДанныеДляДереваФильтр = @"
DECLARE @МаксимальноеКоличествоНайденных int = 100
SET NOCOUNT ON
               
IF OBJECT_ID('tempdb.#Территории') IS NOT NULL DROP TABLE #Территории
--DECLARE @КоличествоНайденных int
CREATE TABLE #Территории(
        КодЗаписи int IDENTITY(1,1),
        [КодТерритории] [int],
        Территория [varchar](100),       
        [Parent] [int],
        [L] [int],
        [R] [int],
        [Изменил] [int],
        [Изменено] [datetime],  
        BitMask tinyint
)

INSERT #Территории
SELECT  [КодТерритории],
        Территория,      
        [Parent],
        [L],
        [R],
        [Изменил],
        [Изменено], 
        1 BitMask
FROM    vwТерритории
WHERE   Территория LIKE '{1}' AND Закрыто=0
ORDER BY L
 
SET @КоличествоНайденных = @@ROWCOUNT
DELETE #Территории WHERE КодЗаписи > @МаксимальноеКоличествоНайденных
 
UPDATE  Parent
SET     BitMask = BitMask ^ 2
FROM    #Территории Parent
WHERE   EXISTS(SELECT * FROM #Территории Child WHERE Parent.L < Child.L AND Parent.R > Child.R)
 
INSERT  #Территории
SELECT  [КодТерритории],
        Территория,      
        [Parent],
        [L],
        [R],
        [Изменил],
        [Изменено], 
        2 BitMask
FROM    vwТерритории Parent 
WHERE   EXISTS( SELECT * FROM #Территории Child 
                WHERE Parent.L <= Child.L AND Parent.R>=Child.R)                                        
        AND NOT EXISTS(SELECT * FROM #Территории X WHERE Parent.КодТерритории = X.КодТерритории)
 
UPDATE  #Территории
SET     BitMask = BitMask ^ 4
WHERE   Parent IS NULL
 
INSERT #Территории 
SELECT  [КодТерритории],
        Территория,      
        [Parent],
        [L],
        [R],
        [Изменил],
        [Изменено], 
        4 BitMask
FROM    vwТерритории 
WHERE   Parent IS NULL                                  
        AND NOT EXISTS(SELECT * FROM #Территории X WHERE vwТерритории.КодТерритории = X.КодТерритории)
        
SELECT #Территории.[КодТерритории] id,
       #Территории.Территория text,      
       #Территории.[Parent] ParentId,
       #Территории.[L],
       #Территории.[R],
       #Территории.[Изменил],
       #Территории.[Изменено], 
       #Территории.BitMask,
       #Территории.R-#Территории.L ЕстьДети
FROM #Территории
INNER JOIN vwТерритории r ON #Территории.КодТерритории = r.КодТерритории
ORDER BY {0}
DROP TABLE #Территории
";

        /// <summary>
        ///     Строка запроса: Получение информации подчиненных территориях
        /// </summary>
        public static string SELECT_ТерриторииПодчиненные = @"
SELECT  КодТерритории, Территория, Caption, Территория1, КодОКСМ, Направление, ТелКодСтраны, L, R
FROM vwТерритории
WHERE Parent = @Код";

        /// <summary>
        ///     Строка запроса: Добавление территории
        /// </summary>
        public const string INSERT_Территория = @"
INSERT INTO [Инвентаризация].[dbo].[vwТерритории]
      ([КодТТерритории]
      ,[Территория]
      ,[Caption]
      ,[Территория1]
      ,[Caption1]
      ,[Аббревиатура]
      ,[КодОКСМ]
      ,[ТелКодСтраны]
      ,[Направление]
      ,[Parent])
     VALUES
       (@КодТТерритории,
       @Территория,
       @Caption,
       @Территория1,
       @Caption1,
       @Аббревиатура,
       @КодОКСМ,
       @ТелКодСтраны,
       @Направление,
       @Parent
)";

        /// <summary>
        ///     Строка запроса: Изменение территории
        /// </summary>
        public const string UPDATE_Территория = @"
UPDATE [Инвентаризация].[dbo].[vwТерритории]
      SET 
        [КодТТерритории] = @КодТТерритории
       ,[Территория] = @Территория
       ,[Caption] = @Caption
       ,[Территория1] = @Территория1
       ,[Caption1] = @Caption1
       ,[Аббревиатура] = @Аббревиатура
       ,[КодОКСМ] = @КодОКСМ
       ,[ТелКодСтраны] = @ТелКодСтраны
       ,[Направление] = @Направление
       ,[Parent] = @Parent
    WHERE КодТерритории = @КодТерритории
";

        /// <summary>
        ///     Строка запроса: Получаем телефонные коды по КодуТерритории
        /// </summary>
        public const string SELECT_Территории_ТелефонныйКодГорода = @"
DECLARE @lang char(2)
SELECT @lang=Язык FROM Сотрудники WHERE SID=SUSER_SID()

SELECT  ТелефонныеКоды.ТелефонныйКод,ТелефонныеКоды.КодТерритории,ТелефонныеКоды.ДлинаКодаОбласти,
        ТелефонныеКоды.КодТипаТелефоннойСвязи,ТелефонныеКоды.Комментарий,
        ТипыТелефоннойСвязи.ТипТелефоннойСвязи, CASE WHEN @lang <> 'ru' THEN Сотрудники.Employee ELSE Сотрудники.Сотрудник END ИзменилФИО,
        ТелефонныеКоды.Изменил,ТелефонныеКоды.Изменено
FROM    ТелефонныеКоды INNER JOIN 
        ТипыТелефоннойСвязи ON ТелефонныеКоды.КодТипаТелефоннойСвязи = ТипыТелефоннойСвязи.КодТипаТелефоннойСвязи INNER JOIN
	    Сотрудники ON ТелефонныеКоды.Изменил = Сотрудники.КодСотрудника  
WHERE   ТелефонныеКоды.КодТерритории = @КодТерритории";

        /// <summary>
        ///     Строка запроса: Получаем телефонный код города по ID территории
        /// </summary>
        public const string SELECT_ID_Территории_ТелефонныйКодГорода = @"
SELECT  TOP 1 SUBSTRING(ТелефонныйКод, ISNULL(LEN(ТелКодСтраны),0)+1, ДлинаКодаОбласти) ТелКодВСтране
FROM    ТелефонныеКоды INNER JOIN 
        Территории ON ТелефонныеКоды.КодТерритории = Территории.КодТерритории
WHERE   Территории.КодТерритории = @id AND КодТТерритории = 4";

        /// <summary>
        ///     Строка запроса: Получаем информацию о телефонах по коду территории
        /// </summary>
        public const string SELECT_ID_Территории_ТелефонныеКоды = @"
SELECT  ТелефонныеКоды.КодТерритории, Направление, Территории.ТелКодСтраны,
        SUBSTRING(ТелефонныйКод, ISNULL(LEN(ТелКодСтраны),0)+1, ДлинаКодаОбласти) ТелКодВСтране,  
        SUBSTRING(ТелефонныйКод, ISNULL(LEN(ТелКодСтраны),0)+ДлинаКодаОбласти+1, LEN(ТелефонныйКод)) as Телефон
FROM    ТелефонныеКоды INNER JOIN 
        Территории ON ТелефонныеКоды.КодТерритории = Территории.КодТерритории
WHERE   Территории.КодТерритории = @id";

        /// <summary>
        ///     Строка запроса: Получаем информацию о телефоне по номеру телефона
        /// </summary>
        public const string SELECT_ТелефонныеКоды = @"
SELECT  TOP 1 ТелефонныеКоды.КодТерритории, Направление, ТелКодСтраны,
        SUBSTRING(ТелефонныйКод, ISNULL(LEN(ТелКодСтраны),0)+1, LEN(ТелефонныйКод)) ТелКодВСтране,
        SUBSTRING(@phone, ISNULL(LEN(ТелКодСтраны),0)+ДлинаКодаОбласти+1, LEN(@phone)) as Телефон
FROM    ТелефонныеКоды INNER JOIN 
        Территории ON ТелефонныеКоды.КодТерритории = Территории.КодТерритории
WHERE   @phone LIKE ТелефонныеКоды.ТелефонныйКод + '%'
ORDER BY LEN(ТелефонныеКоды.ТелефонныйКод) DESC";

        /// <summary>
        ///     Строка запроса: Получить направление, ТелКодСтраны, ТелКодВСтране, ДлинаКодаОбласти и название территории из
        ///     телефонного номера
        /// </summary>
        public const string SELECT_ЧастиТелефонногоНомера = @"
--получение Направления, ТелКодСтраны, ТелКодВСтране, ДлинаКодаОбласти и название территории из телефонного номера
SET @Телефон = COALESCE(@Телефон, '')
SELECT  TOP 1 Направление,
        ТелКодСтраны,
        SUBSTRING(ТелефонныйКод, ISNULL(LEN(ТелКодСтраны),0)+1, LEN(ТелефонныйКод)) ТелКодВСтране,
        ТелефонныеКоды.ДлинаКодаОбласти ДлинаКодаВСтране,
        Территория
FROM ТелефонныеКоды INNER JOIN Территории ON ТелефонныеКоды.КодТерритории = Территории.КодТерритории
WHERE (@Телефон LIKE ТелефонныйКод + '%')
ORDER BY LEN(ТелефонныйКод) DESC";

        #endregion

        #region Тарификация мобильной связи

        /// <summary>
        ///     Строка запроса: Получение договора сотовой связи по ID
        /// </summary>
        public const string SELECT_ID_ДоговорСотовойСвязи =
            @"SELECT КодДокумента КодДоговора, Д.Исполнитель + ' - ' + Д.Заказчик + ISNULL(' №' + NULLIF(Д.НомерДокумента,''),'') Договор FROM Инвентаризация.dbo.ДоговораСвязи Д (nolock) WHERE Сотовая = 1 AND КодДокумента = @id";

        /// <summary>
        ///     Строка запроса: Договора сотовой связи, по которым существует тарификация мобильной связи
        /// </summary>
        public const string SELECT_ДоговораПоКоторымБылаТарификация = @"
SELECT КодДокумента КодДоговора, T0.Исполнитель + ' - ' + T0.Заказчик + ISNULL(' №' + NULLIF(T0.НомерДокумента,''),'') Договор 
FROM Инвентаризация.dbo.ДоговораСвязи T0 (nolock) 
WHERE EXISTS(SELECT * FROM Тарификация.dbo.vwТарификацияСотовыхИтоги Т (nolock) 
            WHERE   Т.КодДоговора = T0.КодДоговора
                    AND ((@OpenMonth = 1 AND Год = 0 AND Месяц = 0)
			            OR (@OpenMonth = 0 AND ((@Год IS NULL OR Год = @Год) AND (@Месяц IS NULL OR Месяц = @Месяц))))
) 
";

        #endregion

        #region Роли

        /// <summary>
        ///     Строка запроса: Получить роли сотрудника
        /// </summary>
        public static string SELECT_РолиСотрудника = @" 
--Получение информации о ролях сотрудника
SELECT  РолиСотрудников.КодРоли, 
	    РолиСотрудников.КодСотрудника, 
	    РолиСотрудников.КодЛица,
	    CASE WHEN ЛицаЗаказчики.КодЛица IS NULL THEN '' ELSE 
	        ISNULL(NULLIF(CASE WHEN ЛицаЗаказчики.КраткоеНазваниеРус = '' THEN ЛицаЗаказчики.КраткоеНазваниеЛат ELSE ЛицаЗаказчики.КраткоеНазваниеРус END,''), ЛицаЗаказчики.Кличка) 
	    END НазваниеЛица,
	    vwРоли.Роль, 
	    vwРоли.Описание 
FROM    РолиСотрудников LEFT JOIN 
        vwРоли ON РолиСотрудников.КодРоли = vwРоли.КодРоли LEFT JOIN 
        ЛицаЗаказчики ON РолиСотрудников.КодЛица = ЛицаЗаказчики.КодЛица
WHERE   РолиСотрудников.КодСотрудника = @КодСотрудника";

        /// <summary>
        /// Строка запроса: Получить информацию о всех ролях сотрудников, входящих в группу посменной работы
        /// </summary>
        public static string SELECT_РолиСотрудникаВГруппе = @"
--Получение информации о всех ролях сотрудников, входящих в группу посменной работы
SELECT  DISTINCT 
        РолиСотрудников.КодРоли, 
	    @КодОбщегоСотрудника КодСотрудника, 
	    РолиСотрудников.КодЛица,
	    CASE WHEN ЛицаЗаказчики.КодЛица IS NULL THEN '' ELSE 
	    ISNULL(NULLIF(CASE WHEN ЛицаЗаказчики.КраткоеНазваниеРус = '' THEN ЛицаЗаказчики.КраткоеНазваниеЛат ELSE ЛицаЗаказчики.КраткоеНазваниеРус END,''), ЛицаЗаказчики.Кличка) 
	    END НазваниеЛица,
	    vwРоли.Роль, 
	    vwРоли.Описание 
FROM    РолиСотрудников LEFT JOIN 
        vwРоли ON РолиСотрудников.КодРоли = vwРоли.КодРоли LEFT JOIN 
        ЛицаЗаказчики ON РолиСотрудников.КодЛица = ЛицаЗаказчики.КодЛица
WHERE   РолиСотрудников.КодСотрудника IN (SELECT КодСотрудника FROM Сотрудники WHERE КодОбщегоСотрудника = @КодОбщегоСотрудника)
";

        /// <summary>
        ///     Строка запроса: Получить роли текущего сотрудника, учитывая замещения
        /// </summary>
        public static string SELECT_РолиТекущегоСотрудника = @" 
--Получение ролей текущего сотрудника, учитывая замещения
SELECT  РолиСотрудника.КодРоли, 
	    @КодСотрудника AS КодСотрудника, 
	    РолиСотрудника.КодЛица,
	    CASE WHEN ЛицаЗаказчики.КодЛица IS NULL THEN '' ELSE 
	        ISNULL(NULLIF(CASE WHEN ЛицаЗаказчики.КраткоеНазваниеРус = '' THEN ЛицаЗаказчики.КраткоеНазваниеЛат ELSE ЛицаЗаказчики.КраткоеНазваниеРус END,''), ЛицаЗаказчики.Кличка) 
	    END НазваниеЛица,
	    vwРоли.Роль, 
	    vwРоли.Описание 
FROM    fn_ТекущиеРоли() РолиСотрудника LEFT JOIN 
        vwРоли ON РолиСотрудника.КодРоли = vwРоли.КодРоли LEFT JOIN 
        ЛицаЗаказчики ON РолиСотрудника.КодЛица = ЛицаЗаказчики.КодЛица";

        /// <summary>
        ///     Строка запроса: список ролей
        /// </summary>
        public static string SELECT_Роли = @" 
--получение списка ролей
SELECT * FROM vwРоли";

        /// <summary>
        ///     Строка запроса: роль по id
        /// </summary>
        public static string SELECT_ID_Роль = @" 
--получение информации о роли
SELECT * FROM vwРоли WHERE КодРоли = @id";

        /// <summary>
        ///     Строка запроса: Получить роль сорудника
        /// </summary>
        public static string SELECT_РолиСотрудника_КодСотрудника_КодРоли_КодЛица = @" 
SELECT * FROM РолиСотрудников WHERE КодСотрудника = @КодСотрудника AND КодРоли=@КодРоли AND КодЛица=@КодЛица";

        /// <summary>
        ///     Запрос для поиска ролей в приложении Роли сотрудников
        /// </summary>
        public static string SELECT_РолиПоиск = @"
--поиск ролей
DECLARE @Язык char(2)
SELECT @Язык = Язык FROM Сотрудники WHERE SID=SUSER_SID()

SELECT	РолиСотрудников.КодСотрудника, 
	    Сотрудники.ФИО,          
	    Сотрудник =     CASE    WHEN @Язык = 'ru' THEN Сотрудники.Сотрудник + CASE WHEN Сотрудники.Дополнение <> '' THEN ' (' + Сотрудники.Дополнение + ')' ELSE '' END
				            ELSE Сотрудники.Employee + CASE WHEN Сотрудники.Addition <> '' THEN ' (' + Сотрудники.Addition + ')' ELSE '' END
			        END,
	    vwРоли.Роль,
	    РолиСотрудников.КодЛица, 
	    ISNULL(Лица.Кличка,CASE WHEN РолиСотрудников.КодЛица=0 THEN '<Все организации>' ELSE '#'+CONVERT(varchar,РолиСотрудников.КодЛица) END) Организация, 
	    РолиСотрудников.КодРоли
FROM    РолиСотрудников INNER JOIN
	    Сотрудники ON РолиСотрудников.КодСотрудника = Сотрудники.КодСотрудника INNER JOIN
	    vwРоли ON РолиСотрудников.КодРоли = vwРоли.КодРоли LEFT JOIN
	    ЛицаЗаказчики Лица ON РолиСотрудников.КодЛица = Лица.КодЛица
WHERE	(@КодРоли = -1 OR РолиСотрудников.КодРоли = @КодРоли) AND 
	    (@КодЛица = -1 OR РолиСотрудников.КодЛица = @КодЛица OR (@КодЛица > 0 AND РолиСотрудников.КодЛица=0))
";

        /// <summary>
        ///     Строка запроса: Добавление роли сотруднику
        /// </summary>
        public static string INSERT_РолиСотрудников = @"
--добавление роли сотруднику
IF NOT EXISTS (SELECT * FROM РолиСотрудников WHERE КодРоли = @КодРоли AND КодСотрудника = @КодСотрудника AND КодЛица = @КодЛица)
BEGIN
	IF EXISTS(SELECT * FROM Сотрудники WHERE КодОбщегоСотрудника = @КодСотрудника AND [Login] <> '')		
		INSERT	РолиСотрудников(КодРоли, КодСотрудника, КодЛица)
		SELECT	@КодРоли, КодСотрудника, @КодЛица
		FROM	Сотрудники
		WHERE	КодОбщегоСотрудника = @КодСотрудника AND [Login] <> ''
			AND NOT EXISTS(SELECT * FROM РолиСотрудников 
			               WHERE	РолиСотрудников.КодРоли = @КодРоли 
						AND РолиСотрудников.КодСотрудника = Сотрудники.КодСотрудника 
						AND РолиСотрудников.КодЛица = @КодЛица)
	ELSE	
		INSERT РолиСотрудников(КодРоли, КодСотрудника, КодЛица) VALUES(@КодРоли, @КодСотрудника, @КодЛица)
END
";

        /// <summary>
        ///     Строка запроса: Добавление роли сотруднику
        /// </summary>
        public static string INSERT_РолиСотрудников_БизнесПроект = @"
--добавление роли сотруднику в компаниях по бизнес проекту
DECLARE @Лица TABLE(КодЛица int)
DECLARE @Сотрудники TABLE(КодСотрудника int)

INSERT  @Лица
SELECT  КодЛица FROM ЛицаЗаказчики WHERE КодБизнесПроекта = @КодБизнесПроекта

INSERT @Сотрудники
SELECT КодСотрудника FROM Сотрудники WHERE КодОбщегоСотрудника = @КодСотрудника AND [Login] <> '' AND Состояние < 3
IF @@ROWCOUNT = 0
	INSERT @Сотрудники
	SELECT КодСотрудника FROM Сотрудники WHERE КодСотрудника = @КодСотрудника AND [Login] <> '' AND Состояние < 3

INSERT  РолиСотрудников(КодРоли, КодСотрудника, КодЛица)
SELECT  @КодРоли, Z.КодСотрудника, X.КодЛица 
FROM	@Лица X CROSS JOIN @Сотрудники Z
WHERE   NOT EXISTS(SELECT * FROM РолиСотрудников Y WHERE Y.КодРоли = @КодРоли AND Y.КодСотрудника = Z.КодСотрудника AND (Y.КодЛица = X.КодЛица OR Y.КодЛица = 0))
";

        /// <summary>
        ///     Удалить роль сотрудника @КодСотрудника, @КодРоли, @КодЛица
        /// </summary>
        public static string DELETE_РолиСотрудников = @"
DELETE РолиСотрудников WHERE КодСотрудника = @КодСотрудника AND КодРоли=@КодРоли AND КодЛица=@КодЛица";

        #endregion

        #region Оборудование

        /// <summary>
        ///     Строка запроса: Получить ответственного за оборудование
        /// </summary>
        public const string SELECT_ID_ОборудованиеСотрудников = @"
--Получение информации об ответственном за оборудование
DECLARE @Язык char(2)
SELECT @Язык = Язык FROM Сотрудники WHERE SID=SUSER_SID()

SELECT  Сотрудники.КодСотрудника, CASE WHEN @Язык <> 'ru' THEN Сотрудники.Employee ELSE Сотрудники.Сотрудник END Сотрудник
FROM    ОборудованиеСотрудников INNER JOIN 
        Сотрудники ON ОборудованиеСотрудников.КодСотрудника = Сотрудники.КодСотрудника
WHERE   ОборудованиеСотрудников.КодОборудования = @id AND ОборудованиеСотрудников.До IS NULL
ORDER BY Сотрудник
";

        /// <summary>
        ///     Строка запроса: Получить оборудование по идентификатору
        /// </summary>
        public const string SELECT_ID_Оборудование = @"
SELECT vwОборудование.*, МоделиОборудования.МодельОборудования FROM vwОборудование 
INNER JOIN МоделиОборудования ON vwОборудование.КодМоделиОборудования = МоделиОборудования.КодМоделиОборудования
WHERE КодОборудования = @id";

        /// <summary>
        ///     Строка запроса: Получить оборудование по сетевому имени
        /// </summary>
        public const string SELECT_Оборудование_По_СетевомуИмени = @"
DECLARE @ndx int;
SET @ndx = CHARINDEX('\', REVERSE(@СетевоеИмя));
if (@ndx <> 0)
SET @СетевоеИмя = SUBSTRING(@СетевоеИмя,LEN(@СетевоеИмя) + 2 - @ndx, LEN(@СетевоеИмя) )
SELECT TOP 1 * FROM vwОборудование WHERE СетевоеИмя = @СетевоеИмя OR СетевоеИмя = '*' + @СетевоеИмя OR @СетевоеИмя LIKE СетевоеИмя + '[.]%' OR @СетевоеИмя LIKE '%[\]' + СетевоеИмя";

        /// <summary>
        ///     Строка запроса: Получить оборудование по сетевому имени или мак адресу
        /// </summary>
        public const string SELECT_Оборудование_По_СетевомуИмениИлиМакАдресу = @"
DECLARE @ndx int;
SET @ndx = CHARINDEX('\', REVERSE(@СетевоеИмя));
if (@ndx <> 0)
SET @СетевоеИмя = SUBSTRING(@СетевоеИмя,LEN(@СетевоеИмя) + 2 - @ndx, LEN(@СетевоеИмя) )
SELECT TOP 1 * FROM vwОборудование WHERE 
        СетевоеИмя = @СетевоеИмя OR СетевоеИмя = '*' + @СетевоеИмя OR @СетевоеИмя LIKE СетевоеИмя + '[.]%' OR @СетевоеИмя LIKE '%[\]' + СетевоеИмя 
    OR  MACадрес   = @СетевоеИмя OR MACадрес   = '*' + @СетевоеИмя OR @СетевоеИмя LIKE MACадрес   + '[.]%' OR @СетевоеИмя LIKE '%[\]' + MACадрес ";

        /// <summary>
        ///     Строка запроса: Получить модель оборудования по идентификатору
        /// </summary>
        public const string SELECT_ID_МодельОборудования = @"
SELECT * FROM МоделиОборудования WHERE КодМоделиОборудования = @id";

        /// <summary>
        ///     Строка запроса: Добавить модель оборудования и получить ее идентификатор
        /// </summary>
        public const string INSERT_МоделиОборудования = @"
INSERT МоделиОборудования (КодРесурса, КодТипаОборудования, МодельОборудования, PN, CPU, РазмерМонитора, КодТипаПамяти, БанковПамяти, 
Мультимедиа, Net, НазваниеNet, Драйвер, Ресурс, ШаблонТелефона) 
VALUES (@КодРесурса, @КодТипаОборудования, @МодельОборудования, @PN, @CPU, @РазмерМонитора, @КодТипаПамяти, @БанковПамяти, 
@Мультимедиа, @Net, @НазваниеNet, @Драйвер, @Ресурс, @ШаблонТелефона)
SELECT @@IDENTITY";

        /// <summary>
        ///     Строка запроса: Обновить модель оборудования
        /// </summary>
        public const string UPDATE_МоделиОборудования = @"
UPDATE МоделиОборудования SET КодРесурса=@КодРесурса, КодТипаОборудования=@КодТипаОборудования, МодельОборудования=@МодельОборудования, PN=@PN,
CPU=@CPU, РазмерМонитора=@РазмерМонитора, КодТипаПамяти=@КодТипаПамяти, БанковПамяти=@БанковПамяти, Мультимедиа=@Мультимедиа,
Net=@Net, НазваниеNet=@НазваниеNet, Драйвер=@Драйвер, Ресурс=@Ресурс, ШаблонТелефона=@ШаблонТелефона
WHERE КодМоделиОборудования=@КодМоделиОборудования";

        /// <summary>
        ///     Строка запроса: Обновить Шаблон телефона
        /// </summary>
        public const string UPDATE_МоделиОборудования_ШаблонТелефона = @"
UPDATE МоделиОборудования SET ШаблонТелефона = @ШаблонТелефона WHERE КодМоделиОборудования = @КодМоделиОборудования";

        /// <summary>
        ///     Строка запроса: Проверить существование модели оборудования по названию и PN
        /// </summary>
        public const string SELECT_МодельОборудования_EXISTS = @"
IF EXISTS(SELECT * FROM МоделиОборудования WHERE КодМоделиОборудования <> @КодМоделиОборудования AND МодельОборудования = @МодельОборудования AND PN = @PN)
    SELECT 1
ELSE
    SELECT 0";

        /// <summary>
        ///     Строка запроса: Получить типы оборудования
        /// </summary>
        public const string SELECT_ТипыОборудования = @"
DECLARE @lang char(2)
SELECT @lang=Язык FROM Сотрудники WHERE SID=SUSER_SID()

SELECT КодТипаОборудования, 
CASE WHEN @lang <> 'ru' THEN ТипОборудованияЛат ELSE ТипОборудования END AS ТипОборудования
FROM ТипыОборудования";

        /// <summary>
        ///     Строка запроса: Получить тип оборудования по идентификатору
        /// </summary>
        public const string SELECT_ID_ТипыОборудования = @"
SELECT * FROM ТипыОборудования WHERE КодТипаОборудования = @id";

        /// <summary>
        ///     Строка запроса: Получить типы памяти
        /// </summary>
        public const string SELECT_ТипыПамяти = @"
SELECT КодТипаПамяти, ТипПамяти FROM ТипыПамяти ORDER BY ТипПамяти";

        /// <summary>
        ///     Строка запроса: Получить информацию об оборудовании по коду сотрудника
        /// </summary>
        public const string SELECT_ID_ОборудованиеСотрудникаНаДругихРабочихМестах = @"
--Получить информацию об оборудовании по коду сотрудника
DECLARE @Язык char(2)
SELECT @Язык = Язык FROM Сотрудники WHERE SID = SUSER_SID() 

SELECT	
    vwОборудование.КодОборудования, 
	МоделиОборудования.КодТипаОборудования, 
	ТипыОборудования.ТипОборудования, 
	vwОборудование.КодМоделиОборудования, 
	МоделиОборудования.МодельОборудования, 	
	ОборудованиеРасположение.КодРасположения, 
	vwРасположения.РасположениеPath1 РасположениеPath, 
	ОборудованиеСотрудников.КодСотрудника, 
	CASE WHEN @Язык='ru' THEN Сотрудники.ФИО ELSE Сотрудники.FIO END Сотрудник
	--, Изменил, Изменено 
FROM	vwОборудование INNER JOIN 
	МоделиОборудования ON vwОборудование.КодМоделиОборудования = МоделиОборудования.КодМоделиОборудования INNER JOIN 
	ТипыОборудования ON ТипыОборудования.КодТипаОборудования = МоделиОборудования.КодТипаОборудования INNER JOIN
	ОборудованиеРасположение ON ОборудованиеРасположение.КодОборудования = vwОборудование.КодОборудования INNER JOIN
	vwРасположения ON ОборудованиеРасположение.КодРасположения = vwРасположения.КодРасположения INNER JOIN
	ОборудованиеСотрудников ON ОборудованиеСотрудников.КодОборудования = vwОборудование.КодОборудования AND До IS NULL INNER JOIN
	Сотрудники ON Сотрудники.КодСотрудника = ОборудованиеСотрудников.КодСотрудника
WHERE	ОборудованиеСотрудников.КодСотрудника = @id 
	AND (@IT=0 OR @IT = 1 AND МоделиОборудования.КодТипаОборудования < 100)
    AND (@ExcludeId=0 OR vwРасположения.КодРасположения <> @ExcludeId)
	AND (@WPType = 0 OR vwРасположения.РабочееМесто = @WPType)	
	AND Списано IS NULL    
	AND ОборудованиеРасположение.КодРасположения NOT IN(55,86) --не на руках и не в ремонте
	AND NOT EXISTS(SELECT * FROM ОборудованиеРасположение X WHERE X.КодОборудования = vwОборудование.КодОборудования AND X.От > ОборудованиеРасположение.От)	
	AND NOT EXISTS(SELECT * FROM РабочиеМеста 
	               WHERE	РабочиеМеста.КодСотрудника= ОборудованиеСотрудников.КодСотрудника 
				AND РабочиеМеста.КодРасположения=ОборудованиеРасположение.КодРасположения)
	
ORDER BY ТипОборудования, МодельОборудования
	";

        /// <summary>
        ///     Строка запроса: Получить информацию об оборудовании по коду расположения
        /// </summary>
        public const string SELECT_ID_ОборудованиеНаРасположении = @"
--Получение информации об оборудовании по коду расположения
DECLARE @Язык char(2)
SELECT @Язык = Язык FROM Сотрудники WHERE SID = SUSER_SID() 

SELECT	КодОборудования, КодТипаОборудования, ТипОборудования, КодМоделиОборудования, МодельОборудования, КодРасположения, РасположениеPath, vwОборудованиеСписок.КодСотрудника, CASE WHEN @Язык='ru' THEN Сотрудники.Сотрудник ELSE Сотрудники.Employee END Сотрудник --, Изменил, Изменено 
FROM	vwОборудованиеСписок LEFT JOIN 
        Сотрудники ON vwОборудованиеСписок.КодСотрудника = Сотрудники.КодСотрудника
WHERE	КодРасположения = @id AND (@IT=0 OR @IT = 1 AND КодТипаОборудования < 100)
	    AND Списано IS NULL	
ORDER BY ТипОборудования, МодельОборудования";

        /// <summary>
        ///     Строка запроса: Получить информацию о наличии ИТ-оборудования по коду расположения
        /// </summary>
        public const string SELECT_ID_ОборудованиеITНаРасположении = @"
--Получение информации о наличии ИТ-оборудования на указанном расположении
SELECT	КодОборудования
FROM	vwОборудование
WHERE	Списано IS NULL
        AND EXISTS( SELECT * FROM МоделиОборудования
	                WHERE vwОборудование.КодМоделиОборудования = МоделиОборудования.КодМоделиОборудования AND КодТипаОборудования < 100)
        AND EXISTS( SELECT * FROM ОборудованиеРасположение 
     	            WHERE   ОборудованиеРасположение.КодОборудования = vwОборудование.КодОборудования 
     	                    AND КодРасположения = @Id 
     	                    AND NOT EXISTS( SELECT * FROM ОборудованиеРасположение X 
     			                            WHERE X.КодОборудования = ОборудованиеРасположение.КодОборудования AND X.От > ОборудованиеРасположение.От))";

        /// <summary>
        ///     Строка запроса: Получить информацию о наличии ИТ-оборудования сотрудника по коду расположения
        /// </summary>
        public const string SELECT_ID_ОборудованиеITСотрудникаНаРасположении = @"
--Получение информации о наличии ИТ-оборудования сотрудника на указанном расположении
SELECT	КодОборудования
FROM	vwОборудование
WHERE	Списано IS NULL
        AND EXISTS( SELECT * FROM МоделиОборудования
	                WHERE vwОборудование.КодМоделиОборудования = МоделиОборудования.КодМоделиОборудования AND КодТипаОборудования < 100)
        AND EXISTS( SELECT * FROM ОборудованиеРасположение 
     	            WHERE   ОборудованиеРасположение.КодОборудования = vwОборудование.КодОборудования 
     	                    AND КодРасположения = @Id 
     	                    AND NOT EXISTS( SELECT * FROM ОборудованиеРасположение X 
     			                            WHERE X.КодОборудования = ОборудованиеРасположение.КодОборудования AND X.От > ОборудованиеРасположение.От))
        AND EXISTS( SELECT * FROM ОборудованиеСотрудников X WHERE X.КодОборудования = vwОборудование.КодОборудования AND X.КодСотрудника = @КодСотрудника AND X.До IS NULL)
";

        /// <summary>
        ///     Строка запроса: Получить информацию о типах не списанного ИТ-оборудования сотрудника на указанном расположении
        /// </summary>
        public const string SELECT_ID_ТипыОборудованияСотрудникаНаРасположении = @"
--Получение информацию о типах не списанного ИТ-оборудования сотрудника на указанном расположении
DECLARE @Info TABLE(КодОборудования int, ТипОборудования varchar(50), ЕстьХарактеристикиКомпьютера tinyint, ЕстьХарактеристикиМонитора tinyint, ЕстьТелефонныйНомер tinyint, УслугиСвязи tinyint, Переадресация varchar(50))

INSERT	@Info
SELECT	Оборудование.КодОборудования,
	ТипыОборудования.ТипОборудования, 	
	ЕстьХарактеристикиКомпьютера, 
	ЕстьХарактеристикиМонитора, 
	ЕстьТелефонныйНомер, 
	0, ''
FROM	vwОборудование Оборудование INNER JOIN 
	МоделиОборудования ON МоделиОборудования.КодМоделиОборудования = Оборудование.КодМоделиОборудования INNER JOIN
	ТипыОборудования ON  ТипыОборудования.КодТипаОборудования = МоделиОборудования.КодТипаОборудования 	
WHERE	ТипыОборудования.КодТипаОборудования < 100 AND Списано IS NULL
	AND EXISTS(SELECT * FROM ОборудованиеСотрудников X WHERE X.КодОборудования = Оборудование.КодОборудования AND До IS NULL AND X.КодСотрудника = @КодСотрудника)
	AND EXISTS(SELECT * FROM ОборудованиеРасположение X 
			WHERE X.КодОборудования = Оборудование.КодОборудования AND X.КодРасположения = @КодРасположения
				AND NOT EXISTS(SELECT * FROM ОборудованиеРасположение Y WHERE X.КодОборудования = Y.КодОборудования AND Y.От > X.От)
		)

UPDATE	X
SET	УслугиСвязи = CASE WHEN X.УслугиСвязи < Y.УслугиСвязи THEN Y.УслугиСвязи ELSE X.УслугиСвязи END,
	Переадресация = CASE WHEN LEN(Y.БыстрыйНабор) < 10 THEN Переадресация ELSE Y.БыстрыйНабор END
FROM	@Info X  INNER JOIN 
	(SELECT ТелефонныеНомераОборудование.КодОборудования, УслугиСвязи, БыстрыйНабор
	FROM	vwТелефонныеНомера ТелефонныеНомера INNER JOIN
		ТелефонныеНомераОборудование ON ТелефонныеНомераОборудование.КодТелефонногоНомера = ТелефонныеНомера.КодТелефонногоНомера
	WHERE	КодСотрудника = @КодСотрудника AND ТелефонныеНомераОборудование.КодОборудования IN(SELECT КодОборудования FROM @Info)) Y ON X.КодОборудования = Y.КодОборудования


SELECT	ТипОборудования, 
	MAX(ЕстьХарактеристикиКомпьютера) ЕстьХарактеристикиКомпьютера, 
	MAX(ЕстьХарактеристикиМонитора) ЕстьХарактеристикиМонитора,
	MAX(ЕстьТелефонныйНомер) ЕстьТелефонныйНомер,
	MAX(УслугиСвязи) УслугиСвязи,
	MAX(Переадресация) Переадресация,
	COUNT(*) N
FROM (	SELECT  CASE WHEN ЕстьХарактеристикиКомпьютера <> 0 THEN 'Компьютер'
			WHEN ЕстьХарактеристикиМонитора <> 0 THEN 'Монитор'
			WHEN ЕстьТелефонныйНомер <> 0 THEN 'Телефон'
			ELSE ТипОборудования END ТипОборудования, 
		ЕстьХарактеристикиКомпьютера, 
		ЕстьХарактеристикиМонитора,
		ЕстьТелефонныйНомер,
		УслугиСвязи,
		Переадресация	
	FROM @Info) X
GROUP BY ТипОборудования 


";

        #endregion

        #region Сеть
        /// <summary>
        ///     Строка запроса: Получить оборудование по идентификатору
        /// </summary>
        public const string SELECT_ID_Сеть = @"
SELECT vwЛокальнаяСеть.* FROM vwЛокальнаяСеть 
WHERE КодЛокальнойСети = @id";


        /// <summary>
        ///     Строка запроса: Розетки
        /// </summary>
        public const string SELECT_Розетки = @"
SELECT  DISTINCT T0.КодРозетки, T0.Розетка AS Название
FROM vwРозетки T0
";

        /// <summary>
        ///     Строка запроса: Соседние не зянятые порты
        /// </summary>
        public const string SELECT_СоседниеПортыНеЗанятые = @"
SELECT КодЛокальнойСети, СетевоеИмя + ', порт:' + Convert(varchar,Порт) as Строка 
FROM dbo.fn_ЛокальнаяСеть_СоседниеПорты(@КодЛокальнойСети) x WHERE Занят = 0 ORDER BY СетевоеИмя, Порт";

        /// <summary>
        ///     Строка запроса: Соседние порты
        /// </summary>
        public const string SELECT_СоседниеПортыВсе = @"
SELECT КодЛокальнойСети, СетевоеИмя + ', порт:' + Convert(varchar,Порт) as Строка 
FROM dbo.fn_ЛокальнаяСеть_СоседниеПорты(@КодЛокальнойСети) x ORDER BY СетевоеИмя, Порт";

        /// <summary>
        ///     Строка запроса: Расположения с типом офис
        /// </summary>
        public const string SELECT_РасположениеОфис = @"       
SELECT КодРасположения
FROM vwРасположения Расположения
    WHERE Офис <> 0 AND L <= @LeftId AND R >= @RightId ORDER BY КодРасположения";

        /// <summary>
        ///     Хранимая процедура: POE
        /// </summary>
        public const string SP_ResetPoEport = "sp_ResetPoEport";

        /// <summary>
        ///     Строка запроса: Добавление локальной сети
        /// </summary>
        public const string INSERT_ЛокальнаяСеть = @"
INSERT INTO [Инвентаризация].[dbo].[vwЛокальнаяСеть]
           ([КодОборудования]
           ,[Порт]
           ,[PoE]
           ,[КодРозетки]
           ,[КодЛицаЗаказчика]
           ,[КодСотрудника]
           ,[Подключено]
           ,[Примечания]
           ,[СрокВозврата]
           ,[Изменил]
           ,[Изменено])
     VALUES
           (@КодОборудования,
           @Порт,
           @PoE,
           @КодРозетки,
           @КодЛицаЗаказчика,
           @КодСотрудника,
           @Подключено,
           @Примечания,
           @СрокВозврата
)";

        /// <summary>
        ///     Строка запроса: Обновление локальной сети
        /// </summary>
        public const string UPDATE_ЛокальнаяСеть = @"
UPDATE [Инвентаризация].[dbo].[vwЛокальнаяСеть]
   SET 
      [КодРозетки] = @КодРозетки,
      [КодЛицаЗаказчика] = @КодЛицаЗаказчика,
      [КодСотрудника] = @КодСотрудника,
      [Подключено] = @Подключено,
      [Примечания] = @Примечания,
      [СрокВозврата] = @СрокВозврата
 WHERE КодЛокальнойСети = @КодЛокальнойСети
";

        #endregion

        #region Черный список
        /// <summary>
        /// Строка запроса: Получение списка заблокированных телефонных номеров
        /// </summary>
        public static string SELECT_ЧерныйСписок = @"
--получение списка заблокированных телефонных номеров
SELECT	X.КодНомераТфОП_BlockList,
      	X.НомерТфОП, 
      	X.ПричинаБлокировки,
      	NULLIF(X.Создал, 0) КодИнициатора,
        СотрудникиCreated.Сотрудник Инициатор,
      	X.Создано, 
      	X.ВременноДо,
      	NULLIF(X.Изменил, 0) КодСотрудника,
        Сотрудники.Сотрудник,
      	X.Изменено,
        1 AS Действует
FROM	vwНомераТфОП_BlockList X LEFT JOIN
	Инвентаризация.dbo.Сотрудники  Сотрудники ON X.Изменил = Сотрудники.КодСотрудника
LEFT JOIN
	Инвентаризация.dbo.Сотрудники  СотрудникиCreated ON X.Создал = СотрудникиCreated.КодСотрудника
WHERE	X.ВременноДо IS NULL OR X.ВременноДо > GETUTCDATE() 

";
        /// <summary>
        /// Строка запроса: Получение списка заблокированных телефонных номеров
        /// </summary>
        public static string SELECT_ЧерныйСписокВсе = @"
--получение списка заблокированных телефонных номеров
SELECT	X.КодНомераТфОП_BlockList,
      	X.НомерТфОП, 
      	X.ПричинаБлокировки,
      	NULLIF(X.Создал, 0) КодИнициатора,
        СотрудникиCreated.Сотрудник Инициатор,
      	X.Создано, 
      	X.ВременноДо,
      	NULLIF(X.Изменил, 0) КодСотрудника,
        Сотрудники.Сотрудник,
      	X.Изменено,        
        CASE WHEN X.ВременноДо IS NULL OR X.ВременноДо > GETUTCDATE() THEN 1 ELSE 0 END AS Действует
FROM	vwНомераТфОП_BlockList X LEFT JOIN
	Инвентаризация.dbo.Сотрудники  Сотрудники ON X.Изменил = Сотрудники.КодСотрудника
LEFT JOIN
	Инвентаризация.dbo.Сотрудники  СотрудникиCreated ON X.Создал = СотрудникиCreated.КодСотрудника
";
        /// <summary>
        /// Строка запроса: Заблокировать телефонный номер
        /// </summary>
        public static string INSERT_ЧерныйСписок = @"
--заблокировать телефонный номер
INSERT vwНомераТфОП_BlockList(НомерТфОП, ВременноДо, ПричинаБлокировки)
VALUES ( @НомерТфОП, NULL, @ПричинаБлокировки)
SELECT SCOPE_IDENTITY() КодНомераТфОП_BlockList
";
        /// <summary>
        /// Строка запроса: Обновление информации о заблокированном телефонном номере
        /// </summary>
        public static string UPDATE_ID_ЧерныйСписок = @"
--обновление информации о заблокированном телефонном номере
UPDATE  vwНомераТфОП_BlockList
SET     НомерТфОП = @НомерТфОП, ПричинаБлокировки = @ПричинаБлокировки
WHERE   КодНомераТфОП_BlockList = @id
";

        /// <summary>
        /// Строка запроса: Заблокировать телефонный номер на построянной основе
        /// </summary>
        public static string UPDATE_ID_ЧерныйСписок_Постоянно = @"
--заблокировать телефонный номер на построянной основе
UPDATE  vwНомераТфОП_BlockList
SET     НомерТфОП = @НомерТфОП, ВременноДо = NULL, ПричинаБлокировки = @ПричинаБлокировки
WHERE   КодНомераТфОП_BlockList = @id
";

        /// <summary>
        /// Строка запроса: Разблокировать телефонный номер
        /// </summary>
        public static string DELETE_ID_ЧерныйСписок = @"
--разблокировка телефонного номера
UPDATE  vwНомераТфОП_BlockList
SET     ВременноДо =  GETUTCDATE() 
WHERE   КодНомераТфОП_BlockList = @id
";

        /// <summary>
        /// Строка запроса: Получение информации о заблокированном телефонном номере по идентификатору
        /// </summary>
        public static string SELECT_ID_ЧерныйСписок_ТелефонныйНомер = @"
--получение информации о заблокированном телефонном номере по идентификатору
SELECT * FROM vwНомераТфОП_BlockList WHERE КодНомераТфОП_BlockList = @id
";

        /// <summary>
        /// Строка запроса: Получение информации о блокировке телефонного номера
        /// </summary>
        public static string SELECT_NUM_ЧерныйСписок_ТелефонныйНомер = @"
--получение информации о заблокированном телефонном номере по идентификатору
SELECT * FROM vwНомераТфОП_BlockList WHERE НомерТфОП = @НомерТфОП AND (ВременноДо IS NULL OR ВременноДо > GETUTCDATE())
";


        #endregion

        #region Инвентаризация

        /// <summary>
        /// Процедура: проверка использования email-адреса логином
        /// Возвращаемые значения:
		/// 0 - не используется
		/// 1 - используется как неосновной
		/// 2 - используется как основной
		/// 3 - является логином сотрудника
        /// </summary>
        public const string SP_EmailUsed = @"sp_EmailUsed";

        /// <summary>
        /// Строка запроса: перемещение ИТ-оборудования сотрудника на новое расположение со старого рабочего места
        /// </summary>
        public const string INSERT_НовоеРасположениеОборудованияСотрудника = @"
--перемещение ИТ-оборудования сотрудника на новое расположение со старого рабочего места
INSERT	ОборудованиеРасположение(КодОборудования, От, КодРасположения)
SELECT	КодОборудования, GETUTCDATE(), @КодРасположения_New 
FROM	ОборудованиеРасположение
WHERE	КодРасположения = @КодРасположения_Old 
	AND NOT EXISTS(SELECT * FROM ОборудованиеРасположение X WHERE X.КодОборудования = ОборудованиеРасположение.КодОборудования AND X.От > ОборудованиеРасположение.От)
	AND EXISTS(SELECT * FROM ОборудованиеСотрудников WHERE До IS NULL AND ОборудованиеСотрудников.КодСотрудника = @КодСотрудника AND ОборудованиеСотрудников.КодОборудования = ОборудованиеРасположение.КодОборудования)
	AND EXISTS(SELECT * FROM vwОборудование INNER JOIN МоделиОборудования ON vwОборудование.КодМоделиОборудования = МоделиОборудования.КодМоделиОборудования
			WHERE vwОборудование.КодОборудования = ОборудованиеРасположение.КодОборудования AND МоделиОборудования.КодТипаОборудования < 100)
";


        /// <summary>
        ///     Строка запроса: Получение списка запросов указанного типа
        /// </summary>
        public const string SELECT_ЗапросыПоТипу = @"
SELECT * FROM Запросы WHERE ТипЗапроса=@КодТипаЗапроса ORDER BY КодЗапроса
";

        /// <summary>
        ///     Строка запроса: Получение запроса по коду
        /// </summary>
        public const string SELECT_ЗапросПоКодуЗапроса = @"
SELECT * FROM Запросы WHERE КодЗапроса=@Id
";

        /// <summary>
        ///     Строка запроса: Получение колонок по коду запроса
        /// </summary>
        public const string SELECT_ЗапросыКолонкиПоКодуЗапроса = @"
SELECT * FROM ЗапросыКолонки WHERE КодЗапроса=@КодЗапроса /*AND Тип <> 6*/ AND Тип <> 11
";

        /// <summary>
        ///     Строка запроса: Получение информации о ближайшем принтере к расположению
        /// </summary>
        public const string SELECT_БлижайшийПринтер = @"
SELECT dbo.fn_БлижайшийПринтер (@L, @R) 
";

        /// <summary>
        ///     Строка запроса: Сорудники в указанном расположении
        /// </summary>
        public const string SELECT_СотрудникиВРасположении = @"
DECLARE @lang char(2)
SELECT @lang=Язык FROM Сотрудники WHERE SID=SUSER_SID()

SELECT	РабочиеМеста.КодСотрудника, 
        CASE WHEN @lang <> 'ru' THEN Сотрудники.Employee ELSE Сотрудники.Сотрудник END AS Сотрудник
FROM	РабочиеМеста INNER JOIN 
	    Сотрудники ON РабочиеМеста.КодСотрудника = Сотрудники.КодСотрудника
WHERE	РабочиеМеста.КодРасположения = @КодРасположения 
ORDER BY Сотрудники.Сотрудник
";

        /// <summary>
        ///     Строка запроса: РасположенияЛиц
        /// </summary>
        public const string SELECT_РасположенияЛицВРасположении = @"
DECLARE @HAS_PERMS int = 0
SELECT @HAS_PERMS = HAS_PERMS_BY_NAME('РасположенияЛиц', 'OBJECT', 'select') 
IF (@HAS_PERMS = 1)
    SELECT ЛицаЗаказчики.КодЛица, ЛицаЗаказчики.Кличка Компания
    FROM   РасположенияЛиц INNER JOIN
           ЛицаЗаказчики ON РасположенияЛиц.КодЛица = ЛицаЗаказчики.КодЛица
    WHERE РасположенияЛиц.КодРасположения = @КодРасположения
    ORDER BY ЛицаЗаказчики.Кличка
    ELSE
        SELECT NULL КодЛица, '' Компания WHERE 1=0
";

        /// <summary>
        ///     Строка запроса: Работающие сорудники в указанном расположении
        /// </summary>
        public const string SELECT_РаботающиеСотрудникиВРасположении = @" 
DECLARE @lang char(2)
SELECT @lang=Язык FROM Сотрудники WHERE SID=SUSER_SID()

SELECT РабочиеМеста.КодСотрудника, CASE WHEN @lang <> 'ru' THEN Сотрудники.Employee ELSE Сотрудники.Сотрудник END AS Сотрудник
FROM РабочиеМеста
INNER JOIN Сотрудники ON РабочиеМеста.КодСотрудника = Сотрудники.КодСотрудника
WHERE Сотрудники.Состояние=0 and КодРасположения = @КодРасположения
";

        /// <summary>
        ///     Строка запроса: Рабочие места и работающие сорудники в указанном расположении
        /// </summary>
        public const string SELECT_РаботающиеСотрудникиМестаВРасположении = @" 
SELECT s.КодСотрудника, s.ФИО Сотрудник, s.FIO Employee, s.КодЛица, s.Состояние, vwРасположения.РабочееМесто
FROM РабочиеМеста r
INNER JOIN Сотрудники s ON s.КодСотрудника = r.КодСотрудника
INNER JOIN vwРасположения ON vwРасположения.КодРасположения = r.КодРасположения
WHERE r.КодРасположения = @КодРасположения
AND r.КодСотрудника <> @КодСотрудника
AND s.Состояние = 0
ORDER BY s.Сотрудник
";

        /// <summary>
        ///     Строка запроса: Локальная сеть в расположении
        /// </summary>
        public const string SELECT_ЛокальнаяСетьВРасположении = @"
DECLARE @lang char(2)
SELECT @lang=Язык FROM Сотрудники WHERE SID=SUSER_SID()

--получение информации о локальной сети в расположении
SELECT	'-' ЛокальнаяСеть , net.КодЛокальнойСети, net.КодОборудования, net.Stack, net.Порт, net.КодРозетки, net.Розетка, net.Подключено, net.Примечания, net.КодСотрудника, 
        CASE WHEN @lang <> 'ru' THEN Сотрудники.Employee ELSE Сотрудники.Сотрудник END AS Сотрудник, 
        net.Изменил, 
        CASE WHEN @lang <> 'ru' THEN Сотрудники2.Employee ELSE Сотрудники2.Сотрудник END AS ИзменилСотрудник, 
        net.Изменено
FROM	vwЛокальнаяСетьСписок net
LEFT JOIN Сотрудники ON Сотрудники.КодСотрудника = net.КодСотрудника
LEFT JOIN Сотрудники Сотрудники2 ON Сотрудники2.КодСотрудника = net.Изменил
WHERE	net.КодОборудования IN(	SELECT	Оборудование.КодОборудования 
							FROM	vwОборудование Оборудование INNER JOIN 
									ОборудованиеРасположение ON Оборудование.КодОборудования =ОборудованиеРасположение.КодОборудования
							WHERE	ОборудованиеРасположение.КодРасположения = @КодРасположения AND Оборудование.Списано IS NULL
									AND NOT EXISTS(SELECT * FROM ОборудованиеРасположение X WHERE X.КодОборудования = ОборудованиеРасположение.КодОборудования AND X.От > ОборудованиеРасположение.От)									
) 
ORDER BY net.Stack, net.Порт

";

        /// <summary>
        ///     Строка запроса: Оборудование в указанном расположении
        /// </summary>
        public const string SELECT_ОборудованиеВРасположении = @"
DECLARE @lang char(2)
SELECT @lang=Язык FROM Сотрудники WHERE SID=SUSER_SID()

SELECT	Оборудование.КодОборудования,
	    ТипыОборудования.ТипОборудования
	    + ISNULL(' ' + NULLIF(СетевоеИмя,''),'')
	    + ' ' + МоделиОборудования.МодельОборудования 
	    + ISNULL(' PN:' + NULLIF(МоделиОборудования.PN,''),'')
	    + ISNULL(' SN:' + NULLIF(Оборудование.SN,''),'')
	    + ISNULL(' '	+ NULLIF(SIMКарты.НомерТелефона,''),'')
	    + ISNULL(' ('	+ NULLIF(Оборудование.Примечания,'') + ')','') 
	    
	    МодельОборудования,	
	    CASE WHEN @lang <> 'ru' THEN Сотрудники.Employee ELSE Сотрудники.Сотрудник END AS Сотрудник,
        ОборудованиеРасположение.Примечания ПримечаниеВРасположении,
        Сотрудники.КодСотрудника,
	    CONVERT(tinyint,CASE WHEN МоделиОборудования.КодТипаОборудования < 100 THEN 1 ELSE 0 END) IT	
FROM	vwОборудование Оборудование INNER JOIN 
	    ОборудованиеРасположение ON Оборудование.КодОборудования = ОборудованиеРасположение.КодОборудования INNER JOIN
	    МоделиОборудования ON МоделиОборудования.КодМоделиОборудования = Оборудование.КодМоделиОборудования INNER JOIN
	    ТипыОборудования ON ТипыОборудования.КодТипаОборудования = МоделиОборудования.КодТипаОборудования LEFT JOIN
	    ОборудованиеСотрудников ON ОборудованиеСотрудников.КодОборудования = Оборудование.КодОборудования AND ОборудованиеСотрудников.До IS NULL LEFT JOIN
	    Сотрудники ON Сотрудники.КодСотрудника = ОборудованиеСотрудников.КодСотрудника LEFT JOIN
	    vwSIMКарты SIMКарты ON SIMКарты.КодОборудования = Оборудование.КодОборудования 
WHERE	Оборудование.Списано IS NULL
	    AND ОборудованиеРасположение.КодРасположения = @КодРасположения
	    AND NOT EXISTS(SELECT * FROM ОборудованиеРасположение X WHERE X.КодОборудования = ОборудованиеРасположение.КодОборудования AND X.От > ОборудованиеРасположение.От)
ORDER BY МоделиОборудования.КодТипаОборудования, МодельОборудования
";

        /// <summary>
        ///     Строка запроса: Розетки в указанном расположении
        /// </summary>
        public static string SELECT_РозеткиВРасположении = @"
DECLARE @lang char(2)
SELECT @lang=Язык FROM Сотрудники WHERE SID=SUSER_SID()

IF OBJECT_ID('tempdb..#T') IS NOT NULL DROP TABLE #T
CREATE TABLE #T(КодРозетки int PRIMARY KEY, Розетка varchar(10), Работает tinyint, 
		        Примечание varchar(100), 
		        Подключено nvarchar(MAX),
                ПодключеноURL nvarchar(MAX),
                КодТелефонногоНомера int,
		        ПодключеноТелефонныйНомер tinyint, 
                КодОборудования int,
		        ПодключеноЛокальнаяСеть tinyint,
		        Изменил int, ИзменилФИО varchar(155), Изменено datetime,

                ПолныйНомер varchar(10),
                ТелефонныеНомераКодСотрудника int,
                ТелефонныеНомераСотрудник nvarchar(155),
                ТелефонныеНомераПодключено varchar(100),
                КодЛокальнойСети int,
                СетевоеИмяПорт varchar(100),
                ЛокальнаяСетьКодСотрудника int,
                ЛокальнаяСетьСотрудник nvarchar(155),
                ЛокальнаяСетьПодключено  varchar(100),
                КодРасположения int
)

INSERT #T(КодРозетки, Розетка, Работает, Примечание, Изменил, Изменено, КодРасположения)
SELECT	КодРозетки, Розетка, CONVERT(tinyint,Работает) Работает, Примечание, Изменил, Изменено, КодРасположения
FROM	vwРозетки WHERE КодРасположения = @Кодрасположения

--Заполняем подключено по телефонным номерам
UPDATE	X
SET Подключено =	RTRIM('Тел: ' + vwТелефонныеНомера.ПолныйНомер + ' ' + 
			        CASE	WHEN vwТелефонныеНомера.КодСотрудника IS NULL 
				            THEN vwТелефонныеНомера.Подключено
				            ELSE Сотрудники.Сотрудник + ISNULL('(' + NULLIF(vwТелефонныеНомера.Подключено,'') + ')','') END),
    ПодключеноТелефонныйНомер = 1,
    ПолныйНомер = vwТелефонныеНомера.ПолныйНомер,
    ТелефонныеНомераКодСотрудника = vwТелефонныеНомера.КодСотрудника,
    ТелефонныеНомераСотрудник = CASE WHEN @lang <> 'ru' THEN Сотрудники.Employee ELSE Сотрудники.Сотрудник END,
    ТелефонныеНомераПодключено = vwТелефонныеНомера.Подключено,
    КодТелефонногоНомера  = vwТелефонныеНомера.КодТелефонногоНомера
FROM	#T X INNER JOIN 
	    vwТелефонныеНомера ON X.КодРозетки = vwТелефонныеНомера.КодРозетки LEFT JOIN
	    Сотрудники ON vwТелефонныеНомера.КодСотрудника = Сотрудники.КодСотрудника

--Заполняем подключено по локальной сети
UPDATE	X
SET	    Подключено = vwОборудование.СетевоеИмя + '_' + CONVERT(varchar,vwЛокальнаяСеть.Порт) +  
		ISNULL(' '  + Сотрудники.Сотрудник,'') + 
		ISNULL(' (' + NULLIF(vwЛокальнаяСеть.Подключено,'') + ')',''),  
	    ПодключеноЛокальнаяСеть = 1,
        КодОборудования = vwОборудование.КодОборудования,
        КодЛокальнойСети = vwЛокальнаяСеть.КодЛокальнойСети,
        СетевоеИмяПорт = vwОборудование.СетевоеИмя + '_' + CONVERT(varchar,vwЛокальнаяСеть.Порт),
        ЛокальнаяСетьКодСотрудника = Сотрудники.КодСотрудника,
        ЛокальнаяСетьСотрудник = CASE WHEN @lang <> 'ru' THEN Сотрудники.Employee ELSE Сотрудники.Сотрудник END,
        ЛокальнаяСетьПодключено = vwЛокальнаяСеть.Подключено
FROM	#T X INNER JOIN 
	    vwЛокальнаяСеть ON X.КодРозетки = vwЛокальнаяСеть.КодРозетки INNER JOIN 
	    vwОборудование ON vwЛокальнаяСеть.КодОборудования = vwОборудование.КодОборудования LEFT JOIN
	    Сотрудники ON vwЛокальнаяСеть.КодСотрудника = Сотрудники.КодСотрудника  

UPDATE #T SET Подключено = '' WHERE Подключено IS NULL
UPDATE #T SET ПодключеноТелефонныйНомер = 0 WHERE ПодключеноТелефонныйНомер IS NULL
UPDATE #T SET ПодключеноЛокальнаяСеть = 0 WHERE ПодключеноЛокальнаяСеть IS NULL

UPDATE	X 
SET	    ИзменилФИО = CASE WHEN @lang <> 'ru' THEN Employee ELSE Сотрудник END 
FROM	#T X INNER JOIN
	    Сотрудники ON X.Изменил = Сотрудники.КодСотрудника

SELECT * FROM #T ORDER BY КодРозетки

DROP TABLE #T
";


        /// <summary>
        ///     Строка запроса: IP-телефоны пула
        /// </summary>
        public const string SELECT_РозеткаВРасположении = @"
        SELECT

        CASE WHEN vwТелефонныеНомера.КодРозетки IS NULL THEN 0 ELSE 1 END ПодключеноТелефонныйНомер,
        vwТелефонныеНомера.ПолныйНомер ПолныйНомер,
        vwТелефонныеНомера.КодСотрудника ТелефонныеНомераКодСотрудника,
        СотрудникиТелефонныеНомера.Сотрудник ТелефонныеНомераСотрудник,
        vwТелефонныеНомера.Подключено ТелефонныеНомераПодключено,
        vwТелефонныеНомера.КодТелефонногоНомера КодТелефонногоНомера,

        vwОборудование.СетевоеИмя + '_' + CONVERT(varchar,vwЛокальнаяСеть.Порт) +  
		ISNULL(' '  + СотрудникиЛокальнаяСеть.Сотрудник,'') + 
		ISNULL(' (' + NULLIF(vwЛокальнаяСеть.Подключено,'') + ')','') Подключено,  
	    CASE WHEN vwЛокальнаяСеть.КодРозетки IS NULL THEN 0 ELSE 1 END ПодключеноЛокальнаяСеть,
        vwОборудование.КодОборудования КодОборудования,
        vwЛокальнаяСеть.КодЛокальнойСети КодЛокальнойСети,
        vwОборудование.СетевоеИмя + '_' + CONVERT(varchar,vwЛокальнаяСеть.Порт) СетевоеИмяПорт,
        СотрудникиЛокальнаяСеть.КодСотрудника ЛокальнаяСетьКодСотрудника,
        СотрудникиЛокальнаяСеть.Сотрудник ЛокальнаяСетьСотрудник,
        vwЛокальнаяСеть.Подключено ЛокальнаяСетьПодключено
        
        FROM vwРозетки 

        LEFT JOIN 
	    vwТелефонныеНомера ON vwРозетки.КодРозетки = vwТелефонныеНомера.КодРозетки LEFT JOIN
	    Сотрудники СотрудникиТелефонныеНомера ON vwТелефонныеНомера.КодСотрудника = СотрудникиТелефонныеНомера.КодСотрудника

        LEFT JOIN 
	    vwЛокальнаяСеть ON vwРозетки.КодРозетки = vwЛокальнаяСеть.КодРозетки LEFT JOIN 
	    vwОборудование ON vwЛокальнаяСеть.КодОборудования = vwОборудование.КодОборудования LEFT JOIN
	    Сотрудники СотрудникиЛокальнаяСеть ON vwЛокальнаяСеть.КодСотрудника = СотрудникиЛокальнаяСеть.КодСотрудника  

        WHERE vwРозетки.КодРозетки = @КодРозетки
";

        /// <summary>
        ///     Строка запроса: Модели IP-Телефонов
        /// </summary>
        public const string SELECT_МоделиIPТелефонов = @"
SELECT  DISTINCT МоделиОборудования.КодМоделиОборудования, МоделиОборудования.МодельОборудования  
FROM    МоделиОборудования INNER JOIN
        ТипыОборудования ON МоделиОборудования.КодТипаОборудования = ТипыОборудования.КодТипаОборудования
WHERE   ТипыОборудования.ЕстьТелефонныйНомер = 200 AND ТипыОборудования.ЕстьMACадрес > 0";

        /// <summary>
        ///     Строка запроса: Типы атрибутов телефонов уникальный список для замены
        /// </summary>
        public const string SELECT_ТипыАтрибутовТелефоновУникальные =
            @"
--уникальный список аттрибутов
SET NOCOUNT ON
DECLARE @ТипыАтрибутовТелефонов TABLE (ТипАтрибутаТелефона varchar(50) PRIMARY KEY, Описание varchar(1000))
DECLARE @Разобрать TABLE (Код int IDENTITY(1,1) ,ТипАтрибутаТелефона varchar(50), Описание varchar(1000))

INSERT @ТипыАтрибутовТелефонов SELECT ТипАтрибутаТелефона, Описание FROM ТипыАтрибутовТелефонов WHERE ТипАтрибутаТелефона NOT LIKE '%[0-9]'
INSERT @Разобрать SELECT ТипАтрибутаТелефона, Описание FROM ТипыАтрибутовТелефонов WHERE ТипАтрибутаТелефона LIKE '%[0-9]'

DECLARE @Код int = 0, @ТипАтрибутаТелефона varchar(50), @Описание varchar(1000)

WHILE EXISTS(SELECT * FROM @Разобрать WHERE Код > @Код)
BEGIN
	SELECT TOP 1 @Код = Код, @ТипАтрибутаТелефона = ТипАтрибутаТелефона, @Описание = Описание FROM @Разобрать WHERE Код > @Код ORDER BY Код
	
	WHILE LEN(@ТипАтрибутаТелефона) > 0
	BEGIN
		IF RIGHT(@ТипАтрибутаТелефона, 1) LIKE '[0-9]'			
			SET @ТипАтрибутаТелефона = LEFT(@ТипАтрибутаТелефона, LEN(@ТипАтрибутаТелефона)-1)
		ELSE
			BREAK
	END

	WHILE LEN(@Описание) > 0
	BEGIN
		IF RIGHT(@Описание, 1) LIKE '[0-9]'			
			SET @Описание = LEFT(@Описание, LEN(@Описание)-1)
		ELSE
			BREAK
	END
	
	IF LEN(@ТипАтрибутаТелефона)=0
		SELECT TOP 1 @ТипАтрибутаТелефона = ТипАтрибутаТелефона FROM @Разобрать WHERE Код = @Код

	IF LEN(@Описание)=0
		SELECT TOP 1 @Описание = Описание FROM @Разобрать WHERE Код = @Код

	IF NOT EXISTS(SELECT * FROM @ТипыАтрибутовТелефонов  WHERE ТипАтрибутаТелефона = @ТипАтрибутаТелефона)
		INSERT @ТипыАтрибутовТелефонов VALUES(@ТипАтрибутаТелефона, @Описание)	
END

SELECT * FROM @ТипыАтрибутовТелефонов ORDER BY ТипАтрибутаТелефона

";

        /// <summary>
        ///     Строка запроса: Типы атрибутов телефонов
        /// </summary>
        public const string SELECT_ТипыАтрибутовТелефонов =
            "SELECT ТипАтрибутаТелефона, ИсточникЗначений, Описание FROM ТипыАтрибутовТелефонов";

        /// <summary>
        ///     Строка запроса: Типы атрибутов телефонов по ID
        /// </summary>
        public const string SELECT_ТипыАтрибутовТелефонов_ID =
            SELECT_ТипыАтрибутовТелефонов + " WHERE ТипАтрибутаТелефона = @ТипАтрибутаТелефона";

        /// <summary>
        ///     Строка запроса: Вставка атрибута шаблона IP-телефона
        /// </summary>
        public const string INSERT_ШаблоныIPТелефоновАтрибуты = @"
INSERT  vwШаблоныIPТелефоновАтрибуты 
(КодШаблонаIPТелефонов, Группа, Атрибут, НазваниеВШаблоне, Описание, НомерПрофиля, НомерКнопки, ДоступноПользователю, ЗначениеПоУмолчанию, ВычисляемоеЗначение) VALUES 
(@КодШаблонаIPТелефонов, @Группа, @Атрибут, @НазваниеВШаблоне, @Описание, @НомерПрофиля, @НомерКнопки, @ДоступноПользователю, @ЗначениеПоУмолчанию, @ВычисляемоеЗначение)
SELECT  SCOPE_IDENTITY() КодАтрибута;";

        /// <summary>
        ///     Строка запроса: Обновление атрибута шаблона IP-телефона
        /// </summary>
        public const string UPDATE_ШаблоныIPТелефоновАтрибуты = @"
UPDATE  vwШаблоныIPТелефоновАтрибуты 
SET     КодШаблонаIPТелефонов = @КодШаблонаIPТелефонов, Группа = @Группа, Атрибут = @Атрибут, 
        НазваниеВШаблоне = @НазваниеВШаблоне, Описание = @Описание, НомерПрофиля = @НомерПрофиля, 
        НомерКнопки = @НомерКнопки, ДоступноПользователю = @ДоступноПользователю, 
        ЗначениеПоУмолчанию = @ЗначениеПоУмолчанию, ВычисляемоеЗначение = @ВычисляемоеЗначение
WHERE   КодАтрибута = @КодАтрибута";

        /// <summary>
        ///     Строка запроса: Отключение атрибута шаблона IP-телефона для пользователей
        /// </summary>
        public const string UPDATE_ШаблоныIPТелефоновАтрибуты_ОтключитьДляПользователей = @"
UPDATE  vwШаблоныIPТелефоновАтрибуты 
SET     ДоступноПользователю = 0
WHERE   КодАтрибута = @КодАтрибута";

        /// <summary>
        ///     Строка запроса: Удаление атрибута шаблона IP-телефона
        /// </summary>
        public const string DELETE_ШаблоныIPТелефоновАтрибуты = @"
            DELETE FROM vwШаблоныIPТелефоновАтрибуты WHERE КодАтрибута = @КодАтрибута";

        /// <summary>
        ///     Строка запроса: Атрибут телефонов пула
        /// </summary>
        public const string SELECT_АтрибутыТелефоновПула_ID = @"
SELECT  Значение, Изменил, Изменено
FROM    vwАтрибутыТелефоновПула
WHERE   КодПулаТелефонов = @КодПулаТелефонов AND ТипАтрибутаТелефона = @ТипАтрибутаТелефона";

        /// <summary>
        ///     Строка запроса: Получение количества атрибутов телефона пула
        /// </summary>
        public const string SELECT_АтрибутыТелефоновПула_Количество = @"
SELECT  COUNT(*) 
FROM    vwАтрибутыТелефоновПула
WHERE   ТипАтрибутаТелефона = ISNULL(@ТипАтрибутаТелефона, ТипАтрибутаТелефона) AND КодПулаТелефонов = ISNULL(@КодПулаТелефонов, КодПулаТелефонов)";

        /// <summary>
        ///     Строка запроса: Вставка атрибута шаблона для пула IP-телефона
        /// </summary>
        public const string INSERT_АтрибутыТелефоновПула = @"
INSERT INTO vwАтрибутыТелефоновПула (КодПулаТелефонов, ТипАтрибутаТелефона, Значение) 
VALUES  (@КодПулаТелефонов, @ТипАтрибутаТелефона, @Значение)";

        /// <summary>
        ///     Строка запроса: Обновление атрибута шаблона для пула IP-телефона
        /// </summary>
        public const string UPDATE_АтрибутыТелефоновПула = @"
UPDATE  vwАтрибутыТелефоновПула SET Значение = @Значение
WHERE   ТипАтрибутаТелефона = @ТипАтрибутаТелефона AND КодПулаТелефонов = @КодПулаТелефонов";


        /// <summary>
        ///     Строка запроса: Удаление атрибута шаблона для пула IP-телефона
        /// </summary>
        public const string DELETE_АтрибутыТелефоновПула = @"
DELETE  FROM vwАтрибутыТелефоновПула 
WHERE   КодПулаТелефонов = @КодПулаТелефонов AND ТипАтрибутаТелефона = @ТипАтрибутаТелефона";

        /// <summary>
        ///     Строка запроса: Удаление настроек атрибута пулов для шаблона IP-телефонов
        /// </summary>
        public const string DELETE_ШаблоныIPТелефоновАтрибутыПулов_ПоАтрибуту = @"
            DELETE FROM vwШаблоныIPТелефоновАтрибутыПулов WHERE КодАтрибута = @КодАтрибута";

        /// <summary>
        ///     Строка запроса: Получение количества атрибутов телефона пользователя
        /// </summary>
        public const string SELECT_АтрибутыТелефоновПользователя_Количество = @"
SELECT  COUNT(*) 
FROM    АтрибутыТелефоновПользователя
WHERE   ТипАтрибутаТелефона = ISNULL(@ТипАтрибутаТелефона, ТипАтрибутаТелефона) AND КодОборудования = ISNULL(@КодОборудования, КодОборудования)";

        /// <summary>
        ///     Строка запроса: Атрибут телефона пользователя
        /// </summary>
        public const string SELECT_АтрибутыТелефоновПользователя_ID = @"
SELECT  Значение, Изменил, Изменено
FROM    АтрибутыТелефоновПользователя
WHERE   ТипАтрибутаТелефона = @ТипАтрибутаТелефона AND КодОборудования = @КодОборудования";

        /// <summary>
        ///     Строка запроса: Вставка атрибута телефона пользователя
        /// </summary>
        public const string INSERT_АтрибутыТелефоновПользователя = @"
INSERT  INTO vwАтрибутыТелефоновПользователя (КодОборудования, ТипАтрибутаТелефона, Значение) 
VALUES  (@КодОборудования, @ТипАтрибутаТелефона, @Значение)";

        /// <summary>
        ///     Строка запроса: Обновление атрибута телефона пользователя
        /// </summary>
        public const string UPDATE_АтрибутыТелефоновПользователя = @"
UPDATE  vwАтрибутыТелефоновПользователя SET Значение = @Значение
WHERE   ТипАтрибутаТелефона = @ТипАтрибутаТелефона AND КодОборудования = @КодОборудования";

        /// <summary>
        ///     Строка запроса: Удаление пользовательских настроек атрибута
        /// </summary>
        public const string DELETE_ШаблоныIPТелефоновАтрибутыПользователя = @"
            DELETE FROM vwШаблоныIPТелефоновАтрибутыПользователя WHERE КодАтрибута = @КодАтрибута";

        /// <summary>
        ///     Строка запроса: Удаление атрибута телефонов пула
        /// </summary>
        public const string DELETE_АтрибутыТелефоновПользователя_ID = @"
            DELETE FROM vwАтрибутыТелефоновПользователя WHERE КодОборудования = @КодОборудования AND ТипАтрибутаТелефона = @ТипАтрибутаТелефона";

        /// <summary>
        ///     Строка запроса: Пулы IP-Телефонов
        /// </summary>
        public const string SELECT_ПулыТелефонов = "SELECT КодПулаТелефонов, ПулТелефона FROM vwПулыТелефонов";

        /// <summary>
        ///     Строка запроса: Пул IP-Телефонов по ID
        /// </summary>
        public const string SELECT_ID_ПулТелефона =
            SELECT_ПулыТелефонов + " WHERE КодПулаТелефонов = @id";

        /// <summary>
        ///     Строка запроса: Добавление пула IP-Телефонов
        /// </summary>
        public const string INSERT_ПулыТелефонов = @"
            INSERT vwПулыТелефонов (ПулТелефона) VALUES (@ПулIPТелефона)
            SELECT SCOPE_IDENTITY()";

        /// <summary>
        ///     Строка запроса: Обновление пула IP-Телефонов
        /// </summary>
        public const string UPDATE_ПулыТелефонов =
            "UPDATE vwПулыТелефонов SET ПулТелефона = @ПулТелефона WHERE КодПулаТелефонов = @КодПулаТелефонов";

        /// <summary>
        ///     Строка запроса: Удаление пула IP-Телефона
        /// </summary>
        public const string DELETE_ПулыТелефонов =
            "DELETE FROM vwПулыТелефонов WHERE КодПулаТелефонов = @КодПулаТелефонов";

        /// <summary>
        ///     Строка запроса: Установить пул IP-Телефона у оборудования
        /// </summary>
        public const string UPDATE_ОборудованиеПулТелефона =
            "UPDATE vwОборудование SET КодПулаТелефонов = @КодПулаТелефонов WHERE КодОборудования = @КодОборудования";

        /// <summary>
        ///     Строка запроса: Код Расположения По Коду Оборудования
        /// </summary>
        public const string SELECT_КодРасположенияПоКодуОборудования =
            "SELECT TOP 1 КодРасположения FROM ОборудованиеРасположение WHERE КодОборудования = @КодОборудования ORDER BY От DESC";

        #endregion

        #region Сертификаты

        /// <summary>
        ///     Строка запроса: Получение сертификатов
        /// </summary>
        public const string SELECT_Сертификаты = @"
SELECT 
       c.КодСертификата
      ,c.НазначениеСертификата
      ,c.ОтпечатокСертификата
      ,c.КодЛицаВладельцаСертификата
      --,c.ВладелецСертификата
      ,own.Сотрудник ВладелецСертификата
      ,c.КодЛицаКомпании
      --,c.Компания
      ,comp.Кличка Компания
      ,c.КодДокументаДоговора
      ,' ' AS ДокументДоговора
      ,c.КемВыдан
      ,c.Субъект
      ,c.ДопИмяСубъекта
      ,c.ДействителенС
      ,c.ДействителенДо
      ,c.Закрыт
      ,c.Изменил
      ,s.ФИО ИзменилФИО
      ,c.Изменено
      ,c.КодПеревыпущенногоСертификата
      ,c.КодОтветственногоСотрудника
      ,req.Сотрудник ОтветственныйСотрудник
      ,CASE WHEN c.Сертификат IS NULL THEN 0 ELSE 1 END AS ЕстьФайлСертификата
      ,CASE WHEN c.ЗакрытыйКлюч IS NULL THEN CAST(0 AS TINYINT) ELSE CAST(1 AS TINYINT) END AS ЕстьЗакрытыйКлюч
      ,CASE WHEN EXISTS(SELECT * FROM vwСертификатыРасположениеКлючей rk WHERE rk.КодСертификата = c.КодСертификата) THEN CAST(1 AS TINYINT) ELSE CAST(0 AS TINYINT) END ЕстьРасположенияКлючей
      ,CASE WHEN Закрыт = 0 AND ДействителенС <= CAST(GETDATE() AS DATE) AND ДействителенДо >= CAST(GETDATE() AS DATE) THEN 1 ELSE 0 END AS Действует
      ,CASE 
        WHEN Закрыт = 0 AND ISNULL(КодПеревыпущенногоСертификата,0) = 0 AND ДействителенС < GETDATE() AND (DATEDIFF(day, GETDATE(), ДействителенДо) BETWEEN 0 AND 30) THEN 'v4Recommended'
        WHEN Закрыт = 0 AND ISNULL(КодПеревыпущенногоСертификата,0) = 0 AND ДействителенДо < GETDATE() THEN 'v4Error'
        WHEN Закрыт = 1 OR ISNULL(КодПеревыпущенногоСертификата,0) <> 0 THEN 'v4Information'
      END RowColor
FROM vwСертификаты c
LEFT JOIN Сотрудники s ON s.КодСотрудника = c.Изменил
LEFT JOIN Сотрудники own ON own.КодСотрудника = c.КодЛицаВладельцаСертификата
LEFT JOIN Сотрудники req ON req.КодСотрудника = c.КодОтветственногоСотрудника
LEFT JOIN ЛицаЗаказчики comp ON comp.КодЛица = c.КодЛицаКомпании
WHERE @ДействителенДо IS NULL OR (ДействителенДо > GETDATE() AND ДействителенДо <= @ДействителенДо)
ORDER BY c.ДействителенДо DESC
";

        /// <summary>
        ///     Удалить сертификат
        /// </summary>
        public const string DELETE_ID_Сертификат = @"
DELETE FROM Инвентаризация.dbo.vwСертификаты where КодСертификата = @id
";

        /// <summary>
        ///     Строка запроса: Получение сертификатов
        /// </summary>
        public const string SELECT_Сертификат = @"
SELECT c.Сертификат
FROM vwСертификаты c
WHERE КодСертификата = @id
";

        /// <summary>
        ///     Строка запроса: Получить сертификат по идентификатору
        /// </summary>
        public const string SELECT_СертификатПоID = @"
DECLARE @КодСотрудника int
SELECT @КодСотрудника = КодСотрудника FROM Сотрудники (nolock) WHERE SID = SUSER_SID()
SELECT 
       c.КодСертификата
      ,c.НазначениеСертификата
      ,c.ОтпечатокСертификата
      ,c.КодЛицаВладельцаСертификата
      --,c.ВладелецСертификата
      ,own.Сотрудник ВладелецСертификата
      ,c.КодЛицаКомпании
      --,c.Компания
      ,comp.Кличка Компания
      ,c.КодДокументаДоговора
      ,c.КемВыдан
      ,c.Субъект
      ,c.ДопИмяСубъекта
      ,c.ДействителенС
      ,c.ДействителенДо
      ,c.Закрыт
      ,c.Изменил
      ,s.ФИО ИзменилФИО
      ,c.Изменено
      ,c.КодПеревыпущенногоСертификата
      ,c.КодОтветственногоСотрудника
      ,CASE WHEN c.Сертификат IS NULL THEN 0 ELSE 1 END AS ЕстьФайлСертификата
      ,CASE WHEN c.ЗакрытыйКлюч IS NULL THEN 0 ELSE 1 END AS ЕстьЗакрытыйКлюч
      ,ЗакрытыйКлюч 
      ,CASE WHEN c.КодОтветственногоСотрудника = @КодСотрудника OR c.Изменил = @КодСотрудника THEN 1 ELSE 0 END ДоступКЗакрытомуКлючу
FROM vwСертификаты c
LEFT JOIN Сотрудники s ON s.КодСотрудника = c.Изменил
LEFT JOIN Сотрудники own ON own.КодСотрудника = c.КодЛицаВладельцаСертификата
LEFT JOIN ЛицаЗаказчики comp ON comp.КодЛица = c.КодЛицаКомпании
WHERE КодСертификата = @id";


        /// <summary>
        ///     Строка запроса: Получить всех родителей сертификата по идентификатору
        /// </summary>
        public const string SELECT_FullPatchСертификат = @"
SELECT 
        CASE 
            WHEN comp.Кличка IS NULL AND ISNULL(c.Компания,'') = '' AND ISNULL(c.ВладелецСертификата,'') = '' THEN НазначенияСертификата
        ELSE
            CASE WHEN comp.Кличка IS NULL THEN ISNULL(c.Компания,'') ELSE comp.Кличка END  + ' - ' +
            CASE WHEN own.Кличка IS NULL THEN ISNULL(c.ВладелецСертификата,'') ELSE own.Кличка END
        END RootName
FROM vwСертификаты c
LEFT JOIN ЛицаЗаказчики own ON own.КодЛица = c.КодЛицаВладельцаСертификата
LEFT JOIN ЛицаЗаказчики comp ON comp.КодЛица = c.КодЛицаКомпании
WHERE L <= @LeftId AND R >= @RightId
ORDER BY L
";

        /// <summary>
        ///     Строка запроса: Получить расположения ключей по идентификатору
        /// </summary>
        public const string SELECT_ID_СертификатРасположенияКлюча = @"
SELECT * FROM vwСертификатыРасположениеКлючей WHERE КодСертификатаРасположенияКлюча = @id";

        /// <summary>
        ///     Строка запроса: Получить расположения ключей по сертификату
        /// </summary>
        public const string SELECT_ID_РасположенияКлючей = @"
SELECT * FROM vwСертификатыРасположениеКлючей WHERE КодСертификата = @id";

        /// <summary>
        ///     Обновление сертификата
        /// </summary>
        public const string Update_Сертификаты = @"
UPDATE vwСертификаты SET 
    НазначениеСертификата = @НазначениеСертификата,
    ОтпечатокСертификата = @ОтпечатокСертификата, 
    КодЛицаВладельцаСертификата = @КодЛицаВладельцаСертификата, 
    КодЛицаКомпании = @КодЛицаКомпании, 
    КодДокументаДоговора = @КодДокументаДоговора, 
    КемВыдан = @КемВыдан, 
    Субъект = @Субъект, 
    ДопИмяСубъекта = @ДопИмяСубъекта, 
    ДействителенС = @ДействителенС, 
    ДействителенДо = @ДействителенДо, 
    Закрыт = @Закрыт,
    КодПеревыпущенногоСертификата = @КодПеревыпущенногоСертификата,
    КодОтветственногоСотрудника = @КодОтветственногоСотрудника
WHERE КодСертификата = @КодСертификата
SELECT @КодСертификата;
";

        /// <summary>
        ///     Загрузка файла сертификата
        /// </summary>
        public const string Update_СертификатыFile = @"
UPDATE vwСертификаты SET 
    Сертификат = @Сертификат
WHERE КодСертификата = @КодСертификата
";

        /// <summary>
        ///     Загрузка файла сертификата
        /// </summary>
        public const string Update_ЗакрытыйКлючСертификата = @"
UPDATE vwСертификаты SET 
    ЗакрытыйКлюч = @ЗакрытыйКлюч
WHERE КодСертификата = @КодСертификата
";



        /// <summary>
        ///     Добавление сертификата
        /// </summary>
        public const string Insert_Сертификаты = @"
INSERT INTO vwСертификаты(
    ОтпечатокСертификата, 
    КодЛицаВладельцаСертификата, 
    КодЛицаКомпании, 
    КодДокументаДоговора, 
    КемВыдан, 
    Субъект,
    ДопИмяСубъекта,
    НазначениеСертификата,
    ДействителенС, 
    ДействителенДо, 
    Закрыт,
    КодПеревыпущенногоСертификата,
    КодОтветственногоСотрудника
)
VALUES(
    @ОтпечатокСертификата, 
    @КодЛицаВладельцаСертификата, 
    @КодЛицаКомпании, 
    @КодДокументаДоговора, 
    @КемВыдан, 
    @Субъект,
    @ДопИмяСубъекта,
    @НазначениеСертификата,
    @ДействителенС, 
    @ДействителенДо, 
    @Закрыт,
    @КодПеревыпущенногоСертификата,
    @КодОтветственногоСотрудника
);
SELECT @@IDENTITY;
";

        /// <summary>
        ///     Перевыпуск сертификата
        /// </summary>
        public const string UPDATE_ПеревыпускСертификата = @"
UPDATE vwСертификаты SET КодПеревыпущенногоСертификата = @КодПеревыпущенногоСертификата
WHERE КодСертификата = @КодСертификата;
";


        /// <summary>
        ///     Строка запроса: Получить расположения ключей по сертификату
        /// </summary>
        public const string SELECT_РасположенияКлючейПоСертификату = @"
SELECT 
       certkey.КодСертификатаРасположенияКлюча
      ,CASE WHEN certkey.ТипРасположенияКлюча = '0' THEN 'Реестр' WHEN certkey.ТипРасположенияКлюча = '1' THEN 'Токен' WHEN certkey.ТипРасположенияКлюча = '2' THEN 'Сетевое хранилище' END ТипРасположенияКлюча
      ,certkey.КодОборудования
      ,МоделиОборудования.МодельОборудования + ' SN ' + vwОборудование.SN  + CASE WHEN vwОборудование.СетевоеИмя = '' THEN '' ELSE ' (' + vwОборудование.СетевоеИмя + ')' END Оборудование
      ,certkey.СетевыеИмена
      ,certkey.КодСотрудникаПользователя
      ,Сотрудники2.Сотрудник СотрудникПользователя
      ,ИмяКонтейнераКриптоПро
      ,certkey.ПутьРасположенияКлюча
      ,CONVERT(tinyint,certkey.Выполнено) Выполнено
      ,certkey.Изменил
      ,Сотрудники.Сотрудник ИзменилФИО
      ,certkey.Изменено
FROM vwСертификатыРасположениеКлючей certkey
LEFT JOIN vwОборудование ON vwОборудование.КодОборудования = certkey.КодОборудования
LEFT JOIN МоделиОборудования ON vwОборудование.КодМоделиОборудования = МоделиОборудования.КодМоделиОборудования
LEFT JOIN Сотрудники ON Сотрудники.КодСотрудника = certkey.Изменил
LEFT JOIN Сотрудники Сотрудники2 ON Сотрудники2.КодСотрудника = certkey.КодСотрудникаПользователя
WHERE КодСертификата = @КодСертификата";

        /// <summary>
        ///     Добавить расположение и получить его идентификатор
        /// </summary>
        public const string INSERT_РасположенияКлючей = @"
INSERT Инвентаризация.dbo.vwСертификатыРасположениеКлючей (КодСертификата,КодОборудования,СетевыеИмена,КодСотрудникаПользователя,ИмяКонтейнераКриптоПро,ТипРасположенияКлюча,ПутьРасположенияКлюча,Выполнено)
VALUES (@КодСертификата,@КодОборудования,@СетевыеИмена,@КодСотрудникаПользователя,@ИмяКонтейнераКриптоПро,@ТипРасположенияКлюча,@ПутьРасположенияКлюча,@Выполнено)
SELECT @@IDENTITY";

        /// <summary>
        ///     Обновить расположение ключа
        /// </summary>
        public const string UPDATE_РасположенияКлючей = @"
UPDATE Инвентаризация.dbo.vwСертификатыРасположениеКлючей SET 
КодСертификата = @КодСертификата, 
КодОборудования = @КодОборудования,
СетевыеИмена = @СетевыеИмена, 
КодСотрудникаПользователя = @КодСотрудникаПользователя, 
ИмяКонтейнераКриптоПро = @ИмяКонтейнераКриптоПро, 
ТипРасположенияКлюча = @ТипРасположенияКлюча, 
ПутьРасположенияКлюча = @ПутьРасположенияКлюча,
Выполнено = @Выполнено
WHERE КодСертификатаРасположенияКлюча = @КодСертификатаРасположенияКлюча
";

        /// <summary>
        ///     Удалить расположение ключа
        /// </summary>
        public const string DELETE_ID_РасположенияКлючей = @"
DELETE FROM Инвентаризация.dbo.vwСертификатыРасположениеКлючей where КодСертификатаРасположенияКлюча = @id
";

        /// <summary>
        ///     Изменение значения Выполнено для расположения ключа
        /// </summary>
        public const string UPDATE_РасположенияКлючейВыполнено = @"
UPDATE Инвентаризация.dbo.vwСертификатыРасположениеКлючей SET Выполнено=CASE WHEN Выполнено = 1 THEN 0 ELSE 1 END WHERE КодСертификатаРасположенияКлюча=@КодСертификатаРасположенияКлюча
";



        /// <summary>
        ///     Закрытие / Открытие сертификата
        /// </summary>
        public const string UPDATE_Сертификаты_Закрыт = @"
UPDATE Инвентаризация.dbo.vwСертификаты SET Закрыт=@Закрыт WHERE КодСертификата=@КодСертификата
";

        /// <summary>
        ///     Строка запроса: Проверка наличия расположения
        /// </summary>
        public const string SELECT_Сертификаты_ADD_EXISTS = @"
IF EXISTS(SELECT  * 
FROM    Инвентаризация.dbo.vwСертификаты 
WHERE   ОтпечатокСертификата = @ОтпечатокСертификата)
    SELECT 1
ELSE
    SELECT 0";

        /// <summary>
        ///     Строка запроса: Проверка наличия расположения
        /// </summary>
        public const string SELECT_Сертификаты_UPDATE_EXISTS = @"
IF EXISTS(  SELECT * 
            FROM    Инвентаризация.dbo.vwСертификаты 
            WHERE   ОтпечатокСертификата = @ОтпечатокСертификата AND  КодСертификата <> @КодСертификата)
    SELECT 1
ELSE
    SELECT 0";

        /// <summary>
        ///     Получение информации о сертификатах для дерева
        /// </summary>
        public static string SELECT_СертификатыДанныеДляДерева = @"
SELECT  c.КодСертификата Id, c.R-L ЕстьДети, 
        CASE 
            WHEN comp.Кличка IS NULL AND ISNULL(c.Компания,'') = '' AND ISNULL(c.ВладелецСертификата,'') = '' THEN НазначенияСертификата
        ELSE
            CASE WHEN comp.Кличка IS NULL THEN ISNULL(c.Компания,'') ELSE comp.Кличка END  + ' - ' +
            CASE WHEN own.Кличка IS NULL THEN ISNULL(c.ВладелецСертификата,'') ELSE own.Кличка END
        END text,
        ISNULL(c.Parent,0) ParentId, '' Фильтр,
        ОтпечатокСертификата, КодЛицаВладельцаСертификата, КодЛицаКомпании, Компания, КодДокументаДоговора, Издатель, НазначенияСертификата,
        ДействителенС, ДействителенДо,
       c.[Изменил], s.Сотрудник, c.[Изменено], c.Закрыт status
FROM    vwСертификаты c
LEFT JOIN Сотрудники s ON s.КодСотрудника = c.Изменил
LEFT JOIN ЛицаЗаказчики own ON own.КодЛица = c.КодЛицаВладельцаСертификата
LEFT JOIN ЛицаЗаказчики comp ON comp.КодЛица = c.КодЛицаКомпании
WHERE   (( (@Потомки = 1 AND ( (@Код = 0 AND c.Parent IS NULL) OR (@Код <> 0 AND c.Parent = @Код) ))
        OR (@Потомки = 0 AND c.КодСертификата = @Код))
        OR (@Потомки = 2 AND (c.КодСертификата IN ({0}) OR c.Parent IN ({0}))))
        AND (c.Закрыт=0 OR @Закрыт = 1)
ORDER BY c.L
";

        /// <summary>
        ///     Строка запроса: Получение расположений
        /// </summary>
        public const string SELECT_Сертификаты_Фильтр = @"
SELECT T0.КодСертификата id, T0.НазначенияСертификата 'Назначения сертификата', T0.ВладелецСертификата 'Владелец сертификата', T0.Компания, T0.ОтпечатокСертификата 'Отпечаток сертификата' 
FROM (
SELECT T1.*, T1.КодСертификата id, s.Сотрудник FROM vwСертификаты T1 
LEFT JOIN Сотрудники s ON s.КодСотрудника = T1.Изменил
@ADDTABLE ) T0
@ADDWHERE";

        /// <summary>
        ///     Строка запроса: Фильтрация сертификатов
        /// </summary>
        public static string SELECT_СертификатыДанныеДляДерева_Фильтр = @"
        ";

        /// <summary>
        ///     Строка запроса: Фильтрация сертификатов
        /// </summary>
        public static string SELECT_СертификатыДанныеДляДерева_ФильтрExt = @"
DECLARE @МаксимальноеКоличествоНайденных int = 100
SET NOCOUNT ON
               
IF OBJECT_ID('tempdb.#Сертификаты') IS NOT NULL DROP TABLE #Сертификаты
--DECLARE @КоличествоНайденных int
CREATE TABLE #Сертификаты(
        TempID int IDENTITY(1,1),
        [КодСертификата] [int],
        ВладелецСертификата [varchar](300),       
        [Parent] [int],
        [L] [int],
        [R] [int],
        [Изменил] [int],
        [Изменено] [datetime], 
        BitMask tinyint
)

CREATE UNIQUE CLUSTERED INDEX PK_TempID ON #Сертификаты (TempID)

INSERT #Сертификаты
SELECT DISTINCT Id, text, Parent, L, R, Изменил, Изменено, BitMask FROM (
SELECT  
        T1.[КодСертификата],
        T1.[КодСертификата] id,
        T1.ВладелецСертификата,      
        T1.ВладелецСертификата text,      
        T1.[Parent],
        T1.[L],
        T1.[R],
        T1.[Изменил],
        empl.[Сотрудник],
        T1.[Изменено], 
        1 BitMask,
        T1.ОтпечатокСертификата, 
        T1.Компания, 
        T1.Издатель,
        T1.ДействителенС,
        T1.ДействителенДо,
        T1.Закрыт,
        T1.Закрыт Status
        @ADDFIELD
FROM    vwСертификаты AS T1
LEFT JOIN Сотрудники empl ON empl.КодСотрудника =  T1.Изменил
@ADDTABLE
WHERE ('{0}' = '-1' OR EXISTS (SELECT 1 FROM vwСертификаты AS T2 WHERE T2.КодСертификата IN ({0}) AND T1.L >= T2.L AND T1.R <= T2.R))  
    AND  ((Закрыт=0 AND NOT EXISTS (SELECT * FROM vwСертификаты Parent WHERE T1.L > Parent.L AND T1.R < Parent.R AND Parent.Закрыт=1 )) OR @Закрыт = 1)
) T0 @WHERE ORDER BY L
 
SET @КоличествоНайденных = @@ROWCOUNT
DELETE #Сертификаты WHERE TempID > @МаксимальноеКоличествоНайденных
 
UPDATE  Parent
SET     BitMask = BitMask ^ 2
FROM    #Сертификаты Parent
WHERE   EXISTS(SELECT * FROM #Сертификаты Child WHERE Parent.L < Child.L AND Parent.R > Child.R)
 
INSERT  #Сертификаты
SELECT  [КодСертификата],
        ВладелецСертификата,      
        [Parent],
        [L],
        [R],
        [Изменил],
        [Изменено], 
        2 BitMask
FROM    vwСертификаты Parent 
WHERE   EXISTS( SELECT * FROM #Сертификаты Child 
                WHERE Parent.L <= Child.L AND Parent.R>=Child.R)                                        
        AND NOT EXISTS(SELECT * FROM #Сертификаты X WHERE Parent.КодСертификата = X.КодСертификата) AND (Закрыт=0 OR @Закрыт = 1)
 
UPDATE  #Сертификаты
SET     BitMask = BitMask ^ 4
WHERE   Parent IS NULL
 
INSERT #Сертификаты 
SELECT  [КодСертификата],
        ВладелецСертификата,      
        [Parent],
        [L],
        [R],
        [Изменил],
        [Изменено], 
        4 BitMask
FROM    vwСертификаты 
WHERE   (('{0}' = '-1' AND Parent IS NULL) OR КодСертификата IN ({0})) 
        AND NOT EXISTS(SELECT * FROM #Сертификаты X WHERE vwСертификаты.КодСертификата = X.КодСертификата) AND (Закрыт=0 OR @Закрыт = 1)
        
SELECT #Сертификаты.[КодСертификата] id,
       CASE 
           WHEN comp.Кличка IS NULL AND ISNULL(c.Компания,'') = '' AND ISNULL(c.ВладелецСертификата,'') = '' THEN НазначенияСертификата
       ELSE
           CASE WHEN comp.Кличка IS NULL THEN ISNULL(c.Компания,'') ELSE comp.Кличка END  + ' - ' +
           CASE WHEN own.Кличка IS NULL THEN ISNULL(c.ВладелецСертификата,'') ELSE own.Кличка END
       END text,
       #Сертификаты.[Parent] ParentId,
       #Сертификаты.[L],
       #Сертификаты.[R],
       #Сертификаты.BitMask,
       #Сертификаты.R-#Сертификаты.L ЕстьДети,
       c.ОтпечатокСертификата, 
       c.Компания, 
       c.Издатель,
       c.ДействителенС,
       c.ДействителенДо,
       c.Закрыт,
       #Сертификаты.[Изменил],
       s.Сотрудник,
       #Сертификаты.[Изменено],
       c.Закрыт Status
FROM #Сертификаты
INNER JOIN vwСертификаты c ON #Сертификаты.КодСертификата = c.КодСертификата
LEFT JOIN Сотрудники s ON s.КодСотрудника = c.Изменил
LEFT JOIN ЛицаЗаказчики own ON own.КодЛица = c.КодЛицаВладельцаСертификата
LEFT JOIN ЛицаЗаказчики comp ON comp.КодЛица = c.КодЛицаКомпании
ORDER BY c.L
DROP TABLE #Сертификаты
";

        /// <summary>
        ///     Получение информации для дерева
        /// </summary>
        public static string SELECT_СертификатыДанныеДляДерева_State = @"
SET NOCOUNT ON

IF OBJECT_ID('tempdb.#Сертификаты') IS NOT NULL DROP TABLE #Сертификаты
CREATE TABLE #Сертификаты(
        TempID int IDENTITY(1,1),
        [КодСертификата] [int],
        ВладелецСертификата [varchar](300),       
        [Parent] [int],
        [L] [int],
        [R] [int],
        [Изменил] [int],
        [Изменено] [datetime],  
        BitMask tinyint
)

INSERT #Сертификаты
SELECT	Parent.[КодСертификата],
        Parent.ВладелецСертификата,      
        Parent.[Parent],
        Parent.[L],
        Parent.[R],
        Parent.[Изменил],
        Parent.[Изменено], 
        1 BitMask
FROM	vwСертификаты Parent 
WHERE EXISTS(SELECT * FROM vwСертификаты Child 
					WHERE	Child.КодСертификата IN ({0})
						AND Parent.L <=	Child.L AND Parent.R>=Child.R) AND (Parent.Закрыт=0 OR @Закрыт = 1)
      AND NOT EXISTS(SELECT * FROM #Сертификаты X WHERE Parent.КодСертификата = X.КодСертификата)
ORDER BY Parent.L

INSERT #Сертификаты
SELECT	Child.[КодСертификата],
        Child.ВладелецСертификата,      
        Child.[Parent],
        Child.[L],
        Child.[R],
        Child.[Изменил],
        Child.[Изменено], 
        2 BitMask
FROM	vwСертификаты Parent
LEFT JOIN vwСертификаты Child ON Child.Parent = Parent.КодСертификата
WHERE Parent.КодСертификата IN ({0}) AND (Child.Закрыт=0 OR @Закрыт = 1) AND NOT EXISTS(SELECT * FROM #Сертификаты X WHERE Child.КодСертификата = X.КодСертификата)
ORDER BY Parent.L

INSERT #Сертификаты 
SELECT  [КодСертификата],
        ВладелецСертификата,      
        [Parent],
        [L],
        [R],
        [Изменил],
        [Изменено], 
        4 BitMask
FROM    vwСертификаты 
WHERE   Parent IS NULL                                  
        AND NOT EXISTS(SELECT * FROM #Сертификаты X WHERE vwСертификаты.КодСертификата = X.КодСертификата) AND (Закрыт=0 OR @Закрыт = 1)

SELECT #Сертификаты.[КодСертификата] id,
       #Сертификаты.ВладелецСертификата,      
        CASE 
            WHEN comp.Кличка IS NULL AND ISNULL(c.Компания,'') = '' AND ISNULL(c.ВладелецСертификата,'') = '' THEN НазначенияСертификата
        ELSE
            CASE WHEN comp.Кличка IS NULL THEN ISNULL(c.Компания,'') ELSE comp.Кличка END  + ' - ' +
            CASE WHEN own.Кличка IS NULL THEN ISNULL(c.ВладелецСертификата,'') ELSE own.Кличка END
        END text,
       #Сертификаты.[Parent] ParentId,
       #Сертификаты.[L],
       #Сертификаты.[R],
       #Сертификаты.BitMask,
       #Сертификаты.R-#Сертификаты.L ЕстьДети,
       c.ОтпечатокСертификата, 
       c.Компания, 
       c.Издатель,
       c.ДействителенС,
       c.ДействителенДо,
       c.Закрыт,
       #Сертификаты.[Изменил],
       s.Сотрудник,
       #Сертификаты.[Изменено], 
       c.Закрыт Status
FROM #Сертификаты
INNER JOIN vwСертификаты c ON #Сертификаты.КодСертификата = c.КодСертификата
LEFT JOIN Сотрудники s ON s.КодСотрудника = c.Изменил
LEFT JOIN ЛицаЗаказчики own ON own.КодЛица = c.КодЛицаВладельцаСертификата
LEFT JOIN ЛицаЗаказчики comp ON comp.КодЛица = c.КодЛицаКомпании
ORDER BY c.L
DROP TABLE #Сертификаты
";

        #endregion

        #region Ironport SlBl

        /// <summary>
        ///     Строка запроса: Получить списки ограничений по адресу
        /// </summary>
        public const string SELECT_ID_SlBlAddressList = @"
SELECT Address, MAX(SList) SList, MAX(BList) BList
FROM 
(	SELECT Address,  SlBl SList, '' BList FROM vwMailBoxesAddressesSlBl WHERE Address = @id AND Block = 0
	UNION SELECT Address,  '' SList, SlBl BList FROM vwMailBoxesAddressesSlBl WHERE Address = @id AND Block = 1) X
GROUP BY Address 
";

        /// <summary>
        ///Строка запроса: Получить список адресов
        /// </summary>
        public const string SELECT_SlBlAddresses = @"
SELECT * FROM vwMailBoxesAddresses
";

        /// <summary>
        ///Строка запроса: Получить адрес
        /// </summary>
        public const string SELECT_ID_SlBlAddress = @"
SELECT * FROM vwMailBoxesAddresses WHERE Address = @id
";
        /// <summary>
        ///Процедура: SP_MailboxSlBlSynchronize
        /// </summary>
        public const string SP_MailboxSlBlSynchronize = "sp_MailboxSlBlSynchronize";


        /// <summary>
        /// Строка запроса: Проверка корректности сохранения данных
        /// </summary>
        public const string SELECT_SlBlCheckSavedData = @"
--проверка корректности сохранения данных (входные параметры Address varchar(260), @Block tinyint, @FormData nvarchar(max))
DECLARE @SLBL nvarchar(max)
SET NOCOUNT ON
		
IF OBJECT_ID('tempdb..#SavedData') IS NOT NULL	DROP TABLE #SavedData
IF OBJECT_ID('tempdb..#FormData') IS NOT NULL	DROP TABLE #FormData

CREATE TABLE  #SavedData(Address nvarchar(260))
CREATE TABLE  #FormData(Address nvarchar(260))

SET @SLBL = ISNULL((SELECT SLBL FROM vwMailBoxesAddressesSlBl WHERE Address = @Address AND Block = @Block),'')
INSERT #SavedData SELECT word FROM dbo.fn_SplitText(@SLBL)

INSERT #FormData SELECT DISTINCT word FROM dbo.fn_SplitText(@FormData)

SELECT	ISNULL(STUFF((SELECT ', ' + Address FROM #SavedData X WHERE NOT EXISTS(SELECT * FROM #FormData Y WHERE x.Address = Y.Address) ORDER BY Address FOR XML PATH('')),1,2,''),'') НеУдалено,
	ISNULL(STUFF((SELECT ', ' + Address FROM #FormData X WHERE NOT EXISTS(SELECT * FROM #SavedData Y WHERE x.Address = Y.Address) ORDER BY Address FOR XML PATH('')),1,2,''),'') НеСохранено

DROP TABLE #SavedData
DROP TABLE #FormData
";

        #endregion


        #region Звонилка

        /// <summary>
        ///Процедура: SP_ДоступныеТелефоны
        /// </summary>
        public const string SP_ДоступныеТелефоны = "sp_ДоступныеТелефоны";

        /// <summary>
        /// Строка запроса: вызов скалярной функции преобразования международного номера в номер набора
        /// </summary>
        public const string SELECT_НомерМеждународный2НомерНабора = "SELECT dbo.fn_НомерМеждународный2НомерНабора(@НомерМеждународный,@КодТелефоннойСтанции,@КодНомернойЁмкости)";

        #endregion

        //++++++++++++++++++ Справочники ++++++++++++++++++

        #region Лица



        /// <summary>
        ///     Строка запроса: Последнее изменение Лица
        /// </summary>
        public const string SELECT_Лицо_LastChanged =
            @"SELECT T0.Изменено FROM vwЛица T0 (nolock) WHERE T0.КодЛица = @id";

        /// <summary>
        ///     Строка запроса: Лица
        /// </summary>
        public const string SELECT_Лица = @"
SELECT {0} T0.КодЛица, T0.Кличка FROM vwЛица T0 (nolock)";

        /// <summary>
        ///     Строка запроса: Получаем бизнес проект по ID
        /// </summary>
        public const string SELECT_ID_БизнесПроект =
            @"SELECT КодБизнесПроекта, БизнесПроект FROM Справочники.dbo.vwБизнесПроекты WHERE КодБизнесПроекта = @id";

        /// <summary>
        ///     Строка запроса: Получение информации о бизнес-проектах для дерева
        /// </summary>
        public const string SELECT_БизнесПроектыДанныеДляДерева = @"
SELECT  T0.КодБизнесПроекта Id, T0.R-T0.L ЕстьДети, T0.БизнесПроект Text, ISNULL(T0.Parent,0) ParentId, '' Фильтр
FROM vwБизнесПроекты T0 
WHERE   (( (@Потомки = 1 AND ( (@Код = 0 AND T0.Parent IS NULL) OR (@Код <> 0 AND T0.Parent = @Код) ))
        OR (@Потомки = 0 AND T0.КодБизнесПроекта = @Код))
        OR (@Потомки = 2 AND (T0.КодБизнесПроекта IN ({0}) OR T0.Parent IN ({0}))))
        @OFF_CONDITION
        @ADDWHERE
ORDER BY T0.L
";

        /// <summary>
        ///     Строка запроса: Список бизнес-проектов для дерева
        /// </summary>
        public static string SELECT_БизнесПроектыДанныеДляДерева_State = @"
SET NOCOUNT ON

IF OBJECT_ID('tempdb.#Проекты') IS NOT NULL DROP TABLE #Проекты
CREATE TABLE #Проекты(
        TempID int IDENTITY(1,1),
        [КодБизнесПроекта] [int],
        БизнесПроект [varchar](300),       
        [Parent] [int],
        [L] [int],
        [R] [int],
        [Изменил] [int],
        [Изменено] [datetime],  
        BitMask tinyint
)

INSERT #Проекты
SELECT	T0.[КодБизнесПроекта],
        T0.БизнесПроект,      
        T0.[Parent],
        T0.[L],
        T0.[R],
        NULL [Изменил],
        NULL [Изменено], 
        1 BitMask
FROM	vwБизнесПроекты T0 
WHERE EXISTS (SELECT * FROM vwБизнесПроекты Child 
					WHERE	Child.КодБизнесПроекта IN ({0})
						AND T0.L <=	Child.L AND T0.R >= Child.R) 
                        @ADDWHERE
      AND NOT EXISTS (SELECT * FROM #Проекты X WHERE T0.КодБизнесПроекта = X.КодБизнесПроекта)
ORDER BY T0.L

INSERT #Проекты
SELECT	T0.[КодБизнесПроекта],
        T0.БизнесПроект,      
        T0.[Parent],
        T0.[L],
        T0.[R],
        NULL [Изменил],
        NULL [Изменено], 
        2 BitMask
FROM	vwБизнесПроекты Parent
LEFT JOIN vwБизнесПроекты T0 ON T0.Parent = Parent.КодБизнесПроекта
WHERE Parent.КодБизнесПроекта IN ({0}) AND NOT EXISTS (SELECT * FROM #Проекты X WHERE T0.КодБизнесПроекта = X.КодБизнесПроекта)
@ADDWHERE
ORDER BY Parent.L

INSERT #Проекты 
SELECT  [КодБизнесПроекта],
        БизнесПроект,      
        [Parent],
        [L],
        [R],
        NULL [Изменил],
        NULL [Изменено], 
        4 BitMask
FROM    vwБизнесПроекты 
WHERE   Parent IS NULL                                  
        AND NOT EXISTS (SELECT * FROM #Проекты X WHERE vwБизнесПроекты.КодБизнесПроекта = X.КодБизнесПроекта) 
        @ADDWHERE

SELECT r.[КодБизнесПроекта] id,
       r.БизнесПроект text,      
       r.[Parent] ParentId,
       r.[L],
       r.[R],
       r.[Изменил],
       r.[Изменено], 
       r.BitMask,
       r.R-r.L ЕстьДети
FROM #Проекты r
ORDER BY r.L
DROP TABLE #Проекты
";

        /// <summary>
        ///     Строка запроса: Получение информации о бизнес-проектах для дерева, учитывая фильтр
        /// </summary>
        public static string SELECT_БизнесПроектыДанныеДляДерева_Фильтр = @"
DECLARE @МаксимальноеКоличествоНайденных int = 100
SET NOCOUNT ON
               
IF OBJECT_ID('tempdb.#Проекты') IS NOT NULL DROP TABLE #Проекты
CREATE TABLE #Проекты(
        TempID int IDENTITY(1,1),
        [КодБизнесПроекта] [int],
        БизнесПроект [varchar](50),       
        [Parent] [int],
        [L] [int],
        [R] [int],
        [Изменил] [int],
        [Изменено] [datetime],  
        BitMask tinyint
)

CREATE UNIQUE CLUSTERED INDEX PK_TempID ON #Проекты (TempID)

INSERT #Проекты
SELECT  [КодБизнесПроекта],
        БизнесПроект,      
        [Parent],
        [L],
        [R],
        NULL [Изменил],
        NULL [Изменено], 
        1 BitMask
FROM    vwБизнесПроекты 
WHERE   БизнесПроект LIKE '{1}' 
ORDER BY L
 
SET @КоличествоНайденных = @@ROWCOUNT
DELETE #Проекты WHERE TempID > @МаксимальноеКоличествоНайденных
 
UPDATE  Parent
SET     BitMask = BitMask ^ 2
FROM    #Проекты Parent
WHERE   EXISTS (SELECT * FROM #Проекты Child WHERE Parent.L < Child.L AND Parent.R > Child.R)
 
INSERT  #Проекты
SELECT  [КодБизнесПроекта],
        БизнесПроект,      
        [Parent],
        [L],
        [R],
        NULL [Изменил],
        NULL [Изменено], 
        2 BitMask
FROM    vwБизнесПроекты  Parent 
WHERE   EXISTS (SELECT * FROM #Проекты Child 
                WHERE Parent.L <= Child.L AND Parent.R >= Child.R)                                        
        AND NOT EXISTS (SELECT * FROM #Проекты X WHERE Parent.КодБизнесПроекта = X.КодБизнесПроекта) 
 
UPDATE  #Проекты
SET     BitMask = BitMask ^ 4
WHERE   Parent IS NULL
 
IF 1 = {2}
BEGIN
    INSERT #Проекты 
    SELECT  [КодБизнесПроекта],
            БизнесПроект,      
            [Parent],
            [L],
            [R],
            NULL [Изменил],
            NULL [Изменено], 
            4 BitMask
    FROM    vwБизнесПроекты 
    WHERE   Parent IS NULL                                  
            AND NOT EXISTS (SELECT * FROM #Проекты X WHERE vwБизнесПроекты.КодБизнесПроекта = X.КодБизнесПроекта)
END

SELECT [КодБизнесПроекта] id,
       БизнесПроект text,      
       [Parent] ParentId,
       [L],
       [R],
       [Изменил],
       [Изменено], 
       BitMask,
       R-L ЕстьДети
FROM #Проекты
ORDER BY {0}

DROP TABLE #Проекты
";
        /// <summary>
        ///     Строка запроса: Получение информации о бизнес-проектах для дерева, учитывая фильтр
        /// </summary>
        public static string SELECT_БизнесПроектыДанныеДляДерева_ФильтрExt = @"
DECLARE @МаксимальноеКоличествоНайденных int = 100
SET NOCOUNT ON
               
IF OBJECT_ID('tempdb.#Проекты') IS NOT NULL DROP TABLE #Проекты
CREATE TABLE #Проекты(
        TempID int IDENTITY(1,1),
        [КодБизнесПроекта] [int],
        БизнесПроект [varchar](50),       
        [Parent] [int],
        [L] [int],
        [R] [int],
        [Изменил] [int],
        [Изменено] [datetime],  
        BitMask tinyint
)

CREATE UNIQUE CLUSTERED INDEX PK_TempID ON #Проекты (TempID)

INSERT #Проекты
SELECT DISTINCT Id, text, Parent, L, R, Изменил, Изменено, BitMask FROM (
SELECT  T1.[КодБизнесПроекта],
        T1.[КодБизнесПроекта] Id,
        T1.БизнесПроект,      
        T1.БизнесПроект text,      
        T1.[Parent],
        T1.[L],
        T1.[R],
        NULL [Изменил],
        NULL [Изменено], 
        1 BitMask
FROM    vwБизнесПроекты AS T1
@ADDTABLE
WHERE ('{0}' = '-1' OR EXISTS (SELECT 1 FROM vwБизнесПроекты AS T2 WHERE T2.КодБизнесПроекта IN ({0}) AND T1.L >= T2.L AND T1.R <= T2.R))  
    @OFF_PARENT_CONDITION
) T0 @WHERE ORDER BY L
 
SET @КоличествоНайденных = @@ROWCOUNT
DELETE #Проекты WHERE TempID > @МаксимальноеКоличествоНайденных
 
UPDATE  Parent
SET     BitMask = BitMask ^ 2
FROM    #Проекты Parent
WHERE   EXISTS (SELECT * FROM #Проекты Child WHERE Parent.L < Child.L AND Parent.R > Child.R)
 
INSERT  #Проекты
SELECT  T1.[КодБизнесПроекта],
        T1.БизнесПроект,      
        T1.[Parent],
        T1.[L],
        T1.[R],
        NULL [Изменил],
        NULL [Изменено], 
        2 BitMask
FROM    vwБизнесПроекты T1 
WHERE   EXISTS (SELECT * FROM #Проекты Child 
                WHERE T1.L <= Child.L AND T1.R >= Child.R)                                        
        AND NOT EXISTS (SELECT * FROM #Проекты X WHERE T1.КодБизнесПроекта = X.КодБизнесПроекта) 
        @OFF_CONDITION

UPDATE  #Проекты
SET     BitMask = BitMask ^ 4
WHERE   Parent IS NULL
 
INSERT #Проекты 
SELECT  T1.[КодБизнесПроекта],
        T1.БизнесПроект,      
        T1.[Parent],
        T1.[L],
        T1.[R],
        NULL [Изменил],
        NULL [Изменено], 
        4 BitMask
FROM    vwБизнесПроекты T1
WHERE   (('{0}' = '-1' AND Parent IS NULL) OR КодБизнесПроекта IN ({0})) 
        AND NOT EXISTS(SELECT * FROM #Проекты X WHERE T1.КодБизнесПроекта = X.КодБизнесПроекта)
        @OFF_CONDITION

SELECT [КодБизнесПроекта] id,
       БизнесПроект text,      
       [Parent] ParentId,
       [L],
       [R],
       [Изменил],
       [Изменено], 
       BitMask,
       R-L ЕстьДети
FROM #Проекты
ORDER BY L

DROP TABLE #Проекты
";

        /// <summary>
        ///     Строка запроса: Удаление бизнес-проекта
        /// </summary>
        public const string DELETE_БизнесПроект =
            @"UPDATE Child 
            SET Child.Закрыт = 1
            FROM БизнесПроекты Parent 
               INNER JOIN БизнесПроекты Child ON Parent.L <=	Child.L AND Parent.R >= Child.R
            WHERE Parent.КодБизнесПроекта = @КодБизнесПроекта";


        /// <summary>
        ///     Строка запроса: Получаем организационно правовую форму по ID
        /// </summary>
        public const string SELECT_ID_ОрганизационноПравоваяФорма =
            @"SELECT * FROM Справочники.dbo.ОргПравФормы WHERE КодОргПравФормы = @id";

        /// <summary>
        ///     Строка запроса: Поиск лица по коду
        /// </summary>
        public const string SELECT_ID_Лицо = @"
--Получение информации по лицу
SELECT  T0.КодЛица, T0.ТипЛица, T0.КодБизнесПроекта, T0.Проверено, T0.Кличка, T0.КличкаRL, T0.НазваниеRL, T0.КодТерритории,
        T0.ГосОрганизация, T0.ИНН, T0.ОГРН, T0.ОКПО, T0.БИК, T0.КорСчет, T0.БИКРКЦ, T0.SWIFT, T0.ДатаРождения,T0.ДатаКонца, T0.Примечание, T0.Изменено
FROM    vwЛица T0 (nolock)
WHERE   T0.КодЛица = @id";

        /// <summary>
        ///     Строка запроса: Признак ЛицоДействует
        /// </summary>
        public const string SELECT_CHECK_ЛицоДействует = @"
IF EXISTS (SELECT NULL FROM fn_ДействующиеЛица(@Дата) WHERE @КодЛица=КодЛица)
SELECT 1
ELSE
SELECT 0";

        /// <summary>
        ///     Строка запроса: Получить карточку физического лица по ID
        /// </summary>
        public const string SELECT_ID_КарточкаФизЛица =
            "SELECT * FROM vwКарточкиФизЛиц (nolock) WHERE КодКарточкиФизЛица = @id";

        /// <summary>
        ///     Строка запроса: Получить карточку юридического лица по ID
        /// </summary>
        public const string SELECT_ID_КарточкаЮрЛица =
            "SELECT * FROM vwКарточкиЮрЛиц (nolock) WHERE КодКарточкиЮрЛица=@id";

        /// <summary>
        ///     Строка запроса: Получить карточку юридического лица действующую на дату
        /// </summary>
        public const string SELECT_КарточкаЮрЛица_ДействующаяНаДату =
            "SELECT * FROM vwКарточкиЮрЛиц (nolock) WHERE КодЛица = @КодЛица AND ISNULL(От,'19800101') <= @Дата AND ISNULL(До,'20500101') > @Дата";

        /// <summary>
        ///     Строка запроса: Получить карточки физического лица по ID
        /// </summary>
        public const string SELECT_ID_КарточкиФизЛица =
            "SELECT * FROM vwКарточкиФизЛиц (nolock) WHERE КодЛица = @id ORDER BY От";

        /// <summary>
        ///     Строка запроса: Получить карточки юридического лица по ID
        /// </summary>
        public const string SELECT_ID_КарточкиЮрЛица = @"
--Получение информации о реквизитах лица
SELECT * FROM vwКарточкиЮрЛиц (nolock) WHERE КодЛица = @id ORDER BY От";

        /// <summary>
        ///     Строка запроса: Получаем бизнес проекты по имени
        /// </summary>
        public const string SELECT_БизнесПроектыПоИмени = @"
DECLARE @pattern varchar(100)
SET @pattern = Инвентаризация.dbo.fn_ReplaceRusLat(Инвентаризация.dbo.fn_ReplaceKeySymbols(@search))+'%'
SET @pattern = COALESCE(@pattern, '')
SELECT * FROM vwБизнесПроекты 
WHERE @pattern = '' OR Инвентаризация.dbo.fn_ReplaceRusLat(Инвентаризация.dbo.fn_ReplaceKeySymbols(БизнесПроект)) LIKE @pattern
ORDER BY БизнесПроект";

        /// <summary>
        ///     Строка запроса: Получаем организационно правовые формы по имени
        /// </summary>
        public const string SELECT_ОргПравФормуПоИмени = @"
DECLARE @pattern varchar(100)

SET @personKind = COALESCE(@personKind,0)
SET @pattern = Инвентаризация.dbo.fn_ReplaceRusLat(Инвентаризация.dbo.fn_ReplaceKeySymbols(@search))+'%'
SET @pattern = COALESCE(@pattern, '')

SELECT  * FROM ОргПравФормы 
WHERE   (@pattern = '' OR Инвентаризация.dbo.fn_ReplaceRusLat(ОргПравФорма) LIKE @pattern OR Инвентаризация.dbo.fn_ReplaceRusLat(КраткоеНазвание) LIKE @pattern) 
        AND (@personKind = 0 OR ТипЛица = @personKind)
ORDER BY ОргПравФорма";

        /// <summary>
        ///     Строка запроса: Поиск отвественных сотрудников по ID лица
        /// </summary>
        public const string SELECT_ОтвественныеСотрудники_ПоЛицу = @"
SELECT  * 
FROM    Инвентаризация.dbo.Сотрудники
WHERE   КодСотрудника IN (SELECT КодСотрудника FROM vwЛица_Сотрудники WHERE КодЛица = @id)
ORDER BY Сотрудник";


        /// <summary>
        ///     Строка запроса: Добавление ответственных сотрудников + удаление неиспользуемых
        /// </summary>
        public const string UPDATE_ОтвественныеСотрудники_ПоЛицу = @"
DECLARE @Коды table(КодСотрудника int)
INSERT @Коды SELECT * FROM Инвентаризация.dbo.fn_SplitInts(@ids)

INSERT INTO vwЛица_Сотрудники(КодЛица,КодСотрудника)
SELECT  @personID, Коды.КодСотрудника 
FROM    @Коды Коды INNER JOIN 
        Инвентаризация.dbo.Сотрудники Empl ON Empl.КодСотрудника = Коды.КодСотрудника
WHERE NOT EXISTS( SELECT * FROM vwЛица_Сотрудники WHERE vwЛица_Сотрудники.КодСотрудника = Коды.КодСотрудника AND vwЛица_Сотрудники.КодЛица = @personID )
			
IF (EXISTS(SELECT * FROM vwЛица_Сотрудники WHERE КодЛица = @personID AND КодСотрудника NOT IN ( SELECT КодСотрудника FROM @Коды )))
	DELETE FROM vwЛица_Сотрудники 
    WHERE КодЛица = @personID AND КодСотрудника NOT IN ( SELECT КодСотрудника FROM @Коды )";


        /// <summary>
        ///     Строка запроса: Поиск атрибута лица по ID
        /// </summary>
        public const string SELECT_ID_Атрибут = @"
SELECT  КодЛица, КодТипаАтрибута, КодАтрибутовЛиц, КодТерритории, ДатаНачалаДействия, ДатаОкончанияДействия, КодТерриторииФормата,
        ИмяАтрибутаРус1, ИмяАтрибутаРус2, ИмяАтрибутаРус3,
        ИмяАтрибутаЛат1, ИмяАтрибутаЛат2, ИмяАтрибутаЛат3,
        ИмяАтрибутаНаЯзыкеСтраны1, ИмяАтрибутаНаЯзыкеСтраны2, ИмяАтрибутаНаЯзыкеСтраны3,
        ЗначениеАтрибута1, ЗначениеАтрибута2, ЗначениеАтрибута3, 
        ФорматАтрибута1, ФорматАтрибута2, ФорматАтрибута3,
        ДатаРождения, ДатаКонца, УникаленВПределахТерритории, ПорядокВыводаАтрибута, КодФорматаАтрибута,
        Изменил, Изменено, Проверено
FROM    vwЛицаАтрибуты (nolock) WHERE КодАтрибутовЛиц = @id";


        /// <summary>
        ///     Строка запроса: Поиск атрибутов лица по ID лица
        /// </summary>
        public const string SELECT_АтрибутыЛица = @"
SELECT  КодЛица, КодТипаАтрибута, КодАтрибутовЛиц, КодТерритории, ДатаНачалаДействия, ДатаОкончанияДействия, КодТерриторииФормата,
		ИмяАтрибутаРус1, ИмяАтрибутаРус2, ИмяАтрибутаРус3,
		ИмяАтрибутаЛат1, ИмяАтрибутаЛат2, ИмяАтрибутаЛат3,
		ИмяАтрибутаНаЯзыкеСтраны1, ИмяАтрибутаНаЯзыкеСтраны2, ИмяАтрибутаНаЯзыкеСтраны3,
		ЗначениеАтрибута1, ЗначениеАтрибута2, ЗначениеАтрибута3, 
		ФорматАтрибута1, ФорматАтрибута2, ФорматАтрибута3,
		ДатаРождения, ДатаКонца, УникаленВПределахТерритории, ПорядокВыводаАтрибута, КодФорматаАтрибута,
		Изменил, Изменено
FROM    vwЛицаАтрибуты (nolock) WHERE КодЛица = @id";


        /// <summary>
        ///     Строка запроса: Поиск формата атрибута по ID
        /// </summary>
        public const string SELECT_ID_ФорматАтрибута = @"
SELECT  ИмяАтрибутаРус1, ИмяАтрибутаРус2, ИмяАтрибутаРус3,
        ИмяАтрибутаЛат1, ИмяАтрибутаЛат2, ИмяАтрибутаЛат3,
        ИмяАтрибутаНаЯзыкеСтраны1, ИмяАтрибутаНаЯзыкеСтраны2, ИмяАтрибутаНаЯзыкеСтраны3,
        ФорматАтрибута1, ФорматАтрибута2, ФорматАтрибута3,
        КодФорматаАтрибута, КодТерритории, ТипЛица, КодТипаАтрибута, УникаленВПределахТерритории,
        ПроверяемыйАтрибут, Изменено, Изменил
FROM    vwФорматАтрибута (nolock) WHERE КодФорматаАтрибута = @id";

        /// <summary>
        ///     Строка запроса: Поиск формата атрибута по типу формата атрибута и по территории
        /// </summary>
        public const string SELECT_ФорматаАтрибута_Территория_ТипЛица_ТипАтрибута = @"
SELECT  ИмяАтрибутаРус1, ИмяАтрибутаРус2, ИмяАтрибутаРус3,
		ИмяАтрибутаЛат1, ИмяАтрибутаЛат2, ИмяАтрибутаЛат3,
		ИмяАтрибутаНаЯзыкеСтраны1, ИмяАтрибутаНаЯзыкеСтраны2, ИмяАтрибутаНаЯзыкеСтраны3,
		ФорматАтрибута1, ФорматАтрибута2, ФорматАтрибута3,
		КодФорматаАтрибута, КодТерритории, ТипЛица, КодТипаАтрибута, УникаленВПределахТерритории,
        ПроверяемыйАтрибут, Изменено, Изменил
FROM    vwФорматАтрибута (nolock) 
WHERE КодТерритории = @territoryID AND ТипЛица = @personType AND КодТипаАтрибута = @formatTypeID";


        /// <summary>
        ///     Строка запроса: Поиск формата атрибута по умолчанию
        /// </summary>
        public const string SELECT_ФорматаАтрибутаПоУмолчанию = @"
SELECT  ИмяАтрибутаРус1, ИмяАтрибутаРус2, ИмяАтрибутаРус3,
        ИмяАтрибутаЛат1, ИмяАтрибутаЛат2, ИмяАтрибутаЛат3,
        CASE    WHEN ИмяАтрибутаРус2 = '' THEN 1 
                WHEN ИмяАтрибутаРус3 = '' THEN 2  
                ELSE 3 END КоличествоПолей
FROM vwФорматАтрибута 
WHERE КодТерритории IS NULL AND КодТипаАтрибута = @formatTypeID AND ТипЛица = @personType";

        /// <summary>
        ///     Строка запроса: Поиск типа формата атрибута по коду
        /// </summary>
        public const string SELECT_ID_ТипАтрибута = @"
SELECT  КодТипаАтрибута, ТипАтрибута, ДоступностьДляТипаЛица, ПорядокВыводаАтрибута, ТипАтрибутаЛат
FROM    vwТипАтрибута (nolock) WHERE КодТипаАтрибута = @id";

        /// <summary>
        ///     Строка запроса: Получаем типы форматов атрибутов
        /// </summary>
        public const string SELECT_ТипыАтрибутов = @"
SELECT  КодТипаАтрибута, ТипАтрибута, ДоступностьДляТипаЛица, ПорядокВыводаАтрибута, ТипАтрибутаЛат
FROM    vwТипАтрибута";


        /// <summary>
        ///     Хранимая процедура: Получение пунктов меню досье лица
        /// </summary>
        public const string SP_Лица_Досье_Меню = "sp_Лица_Досье_$Меню";

        /// <summary>
        ///     Хранимая процедура: Получить досье лица
        /// </summary>
        public const string SP_Лица_Досье_Context_NEW = "sp_Лица_Досье_Context_new";

        /// <summary>
        ///     Хранимая процедура: Поиск лиц
        /// </summary>
        public const string SP_Лица_Поиск = "sp_Лица_Поиск";


        /// <summary>
        ///     Строка запроса: Поиск лиц по контакту
        /// </summary>
        public const string SELECT_ЛицаПоТелефону = @"
SELECT	vwЛица.КодЛица, vwЛица.Кличка, vwЛица.ИНН, vwЛица.Примечание, Сотрудники.КодСотрудника, Сотрудники.Сотрудник, vwКонтактыЛица.Изменено, ТипыКонтактов.icon
FROM	vwКонтактыЛица INNER JOIN 
	    ТипыКонтактов ON ТипыКонтактов.КодТипаКонтакта = vwКонтактыЛица.КодТипаКонтакта INNER JOIN
	    vwЛица ON vwЛица.КодЛица = vwКонтактыЛица.КодЛица LEFT JOIN 
        Инвентаризация.dbo.Сотрудники Сотрудники ON Сотрудники.КодЛица = vwЛица.КодЛица
WHERE	vwКонтактыЛица.КодТипаКонтакта >=20 AND vwКонтактыЛица.КодТипаКонтакта < 40
	    AND КонтактRL IN (@НомерТелефона, ' ' + @НомерТелефона)
ORDER BY vwКонтактыЛица.Изменено DESC, Кличка
";


        /// <summary>
        ///     Хранимая процедура: Поиск абонента
        /// </summary>
        public const string SP_Абоненты_Поиск = "sp_Абоненты_Поиск";

        /// <summary>
        ///     Хранимая процедура: Создание физического лица
        /// </summary>
        public const string SP_Лица_ФизическоеЛицо_Ins = "sp_Лица_ФизическоеЛицо_Ins";

        /// <summary>
        ///     Хранимая процедура: Создание физического лица
        /// </summary>
        public const string SP_Лица_ЮридическоеЛицо_Ins = "sp_Лица_ЮридическоеЛицо_Ins";

        /// <summary>
        ///     Хранимая процедура: Редактирования атрибута
        /// </summary>
        public const string SP_Лица_Upd = "sp_Лица_Upd";

        /// <summary>
        ///     Хранимая процедура: Сохранение изменений в формате атрибута
        /// </summary>
        public const string SP_Лица_ФорматАтрибута_Upd = "sp_Лица_ФорматАтрибута_Upd";

        /// <summary>
        ///     Хранимая процедура: Создание формата атрибута
        /// </summary>
        public const string SP_Лица_ФорматАтрибута_Ins = "sp_Лица_ФорматАтрибута_Ins";

        /// <summary>
        ///     Хранимая процедура: Создание атрибута
        /// </summary>
        public const string SP_Лица_Атрибут_Ins = "sp_Лица_Атрибут_Ins";

        /// <summary>
        ///     Хранимая процедура: Удаление атрибута
        /// </summary>
        public const string SP_Лица_Атрибут_Del = "sp_Лица_Атрибут_Del";

        /// <summary>
        ///     Хранимая процедура: Редактирование атрибута
        /// </summary>
        public const string SP_Лица_Атрибут_Upd = "sp_Лица_Атрибут_Upd";

        /// <summary>
        ///     Хранимая процедура: Проверка атрибута
        /// </summary>
        public const string SP_Лица_Атрибут_Check = "sp_Лица_Атрибут_Check";

        /// <summary>
        ///     Хранимая процедура: Поиск телефонного контакта
        /// </summary>
        public const string SP_ПоискТелефонногоКонтакта = "sp_ПоискТелефонногоКонтакта";

        /// <summary>
        ///     Получение должности физического лица
        /// </summary>
        public const string SELECT_ДолжностьФизическогоЛица = @"
SELECT  Описание 
FROM    vwСвязиЛиц 
WHERE   КодЛицаРодителя = @КодЛицаРодителя 
        AND КодЛицаПотомка = @КодЛицаПотомка 
        AND Параметр = @Параметр 
        AND КодТипаСвязиЛиц = @КодТипаСвязиЛиц
        AND От <= @Дата AND @Дата < До
";

        /// <summary>
        ///     Строка запроса: Проверка наличия у лица подписанта с указанным типом подписи
        /// </summary>
        public const string SELECT_ЛицоИмеетПодписантовСПравомПодписи = @"
IF EXISTS(SELECT  * 
FROM    vwСвязиЛиц 
WHERE   КодЛицаРодителя = @КодЛицаРодителя        
        AND Параметр = @Параметр 
        AND КодТипаСвязиЛиц = @КодТипаСвязиЛиц
        AND От <= @Дата AND @Дата < До)
    SELECT 1
ELSE
    SELECT 0";

        /// <summary>
        ///     Строка запроса: Получение списка логотипов лица
        /// </summary>
        public const string SELECT_ЛоготипыЛица = "SELECT * FROM ЛоготипыЛиц WHERE КодЛица = @id";

        #endregion

        #region Связи лиц

        /// <summary>
        ///     Хранимая процедура: Cоздание, изменение, удаления связи лиц
        /// </summary>
        public const string SP_Лица_InsUpdDel_СвязиЛиц = "sp_Лица_InsUpdDel_СвязиЛиц";

        /// <summary>
        ///     Строка запроса: Поиск связи лиц по ID
        /// </summary>
        public const string SELECT_СвязиЛиц = @"
SELECT  КодСвязиЛиц, КодТипаСвязиЛиц, От, До, КодЛицаРодителя, КодЛицаПотомка, COALESCE(NULLIF(Описание,'') , '<Нет описания>') as Описание,
        Параметр, Изменил, Изменено
FROM    vwСвязиЛиц  (nolock)
";

        /// <summary>
        ///     Строка запроса: Поиск связи лиц по ID
        /// </summary>
        public const string SELECT_ID_СвязиЛиц = @"
SELECT  КодСвязиЛиц, КодТипаСвязиЛиц, От, До, КодЛицаРодителя, КодЛицаПотомка, COALESCE(NULLIF(Описание,'') , '<Нет описания>') as Описание,
        Параметр, Изменил, Изменено 
FROM    vwСвязиЛиц (nolock) 
WHERE   КодСвязиЛиц = @id";

        /// <summary>
        ///     Строка запроса: Поиск связи лиц типу связи лиц
        /// </summary>
        public const string SELECT_СвязиЛиц_ПоТипуСвязи = @"
SELECT  КодСвязиЛиц, КодТипаСвязиЛиц, От, До, КодЛицаРодителя, КодЛицаПотомка, COALESCE(NULLIF(Описание,'') , '<Нет описания>') as Описание,
        Параметр, Изменил, Изменено 
FROM    vwСвязиЛиц (nolock) 
WHERE   КодТипаСвязиЛиц = @LinkTypeID";

        /// <summary>
        ///     Строка запроса: Поиск связи лиц по ID родителя
        /// </summary>
        public const string SELECT_СвязиЛиц_ПоРодителю = @"
SELECT  КодСвязиЛиц, КодТипаСвязиЛиц, От, До, КодЛицаРодителя, КодЛицаПотомка, COALESCE(NULLIF(Описание,'') , '<Нет описания>') as Описание,
        Параметр, Изменил, Изменено 
FROM    vwСвязиЛиц (nolock) 
WHERE   КодЛицаРодителя = @ParentID";


        /// <summary>
        ///     Строка запроса: Поиск связи лиц по ID подчиненного
        /// </summary>
        public const string SELECT_СвязьЛиц_ПоПотомку = @"
SELECT  КодСвязиЛиц, КодТипаСвязиЛиц, От, До, КодЛицаРодителя, КодЛицаПотомка, COALESCE(NULLIF(Описание,'') , '<Нет описания>') as Описание,
        Параметр, Изменил, Изменено 
FROM    vwСвязиЛиц (nolock) 
WHERE   КодЛицаПотомка = @ChildID";

        /// <summary>
        ///     Строка запроса: Поиск связи лиц по ID родителя и типу связи лиц
        /// </summary>
        public const string SELECT_СвязиЛиц_ПоРодителю_ПоТипуСвязи = @"
SELECT  КодСвязиЛиц, КодТипаСвязиЛиц, От, До, КодЛицаРодителя, КодЛицаПотомка, COALESCE(NULLIF(Описание,'') , '<Нет описания>') as Описание,
        Параметр, Изменил, Изменено 
FROM    vwСвязиЛиц (nolock)  
WHERE   КодЛицаРодителя = @ParentID AND КодТипаСвязиЛиц = @LinkTypeID";


        /// <summary>
        ///     Строка запроса: Поиск связи лиц по ID подчиненногои и типу связи лиц
        /// </summary>
        public const string SELECT_СвязиЛиц_ПоПотомку_ПоТипуСвязи = @"
SELECT  КодСвязиЛиц, КодТипаСвязиЛиц, От, До, КодЛицаРодителя, КодЛицаПотомка, COALESCE(NULLIF(Описание,'') , '<Нет описания>') as Описание,
        Параметр, Изменил, Изменено 
FROM    vwСвязиЛиц (nolock)
WHERE КодЛицаПотомка = @ChildID AND КодТипаСвязиЛиц = @LinkTypeID";

        /// <summary>
        ///     Строка запроса: Поиск связей лиц по ID родителя и ID подчиненного
        /// </summary>
        public const string SELECT_СвязиЛиц_ПоРодителю_ПоПотомку = @"
SELECT  КодСвязиЛиц, КодТипаСвязиЛиц, От, До, КодЛицаРодителя, КодЛицаПотомка, COALESCE(NULLIF(Описание,'') , '<Нет описания>') as Описание,
        Параметр, Изменил, Изменено
FROM    vwСвязиЛиц (nolock)
WHERE   КодЛицаРодителя = @ParentID AND КодЛицаПотомка = @ChildID";

        /// <summary>
        ///     Строка запроса: Поиск связей лиц по ID родителя и ID подчиненного и типу связи лиц
        /// </summary>
        public const string SELECT_СвязиЛиц_ПоРодителю_ПоПотомку_ПоТипуСвязи = @"
SELECT  КодСвязиЛиц, КодТипаСвязиЛиц, От, До, КодЛицаРодителя, КодЛицаПотомка, COALESCE(NULLIF(Описание,'') , '<Нет описания>') as Описание,
        Параметр, Изменил, Изменено
FROM    vwСвязиЛиц (nolock)
WHERE   КодЛицаРодителя = @ParentID AND КодЛицаПотомка = @ChildID AND КодТипаСвязиЛиц = @LinkTypeID";

        /// <summary>
        ///     Строка запроса: Поиск связи лиц по ID лица
        /// </summary>
        public const string SELECT_СвязиЛиц_МестаРаботы_Работники_ПоЛицу = @"
SELECT  КодСвязиЛиц, КодТипаСвязиЛиц, От, До, КодЛицаРодителя, КодЛицаПотомка, COALESCE(NULLIF(Описание,'') , '<Нет описания>') as Описание,
        Параметр, Изменил, Изменено 
FROM    vwСвязиЛиц (nolock)
WHERE   КодТипаСвязиЛиц = 1 AND @personID IN(КодЛицаРодителя, КодЛицаПотомка)";

        /// <summary>
        ///     Строка запроса: Поиск работников по месту работы
        /// </summary>
        public const string SELECT_СвязиЛиц_Работники_ПоЛицу = @"
SELECT  КодСвязиЛиц, КодТипаСвязиЛиц, От, До, КодЛицаРодителя, КодЛицаПотомка, COALESCE(NULLIF(Описание,'') , '<Нет описания>') as Описание,
        Параметр, Изменил, Изменено 
FROM    vwСвязиЛиц (nolock)
WHERE   КодТипаСвязиЛиц = 1 AND КодЛицаРодителя = @personID";

        /// <summary>
        ///     Строка запроса: Поиск мест работы по работнику
        /// </summary>
        public const string SELECT_СвязиЛиц_МестаРаботы_ПоЛицу = @"
SELECT  КодСвязиЛиц, КодТипаСвязиЛиц, От, До, КодЛицаРодителя, КодЛицаПотомка, COALESCE(NULLIF(Описание,'') , '<Нет описания>') as Описание,
        Параметр, Изменил, Изменено 
FROM    vwСвязиЛиц  (nolock)
WHERE   КодТипаСвязиЛиц = 1 AND КодЛицаПотомка= @personID";

        #endregion

        #region Типы лиц

        /// <summary>
        ///     Хранимая процедура: Создание и удаление типов лиц
        /// </summary>
        public const string SP_Лица_InsDel_ТипыЛиц = "sp_Лица_InsDel_ТипыЛиц";

        /// <summary>
        ///     Строка запроса: Получить темы лиц
        /// </summary>
        public const string SELECT_ТемыЛиц = @"
SELECT * 
FROM    (SELECT  КодТемыЛица, ТемаЛица, Parent, L, R FROM vwТемыЛиц_Администрирование WHERE КодТемыЛица IS NOT NULL
        UNION
        SELECT  КодТемыЛица, ТемаЛица, Parent, L, R FROM vwТемыЛиц_Tree
        WHERE   КодТемыЛица NOT IN (SELECT КодТемыЛица FROM vwТемыЛиц_Администрирование WHERE КодТемыЛица IS NOT NULL)) T0";

        /// <summary>
        ///     Строка запроса: Получить темы лиц
        /// </summary>
        public const string SELECT_ID_ТемаЛица = @"
--Получение информации по теме лица
SELECT * 
FROM    (SELECT  КодТемыЛица, ТемаЛица, Parent FROM vwТемыЛиц_Администрирование WHERE КодТемыЛица = @id
        UNION
        SELECT  КодТемыЛица, ТемаЛица, Parent FROM vwТемыЛиц_Tree
        WHERE   КодТемыЛица NOT IN (SELECT КодТемыЛица FROM vwТемыЛиц_Администрирование WHERE КодТемыЛица IS NOT NULL) AND КодТемыЛица = @id) T0";

        /// <summary>
        ///     Строка запроса: Получить темы лиц по кодам тем
        /// </summary>
        public const string SELECT_ТипыЛиц_Темы = @"
SELECT  ТиЛ.КодТипаЛица, ТеЛ.КодТемыЛица, ТеЛ.ТемаЛица, К.КодКаталога, К.Каталог
FROM    vwТипыЛицСотрудника ТиЛ INNER JOIN 
        vwТемыЛиц ТеЛ ON ТиЛ.КодТемыЛица=ТеЛ.КодТемыЛица INNER JOIN 
        Каталоги К ON ТиЛ.КодКаталога=К.КодКаталога
WHERE ТеЛ.КодТемыЛица IN (SELECT value FROM Инвентаризация.dbo.fn_SplitInts(@id))
ORDER BY ТемаЛица, Каталог";

        /// <summary>
        ///     Строка запроса: Получить тип лица по ID
        /// </summary>
        public const string SELECT_ID_ТипЛица = @"
SELECT  ТиЛ.КодТипаЛица, ТиЛ.КодКаталога, ТиЛ.КодТемыЛица, К.Каталог
FROM    vwТипыЛицСотрудника ТиЛ INNER JOIN 
        Каталоги К ON ТиЛ.КодКаталога=К.КодКаталога
WHERE   КодТипаЛица = @id";

        /// <summary>
        ///     Строка запроса: Получить типы лиц
        /// </summary>
        public const string SELECT_ТипыЛица = @"SELECT КодТипаЛица, КодКаталога, КодТемыЛица FROM vwТипыЛицСотрудника";

        /// <summary>
        ///     Строка запроса: Получить типы лица по ID лица
        /// </summary>
        public const string SELECT_ТипыЛиц_Лицо = @"
SELECT  КодТипаЛица, ТеЛ.КодТемыЛица, ТеЛ.ТемаЛица, К.КодКаталога, К.Каталог, ТеЛ.L
FROM    vwТипыЛицСотрудника Тил INNER JOIN 
        vwТемыЛиц ТеЛ ON ТиЛ.КодТемыЛица=ТеЛ.КодТемыЛица INNER JOIN 
        Каталоги К ON Тил.КодКаталога=К.КодКаталога
WHERE   КодТипаЛица IN( SELECT КодТипаЛица FROM Лица_ТипыЛиц WHERE КодЛица = @id AND Сотрудник = 0 )
ORDER BY ТемаЛица, Каталог";

        /// <summary>
        ///     Строка запроса: ТемыЛиц_ПотомкиИПодчиненные
        /// </summary>
        public const string SELECT_ID_ТемыЛиц_ПотомкиИПодчиненные = @"
--Проверяем наличие подчиненных и родителей в выбранном списке
CREATE TABLE #T(КодТемыЛица int PRIMARY KEY, ТемаЛица varchar(100), Parent int, L int, R int)
DECLARE @L int, @R int

INSERT	#T(КодТемыЛица, ТемаЛица, Parent, L, R)
SELECT	КодТемыЛица, ТемаЛица, Parent, L, R 
FROM    (SELECT  КодТемыЛица, ТемаЛица, Parent, L, R FROM vwТемыЛиц_Администрирование WHERE КодТемыЛица IS NOT NULL
        UNION
        SELECT  КодТемыЛица, ТемаЛица, Parent, L, R FROM vwТемыЛиц_Tree
        WHERE   КодТемыЛица NOT IN (SELECT КодТемыЛица FROM vwТемыЛиц_Администрирование WHERE КодТемыЛица IS NOT NULL)) T0
WHERE	@КодКаталога = 0 OR EXISTS(SELECT * FROM ТипыЛиц (nolock) WHERE КодКаталога = @КодКаталога AND T0.КодТемыЛица = ТипыЛиц.КодТемыЛица)

SELECT @L = L, @R = R FROM #T WHERE КодТемыЛица = @id 
SELECT	КодТемыЛица, ТемаЛица, 0 Parent FROM #T WHERE @L < L AND @R > R
UNION 
SELECT	КодТемыЛица, ТемаЛица, 1 Parent FROM #T WHERE L < @L AND R > @L
	
DROP TABLE #T
";


        /// <summary>
        ///     Строка запроса: Получить каталог по ID
        /// </summary>
        public const string SELECT_ID_Каталог = @"
--получение информации о каталоге по идентификатору
SELECT * FROM Каталоги WHERE КодКаталога = @id";

        /// <summary>
        ///     Строка запроса: Список каталогов
        /// </summary>
        public const string SELECT_Каталоги = @"
--получение списка каталогов
SELECT * FROM Каталоги";

        #endregion

        #region Контакты

        /// <summary>
        ///     Хранимая процедура: Получаем контакты лица
        /// </summary>
        public const string SP_Лица_Контакты = "sp_Лица_Контакты";

        /// <summary>
        ///     Получаем пустой результат без ошибок в случае добавления условий поиска адреса лица
        /// </summary>
        public const string SELECT_ПустыеКонтактыЛица =
            @"SELECT КодКонтакта, КодТипаКонтакта, Контакт, КодЛица, От, До FROM (VALUES (NULL,NULL,NULL,NULL,NULL,NULL)) AS T0(КодКонтакта,КодТипаКонтакта,Контакт,КодЛица,От,До) WHERE КодКонтакта IS NOT NULL";

        /// <summary>
        ///     Получаем адреса лица
        /// </summary>
        public const string SELECT_КонтактыЛица = @"
SELECT DISTINCT {0} T0.КодКонтакта, T0.Контакт, T0.КодТипаКонтакта, T1.ТипКонтакта, T1.ТипКонтактаЛат FROM
(SELECT '1' + CONVERT(varchar, КодКонтакта) AS КодКонтакта, КодТипаКонтакта, Контакт, КодЛица, NULL AS От, NULL AS До FROM vwКонтакты WHERE @ИсточникКонтакта&1=1
UNION ALL
SELECT '2' + CONVERT(varchar, КодКарточкиЮрЛица) AS КодКонтакта, 1 AS КодТипаКонтакта, АдресЮридический Контакт, КодЛица, От, До FROM vwКарточкиЮрЛиц (nolock) WHERE @ИсточникКонтакта&2=2
UNION ALL
SELECT '4'+ CONVERT(varchar, КодКарточкиФизЛица) AS КодКонтакта, 1 AS КодТипаКонтакта, АдресЮридический Контакт, КодЛица, От, До FROM vwКарточкиФизЛиц (nolock) WHERE @ИсточникКонтакта&4=4) AS T0
LEFT JOIN ТипыКонтактов T1 ON T1.КодТипаКонтакта = T0.КодТипаКонтакта
WHERE
T0.Контакт<>''";

        /// <summary>
        ///     Получаем адреса отправки лица
        /// </summary>
        public const string SELECT_КонтактыЛицаExt = @"
SELECT CONVERT(varchar, КодКонтакта) AS КодКонтакта, КодТипаКонтакта, Контакт, КодЛица, NULL AS От, NULL AS До 
FROM vwКонтакты 
WHERE
Контакт<>''
AND  КодТипаКонтакта = 1
AND  КодЛица = @КодЛица
";

        /// <summary>
        ///     Получаем адреса лица по указанному условному коду, возвращаемому как КодКонтакта из предыдущего запроса
        /// </summary>
        public const string SELECT_ID_КонтактыЛица = @"
SELECT TOP 1 КодТипаКонтакта+CONVERT(varchar, КодКонтакта) AS КодКонтакта, Контакт, КодТипаКонтакта FROM
(
SELECT КодКонтакта, '1' AS КодТипаКонтакта, Контакт, КодЛица, NULL AS От, NULL AS До FROM vwКонтакты WHERE 1=CAST(LEFT(@КодКонтакта,1) as int)&1
UNION ALL
SELECT КодКарточкиЮрЛица AS КодКонтакта, '2' AS КодТипаКонтакта, АдресЮридический Контакт, КодЛица, От, До FROM vwКарточкиЮрЛиц (nolock) WHERE 2=CAST(LEFT(@КодКонтакта,1) as int)&2
UNION ALL
SELECT КодКарточкиФизЛица AS КодКонтакта, '4' AS КодТипаКонтакта, АдресЮридический Контакт, КодЛица, От, До FROM vwКарточкиФизЛиц (nolock) WHERE 4=CAST(LEFT(@КодКонтакта,1) as int)&4) AS T0
WHERE
КодКонтакта = CAST( SUBSTRING (@КодКонтакта, 2, 30) as int)
ORDER BY (SELECT NULL)";

        /// <summary>
        ///     Строка запроса: признак - КонтактЛица
        /// </summary>
        public const string SELECT_TEST_КонтактЛица = @"
IF EXISTS
(SELECT NULL FROM
(SELECT КодКонтакта, КодЛица FROM vwКонтакты WHERE 1=CAST(LEFT(@КодКонтакта,1) as int)&1
UNION ALL
SELECT КодКарточкиЮрЛица AS КодКонтакта, КодЛица FROM vwКарточкиЮрЛиц (nolock) WHERE 2=CAST(LEFT(@КодКонтакта,1)&2 as int)&2
UNION ALL
SELECT КодКарточкиФизЛица AS КодКонтакта, КодЛица FROM vwКарточкиФизЛиц (nolock) WHERE 4=CAST(LEFT(@КодКонтакта,1) as int)&4) AS T0
WHERE
КодКонтакта= CAST( SUBSTRING (@КодКонтакта, 2, 30) as int)
AND КодЛица= @КодЛица)
SELECT 1
ELSE
SELECT 0";

        /// <summary>
        ///     Строка запроса: Возвращает признак действующего контракта (0/1)
        /// </summary>
        public const string SELECT_TEST_КонтактДействует = @"
IF EXISTS
(SELECT NULL FROM
(SELECT КодКонтакта, NULL AS От, NULL AS До FROM vwКонтакты WHERE 1=CAST(LEFT(@КодКонтакта,1) as int)&1
UNION ALL
SELECT КодКарточкиЮрЛица AS КодКонтакта, От, До FROM vwКарточкиЮрЛиц (nolock) WHERE 2=CAST(LEFT(@КодКонтакта,1)&2 as int)&2
UNION ALL
SELECT КодКарточкиФизЛица AS КодКонтакта, От, До FROM vwКарточкиФизЛиц (nolock) WHERE 4=CAST(LEFT(@КодКонтакта,1) as int)&4) AS T0
WHERE
КодКонтакта= CAST( SUBSTRING (@КодКонтакта, 2, 30) as int)
AND
(T0.От IS NULL OR T0.От <= @Дата)
AND
(T0.До IS NULL OR T0.До > @Дата))
SELECT 1
ELSE
SELECT 0";

        /// <summary>
        ///     Строка запроса: Получаем тип контакта
        /// </summary>
        public const string SELECT_ID_ТипКонтакта = @"
SELECT  КодТипаКонтакта, ТипКонтакта, ТипКонтактаЛат, Категория, icon
FROM    ТипыКонтактов (nolock) 
WHERE   КодТипаКонтакта = @id";

        /// <summary>
        ///     Строка запроса: Получаем типы контакта
        /// </summary>
        public const string SELECT_ТипыКонтактов =
            @"SELECT КодТипаКонтакта, ТипКонтакта, ТипКонтактаЛат FROM ТипыКонтактов";


        /// <summary>
        ///     Строка запроса: редактируем контакт
        /// </summary>
        public const string UPDATE_Контакт_ПоЛицу = @"
UPDATE  vwКонтакты
SET     КодЛица = @КодЛица,
        КодСвязиЛиц = NULL,
        КодТипаКонтакта = @КодТипаКонтакта,
        КодСтраны = @КодСтраны, АдресИндекс = @АдресИндекс, АдресОбласть = @АдресОбласть, АдресГород = @АдресГород, АдресГородRus = @АдресГородRus, Адрес = @Адрес,
        ТелефонСтрана = @ТелефонСтрана, ТелефонГород = @ТелефонГород, ТелефонНомер = @ТелефонНомер,ТелефонДоп = @ТелефонДоп,
        ДругойКонтакт = @ДругойКонтакт,
        Примечание = @Примечание
WHERE   КодКонтакта = @КодКонтакта";

        /// <summary>
        ///     Строка запроса: Редактируем контакт по связи
        /// </summary>
        public const string UPDATE_Контакт_ПоСвязи = @"
UPDATE  vwКонтакты
SET     КодЛица = NULL,
        КодСвязиЛиц = @КодСвязиЛиц,
        КодТипаКонтакта = @КодТипаКонтакта,
        КодСтраны = @КодСтраны, АдресИндекс = @АдресИндекс, АдресОбласть = @АдресОбласть, АдресГород = @АдресГород, АдресГородRus = @АдресГородRus, Адрес = @Адрес,
        ТелефонСтрана = @ТелефонСтрана, ТелефонГород = @ТелефонГород, ТелефонНомер = @ТелефонНомер, ТелефонДоп = @ТелефонДоп,
        ДругойКонтакт = @ДругойКонтакт,
        Примечание = @Примечание
WHERE   КодКонтакта = @КодКонтакта";

        /// <summary>
        ///     Строка запроса: Создаем контакт по связи
        /// </summary>
        public const string INSERT_Контакт_ПоСвязи = @"
INSERT  vwКонтакты(КодСвязиЛиц, КодТипаКонтакта, КодСтраны, АдресИндекс, АдресОбласть, АдресГород, АдресГородRus, Адрес, ТелефонСтрана, ТелефонГород, ТелефонНомер, ТелефонДоп, ДругойКонтакт, Примечание)
SELECT  @КодСвязиЛиц, @КодТипаКонтакта, @КодСтраны, @АдресИндекс, @АдресОбласть, @АдресГород, @АдресГородRus, @Адрес, @ТелефонСтрана,  @ТелефонГород,  @ТелефонНомер, @ТелефонДоп, @ДругойКонтакт, @Примечание
SELECT  SCOPE_IDENTITY() КодКонтакта;";

        /// <summary>
        ///     Строка запроса: Создаем контакт
        /// </summary>
        public const string INSERT_Контакт_ПоЛицу = @"
INSERT  vwКонтакты(КодЛица, КодТипаКонтакта, КодСтраны, АдресИндекс, АдресОбласть, АдресГород, АдресГородRus, Адрес, ТелефонСтрана, ТелефонГород, ТелефонНомер, ТелефонДоп, ДругойКонтакт, Примечание)
SELECT  @КодЛица, @КодТипаКонтакта, @КодСтраны, @АдресИндекс, @АдресОбласть, @АдресГород, @АдресГородRus, @Адрес, @ТелефонСтрана, @ТелефонГород,  @ТелефонНомер, @ТелефонДоп, @ДругойКонтакт, @Примечание
SELECT  SCOPE_IDENTITY() КодКонтакта;";

        /// <summary>
        ///     Строка запроса: Создаем контакт
        /// </summary>
        public const string DELETE_ID_Контакт = @"DELETE FROM vwКонтакты WHERE КодКонтакта = @КодКонтакта";


        /// <summary>
        ///     Строка запроса: Получаем контакт
        /// </summary>
        public const string SELECT_ID_Контакт = @"
SELECT  КодКонтакта, КодЛица, КодСвязиЛиц, КодТипаКонтакта, Контакт, КонтактRL, КодСтраны,
        АдресИндекс, АдресОбласть, АдресГород, АдресГородRus, Адрес,
        ТелефонСтрана, ТелефонГород, ТелефонНомер, ТелефонДоп, ТелефонКорпНомер,
        ДругойКонтакт, Примечание, Изменил, Изменено
FROM    vwКонтакты (nolock) WHERE КодКонтакта = @id";


        /// <summary>
        ///     Строка запроса: Получаем контакты по ID лица
        /// </summary>
        public const string SELECT_Контакты_ПоЛицу = @"
--Получение информации о контактах лица
SELECT  КодКонтакта, КодЛица, КодСвязиЛиц, КодТипаКонтакта, Контакт, КонтактRL, КодСтраны,
        АдресИндекс, АдресОбласть, АдресГород, АдресГородRus, Адрес,
        ТелефонСтрана, ТелефонГород, ТелефонНомер, ТелефонДоп, ТелефонКорпНомер,
        ДругойКонтакт, Примечание, Изменил, Изменено
FROM    vwКонтакты (nolock) WHERE КодЛица = @id AND (@КодТипаКонтакта = 0 OR КодТипаКонтакта = @КодТипаКонтакта)";

        /// <summary>
        ///     Формирование контакта FN_Лица_ФормированиеКонтакта
        /// </summary>
        public const string SELECT_FN_Лица_ФормированиеКонтакта = @"
SELECT dbo.fn_Лица_ФормированиеКонтакта(@ТипКонтакта, @АдресИндекс, @АдресОбласть, @АдресГород, @АдресГородRus, @Адрес,@КодСтраны, @ТелефонСтрана,@ТелефонГород ,@ТелефонНомер, @ТелефонДоп, @ДругойКонтакт, 0) Контакт
";

        #endregion

        #region МестаХранения

        /// <summary>
        ///     Строка запроса: Получение мест хранения
        /// </summary>
        public const string SELECT_МестаХранения =
            @"SELECT {0} T0.КодМестаХранения, T0.МестоХранения, T0.Parent, T0.L, T0.R FROM dbo.МестаХранения T0 (nolock)";

        /// <summary>
        ///     Строка запроса: Поиск места хранения по коду
        /// </summary>
        public static string SELECT_ID_МестоХранения =
            string.Format(@"{0} WHERE КодМестаХранения = @id", string.Format(SELECT_МестаХранения, ""));

        /// <summary>
        ///     Строка запроса: Получение подчиненных мест хранения
        /// </summary>
        public static string SELECT_МестоХранения_Подчиненные = string.Format(
            @"{0} WHERE T0.L >= @leftKey AND T0.R <= @rightKey ORDER BY L", string.Format(SELECT_МестаХранения, ""));

        #endregion

        #region Ресурсы/валюта

        /// <summary>
        ///     Строка запроса: Последнее изменение ресурса
        /// </summary>
        public static string SELECT_Ресурс_LastChanged =
            @"SELECT T0.Изменено FROM Ресурсы T0 (nolock) WHERE T0.КодРесурса = @id";

        /// <summary>
        ///     Строка запроса: Получает валюты
        /// </summary>
        public static string SELECT_Валюты = @"
SELECT Валюты.КодВалюты,
CASE WHEN 'ru'=(SELECT TOP(1) Язык FROM Инвентаризация.dbo.Сотрудники WHERE SID=SUSER_SID()) THEN Ресурсы.РесурсРус ELSE Ресурсы.РесурсЛат END AS Название
FROM Валюты INNER JOIN Ресурсы ON КодРесурса=КодВалюты";

        /// <summary>
        ///     Строка запроса: Получает валюту по коду
        /// </summary>
        public static string SELECT_ID_Валюты = @"
SELECT Валюты.КодВалюты, Ресурсы.РесурсРус AS Название FROM Валюты INNER JOIN Ресурсы ON КодРесурса=КодВалюты WHERE КодВалюты=@КодВалюты";

        /// <summary>
        ///     Строка запроса: Получает валюту по КодКлассификатораБукв
        /// </summary>
        public static string SELECT_ID_Валюты_ПоКодуКлассификатораБукв = @"
SELECT TOP 1 Валюты.КодВалюты FROM Валюты WHERE КодКлассификатораБукв=@КодКлассификатораБукв";

        /// <summary>
        ///     курс ЦБ РФ
        /// </summary>
        public static string SELECT_LoadKursCbrf = @"
SELECT TOP 1 Курс, Единиц
FROM КурсыВалют
	INNER JOIN Валюты ON КурсыВалют.КодВалюты = Валюты.КодВалюты
WHERE КурсыВалют.КодВалюты = {0} AND ДатаКурса <= '{1}'
	AND ((ТипЦБРФ = 0 AND Инвентаризация.dbo.fn_РабочиеДни(ДатаКурса, '{1}',188) = 0) OR (ТипЦБРФ = 1 AND '{1}' < DATEADD(month, 1, ДатаКурса+1)-1))
ORDER BY ДатаКурса DESC";

        /// <summary>
        ///     Строка запроса: Получение курса валют
        /// </summary>
        public const string SELECT_КурсВалюты =
            @"SELECT ДатаКурса, КодВалюты, Курс, Единиц, Состояние FROM КурсыВалют WHERE КодКурсаВалюты = @id";

        /// <summary>
        ///     Строка запроса: Получение курса выбранных валют за определенный период
        /// </summary>
        public static string SELECT_КурсыВалютЗаПериод = @"
SELECT КурсыВалют.КодКурсаВалюты, КурсыВалют.КодВалюты, Ресурсы.РесурсРус, CASE WHEN LEN(ISNULL(Ресурсы.РесурсЛат,'')) > 0 THEN Ресурсы.РесурсЛат ELSE Ресурсы.РесурсРус END AS РесурсЛат, КурсыВалют.ДатаКурса, CONVERT(varchar, КурсыВалют.ДатаКурса, 104) AS ДатаКурсаСтрока, КурсыВалют.Курс, КурсыВалют.Единиц, КурсыВалют.Состояние, Сотрудники.КодСотрудника, Сотрудники.ФИО, Сотрудники.FIO, КурсыВалют.Изменено
FROM КурсыВалют
	INNER JOIN Ресурсы ON КурсыВалют.КодВалюты = Ресурсы.КодРесурса
	LEFT OUTER JOIN Инвентаризация.dbo.Сотрудники Сотрудники ON Сотрудники.КодСотрудника = КурсыВалют.Изменил
WHERE КурсыВалют.КодВалюты IN (SELECT value FROM Инвентаризация.dbo.fn_SplitInts(@КодыВалют)) AND ДатаКурса >= @ДатаКурсаОт AND ДатаКурса <= @ДатаКурсаПо
ORDER BY ДатаКурса DESC";

        /// <summary>
        ///     Строка запроса: Добавление курса валют
        /// </summary>
        public const string INSERT_КурсВалют = @"
INSERT INTO КурсыВалют (ДатаКурса, КодВалюты, Курс, Единиц, Состояние) 
VALUES (@ДатаКурса, @КодВалюты, @Курс, @Единиц, @Состояние)";

        /// <summary>
        ///     Строка запроса: Обновление курса валют
        /// </summary>
        public const string UPDATE_КурсВалют = @"
UPDATE КурсыВалют SET ДатаКурса = @ДатаКурса, КодВалюты = @КодВалюты, Курс = @Курс, Единиц = @Единиц, Состояние = @Состояние WHERE КодКурсаВалюты = @id";

        /// <summary>
        ///     Строка запроса: Удаление курса валют
        /// </summary>
        public const string DELETE_КурсВалют = @"DELETE FROM КурсыВалют WHERE КодКурсаВалюты = @id";

        /// <summary>
        ///     Строка запроса: Получение среднего курса выбранных валют за определенный период
        /// </summary>
        public static string SELECT_СредниеКурсыВалютЗаПериод = @"
SET NOCOUNT ON 
IF object_id('tempdb..#Курсы') IS NOT NULL DROP TABLE #Курсы 
CREATE TABLE #Курсы(Код int PRIMARY KEY IDENTITY(1,1), КодВалюты int, ДатаКурса smalldatetime, Курс money) 
DECLARE @Валюты TABLE(КодВалюты int) 
DECLARE @КодВалюты int, @ТекущаяДата smalldatetime, @ТекущаяДатаS varchar(20)
INSERT @Валюты 
SELECT value FROM Инвентаризация.dbo.fn_SplitInts(@КодыВалют)   
INSERT #Курсы
SELECT КодВалюты, ДатаКурса, Курс
FROM КурсыВалют
WHERE	КодВалюты IN (SELECT КодВалюты FROM @Валюты X)
	AND ДатаКурса BETWEEN @ДатаКурсаОт AND @ДатаКурсаПо
ORDER BY КодВалюты, ДатаКурса
WHILE EXISTS(SELECT * FROM @Валюты) 
BEGIN 
    SET @ТекущаяДата = @ДатаКурсаОт 
    SELECT TOP 1 @КодВалюты = КодВалюты FROM @Валюты   
    WHILE @ТекущаяДата <= @ДатаКурсаПо 
    BEGIN
	    IF NOT EXISTS(SELECT * FROM #Курсы WHERE КодВалюты = @КодВалюты AND ДатаКурса = @ТекущаяДата)
	    BEGIN
		    INSERT #Курсы
		    SELECT TOP 1 КодВалюты, @ТекущаяДата, Курс FROM КурсыВалют WHERE КодВалюты = @КодВалюты AND ДатаКурса < @ТекущаяДата ORDER BY КурсыВалют.ДатаКурса DESC
	    END
	    SET @ТекущаяДата = DATEADD(d, 1, @ТекущаяДата) 
    END 
    DELETE @Валюты WHERE КодВалюты = @КодВалюты 
END
SELECT КодВалюты, Ресурсы.РесурсРус, CASE WHEN LEN(ISNULL(Ресурсы.РесурсЛат,'')) > 0 THEN Ресурсы.РесурсЛат ELSE Ресурсы.РесурсРус END AS РесурсЛат, CASE WHEN DATEDIFF(day, @ДатаКурсаОт , @ТекущаяДата) = 0 THEN 0 ELSE SUM(Курс)/DATEDIFF(day, @ДатаКурсаОт, @ТекущаяДата) END Курс 
FROM #Курсы X INNER JOIN Ресурсы ON X.КодВалюты = Ресурсы.КодРесурса 
GROUP BY КодВалюты, Ресурсы.РесурсРус, Ресурсы.РесурсЛат
ORDER BY Ресурсы.РесурсРус   
DROP TABLE #Курсы";

        /// <summary>
        ///     Строка запроса: Получение среднего курса выбранных валют за определенный период
        /// </summary>
        public static string SELECT_КроссКурсВалютЗаПериод = @"
;WITH EnumSel AS
(
	SELECT t1.ДатаКурса AS Дата, 
		(t1.Курс * t2.Единиц)/(t1.Единиц * t2.Курс) AS Курс, 
		ROW_NUMBER() OVER (ORDER BY t1.ДатаКурса DESC) AS Row#
	FROM КурсыВалют AS t1 
		INNER JOIN КурсыВалют AS t2 ON t1.ДатаКурса = t2.ДатаКурса
	WHERE t1.КодВалюты = @КодВалютыИсточник 
		AND t2.КодВалюты = @КодВалютыЦель 
		AND t1.ДатаКурса >= DATEADD(d, -14, @ДатаКурсаОт) 
		AND t1.ДатаКурса <= @ДатаКурсаПо
)
SELECT CurRows.Дата, CurRows.Курс,
CASE WHEN PrevRows.Курс IS NOT NULL OR PrevRows.Курс > 0 THEN (CurRows.Курс-PrevRows.Курс)*100/PrevRows.Курс ELSE 0 END AS Изменение
FROM EnumSel AS CurRows
	LEFT JOIN EnumSel AS PrevRows ON CurRows.Row# = PrevRows.Row# - 1
WHERE CurRows.Дата >= @ДатаКурсаОт";

        /// <summary>
        ///     Строка запроса: Получение последнего курса выбранной валюты
        /// </summary>
        public static string SELECT_ПоследнийКурсВалюты =
            @"SELECT TOP 1 Курс, Единиц FROM КурсыВалют WHERE КодВалюты = @КодВалюты ORDER BY ДатаКурса DESC";

        /// <summary>
        ///     Строка запроса: Получение ресурсов
        /// </summary>
        public const string SELECT_Ресурсы = @"
SELECT {0}  T0.КодРесурса, ISNULL(NULLIF(T0.РесурсРус,''),'#' + CONVERT(varchar,T0.КодРесурса)) РесурсРус, T0.РесурсЛат, T0.РесурсRL,
            T0.КодЕдиницыИзмерения, T0.КодВидаПодакцизногоТовара, T0.Точность, T0.СпецНДС, T0.Parent, T0.L, T0.R, T0.Изменено
FROM    Ресурсы T0 (nolock)";

        /// <summary>
        ///     Строка запроса: Поиск ресурса по коду
        /// </summary>
        public static string SELECT_ID_Ресурс =
            string.Format(@"{0} WHERE T0.КодРесурса = @id", string.Format(SELECT_Ресурсы, ""));

        /// <summary>
        ///     Строка запроса: Получает все валюты
        /// </summary>
        //         public static string SELECT_Ресурсы_Валюты = @"
        //SELECT  child.КодРесурса, child.РесурсРус, u.ЕдиницаРус, u.ЕдиницаЛат, child.Точность 
        //FROM    Ресурсы parent (nolock) INNER JOIN 
        //        Ресурсы child (nolock) ON parent.L < child.L AND parent.R > child.R LEFT JOIN 
        //        ЕдиницыИзмерения u (nolock) ON child.КодЕдиницыИзмерения = u.КодЕдиницыИзмерения WHERE child.Parent = 1";
        public static string SELECT_Ресурсы_Валюты = @"
SELECT Ресурсы.КодРесурса, Ресурсы.РесурсРус, u.ЕдиницаРус, u.ЕдиницаЛат, Ресурсы.Точность,
	Валюты.КодКлассификатораЦифр AS OKV_ID_Digital, Валюты.КодКлассификатораБукв AS OKV_ID_Literal, Ресурсы.РесурсЛат
FROM Валюты
	INNER JOIN Ресурсы ON Валюты.КодВалюты = Ресурсы.КодРесурса
	INNER JOIN ЕдиницыИзмерения u ON Ресурсы.КодЕдиницыИзмерения = u.КодЕдиницыИзмерения
ORDER BY Ресурсы.L";

        /// <summary>
        ///     Строка запроса: Получение подчиненных ресурсов
        /// </summary>
        public static string SELECT_Ресурс_Подчиненные =
            string.Format(@"{0} WHERE T0.L >= @leftKey AND T0.R <= @rightKey ORDER BY T0.L",
                string.Format(SELECT_Ресурсы, ""));

        /// <summary>
        ///     Строка запроса: Получение единицы измерения
        /// </summary>
        public const string SELECT_ID_ЕдиницаИзмерения =
            @"SELECT * FROM ЕдиницыИзмерения WHERE КодЕдиницыИзмерения=@id";

        #endregion

        #region Склады

        /// <summary>
        ///     Хранимая процедура: Поиск склада
        /// </summary>
        public const string SP_Склады_Поиск_NEW = "sp_Склады_Поиск_NEW";

        /// <summary>
        ///     Хранимая процедура: Сохранение склада
        /// </summary>
        public const string SP_Лица_InsUpd_Склады = "sp_Лица_InsUpd_Склады";

        /// <summary>
        ///     Строка запроса: Типы складов
        /// </summary>
        public const string SELECT_ТипыСкладов =
            @"SELECT {0} T0.КодТипаСклада, T0.ТипСклада, T0.Псевдоним, T0.КорневойРесурс, T0.Примечание FROM ТипыСкладов T0 (nolock)";

        /// <summary>
        ///     Строка запроса: Поиск типа склада по коду
        /// </summary>
        public static string SELECT_ID_ТипСклада =
            string.Format(@"{0} WHERE T0.КодТипаСклада = @id", string.Format(SELECT_ТипыСкладов, ""));

        /// <summary>
        ///     Строка запроса: Поиск склада
        /// </summary>
        public const string SELECT_Склад = @"
SELECT {0} КодСклада, Склад, COALESCE(NULLIF(Склад, '') + '/' + NULLIF(IBAN, ''), NULLIF(Склад, ''), NULLIF(IBAN, ''), '_____________________') AS Название
FROM    vwСклады T0 (nolock)";

        /// <summary>
        ///     Строка запроса: Поиск склада
        /// </summary>
        public const string SELECT_Склад_Ext = @"
SELECT {0} * FROM (SELECT [T10].[КодСклада], [T10].[Склад], [T10].[IBAN], [T10].[КодТипаСклада], [T10].[КодМестаХранения], [T10].[КодРесурса],  
        [T10].[КодХранителя],  [T10].[КодРаспорядителя],  [T10].[КодПодразделенияРаспорядителя], [T10].[КодДоговора], [T10].[Филиал], [T10].[Примечание], [T10].[Изменил], 
        [T10].[Изменено], ТС.Псевдоним, Ресурсы.РесурсРус Ресурс,
        Склад + CASE WHEN Склад <> '' AND IBAN <> '' THEN '/' ELSE '' END + IBAN  СкладFull, Склад Sort, Хранители.Кличка Хранитель, Распорядители.Кличка Распорядитель,
        [T10].От,
        [T10].До
FROM vwСклады T10 (nolock)
INNER JOIN ТипыСкладов ТС ON ТС.КодТипаСклада = T10.КодТипаСклада
INNER JOIN Ресурсы (nolock) ON Ресурсы.КодРесурса = T10.КодРесурса
LEFT JOIN vwЛица Хранители (nolock) ON Хранители.КодЛица = T10.КодХранителя LEFT JOIN vwЛица Распорядители (nolock) ON Распорядители.КодЛица = T10.КодРаспорядителя) T0 
";


        /// <summary>
        ///     Строка запроса: Последнее изменение склада
        /// </summary>
        public const string SELECT_Склад_LastChanged =
            @"SELECT T0.Изменено FROM vwСклады T0 (nolock) WHERE КодСклада=@id";

        /// <summary>
        ///     Строка запроса: Поиск склада по ID
        /// </summary>
        public const string SELECT_ID_Склад = @"
SELECT {0} КодСклада, Склад, COALESCE( NULLIF(Склад, '') + '/' + NULLIF(IBAN, ''), NULLIF(Склад, ''), NULLIF(IBAN, ''), '_____________________') AS Название
FROM    vwСклады T0 (nolock) WHERE КодСклада=@КодСклада";

        /// <summary>
        ///     Строка запроса: Поиск склада по ID
        /// </summary>
        public const string SELECT_ID_СкладПодробно = @"
SELECT {0} КодСклада, Склад, COALESCE( NULLIF(Склад, '') + '/' + NULLIF(IBAN, ''), NULLIF(Склад, ''), NULLIF(IBAN, ''), '_____________________') AS Название,
IBAN, КодТипаСклада, КодМестаХранения, КодРесурса, КодХранителя, КодРаспорядителя, КодПодразделенияРаспорядителя, КодДоговора, Филиал, Примечание, От, До, Изменено, Изменил
FROM    vwСклады T0 (nolock) WHERE КодСклада=@КодСклада";

        /// <summary>
        ///     Лица склада склада действуют на дату
        /// </summary>
        public const string SELECT_TEST_ЛицаСкладаДействуют = @"
IF (@КодХранителя IS NULL OR EXISTS( SELECT NULL FROM fn_ДействующиеЛица(@Дата) WHERE @КодХранителя=КодЛица))
AND (@КодРаспорядителя IS NULL OR EXISTS( SELECT NULL FROM fn_ДействующиеЛица(@Дата) WHERE @КодРаспорядителя=КодЛица))
SELECT 1
ELSE
SELECT 0";

        /// <summary>
        ///     Строка запроса: Поиск параметров склада по ID
        /// </summary>
        public const string SELECT_СкладПараметры = @"
SELECT КодСклада, От , DATEADD(day, -1, До) AS По, Склад, IBAN, КодТипаСклада, КодМестаХранения, КодРесурса,
КодХранителя, КодРаспорядителя, КодПодразделенияРаспорядителя, КодДоговора, Филиал, Примечание, Изменил, Изменено
FROM vwСклады WHERE КодСклада=@КодСклада";

        /// <summary>
        ///     Строка запроса: Список банковских счетов компании
        /// </summary>
        public const string SELECT_БанковскиеСчетаКомпании = @"
SELECT	КодСклада, ТипыСкладов.ТипСклада Тип, Склад + CASE WHEN Склад <>'' AND IBAN <> '' THEN '/' ELSE '' END + IBAN Счет, ЕдиницыИзмерения.ЕдиницаРус Валюта,
    vwСклады.КодХранителя КодБанка,
	ISNULL(Банки.Кличка, '#' + CONVERT(varchar, vwСклады.КодХранителя)) Банк
FROM	vwСклады INNER JOIN 
	ТипыСкладов ON vwСклады.КодТипаСклада = ТипыСкладов.КодТипаСклада INNER JOIN
	Ресурсы ON vwСклады.КодРесурса = Ресурсы.КодРесурса INNER JOIN 
	ЕдиницыИзмерения ON Ресурсы.КодЕдиницыИзмерения = ЕдиницыИзмерения.КодЕдиницыИзмерения LEFT JOIN
	vwЛица Банки ON vwСклады.КодХранителя = Банки.КодЛица
WHERE	КодРаспорядителя = @КодРаспорядителя 
	AND ISNULL(От, '19800101') <= @Дата AND @Дата < ISNULL(До, '20500101')
	AND vwСклады.КодТипаСклада > 0 AND vwСклады.КодТипаСклада < 6
ORDER BY vwСклады.КодТипаСклада, Банк
";

        /// <summary>
        ///     Строка запроса: Определяет сколько разных ресурсов в переданном списке складов
        /// </summary>
        public const string SELECT_КоличествоВалютВСчетахКомпании = @"
SELECT  COUNT(DISTINCT КодРесурса) N 
FROM	vwСклады 
WHERE	КодСклада IN(SELECT value FROM Инвентаризация.dbo.fn_SplitInts(@accountIds))
        AND ISNULL(От, '19800101') <= @Дата AND @Дата < ISNULL(До, '20500101') 
        AND (vwСклады.КодХранителя IS NULL OR EXISTS( SELECT NULL FROM dbo.fn_ДействующиеЛица(@Дата) X WHERE vwСклады.КодХранителя=X.КодЛица))
        AND (vwСклады.КодРаспорядителя IS NULL OR EXISTS( SELECT NULL FROM dbo.fn_ДействующиеЛица(@Дата) X WHERE vwСклады.КодРаспорядителя=X.КодЛица))
";

        /// <summary>
        ///     Строка запроса: Определяет сколько разных ресурсов в переданном списке складов
        /// </summary>
        public const string SELECT_РаспорядительИмеетСкладыУказанныхТипов = @"
IF EXISTS(
SELECT * 
FROM    vwСклады
WHERE   ISNULL(От, '19800101') <= @Дата AND @Дата < ISNULL(До, '20500101') 
        AND КодТипаСклада IN(SELECT value FROM Инвентаризация.dbo.fn_SplitInts(@ТипыСкладов))
        AND КодРаспорядителя = @КодРаспорядителя
        AND (vwСклады.КодХранителя IS NULL OR EXISTS( SELECT NULL FROM dbo.fn_ДействующиеЛица(@Дата) X WHERE vwСклады.КодХранителя=X.КодЛица))
        AND (vwСклады.КодРаспорядителя IS NULL OR EXISTS( SELECT NULL FROM dbo.fn_ДействующиеЛица(@Дата) X WHERE vwСклады.КодРаспорядителя=X.КодЛица))
)
    SELECT 1
ELSE
    SELECT 0
";


        /// <summary>
        ///     Строка запроса: Возвращает список ресурсов складов компании
        /// </summary>
        public const string SELECT_ВалютыВСчетахКомпании = @"
SELECT  DISTINCT КодРесурса
FROM	vwСклады 
WHERE	ISNULL(От, '19800101') <= @Дата AND @Дата < ISNULL(До, '20500101') 
        AND КодТипаСклада IN(SELECT value FROM Инвентаризация.dbo.fn_SplitInts(@ТипыСкладов))
        AND КодРаспорядителя = @КодРаспорядителя
        AND (vwСклады.КодХранителя IS NULL OR EXISTS( SELECT NULL FROM dbo.fn_ДействующиеЛица(@Дата) X WHERE vwСклады.КодХранителя=X.КодЛица))
        AND (vwСклады.КодРаспорядителя IS NULL OR EXISTS( SELECT NULL FROM dbo.fn_ДействующиеЛица(@Дата) X WHERE vwСклады.КодРаспорядителя=X.КодЛица))
";

        /// <summary>
        ///     Строка запроса: Поиск складов по названию
        /// </summary>
        public const string SELECT_ПоискСкладовПоНазванию = @"
SET @searchText = RTRIM(LTRIM(Инвентаризация.dbo.fn_ReplaceKeySymbols(Инвентаризация.dbo.fn_SplitWords(@searchText))))
WHILE CHARINDEX('  ',@searchText) > 0 SET @searchText = REPLACE(@searchText,'  ',' ')

SET @searchText='%' + REPLACE(@searchText,' ','% ') + '%'
SELECT КодСклада
FROM Справочники.dbo.vwСклады Склады
	LEFT OUTER JOIN Справочники.dbo.vwЛица Хранители ON Хранители.КодЛица = Склады.КодХранителя
WHERE (Склад +' ' + IBAN + ' ' +Хранители.Кличка) LIKE @searchText
";


        /// <summary>
        ///     ПоследнийСчетПоставщикаВТТН
        /// </summary>
        public const string SELECT_ПоследнийСчетПоставщикаВТТН = @"
DECLARE @КодСклада int
SET @КодВалюты = ISNULL(@КодВалюты,183)
SET @ДатаДокумента = DATEADD(month, -1,ISNULL(@ДатаДокумента, GETDATE()))

SELECT	TOP 1 @КодСклада = КодСклада1 
FROM	vwДокументыДокументыДанные (nolock)
WHERE	КодТипаДокумента = 2145 AND КодЛица1 = @КодПоставщика AND КодРесурса1 = @КодВалюты AND ДатаДокумента >= @ДатаДокумента 
ORDER BY ДатаДокумента DESC, _КодДокумента DESC  

SELECT @КодСклада КодСклада
";

        #endregion

        #region Транспорт

        /// <summary>
        ///     Строка запроса: Получение транспортных узлов
        /// </summary>
        public const string SELECT_ТранспортныеУзлы = @"SELECT {0} * FROM dbo.ТранспортныеУзлы T0 (nolock)";

        /// <summary>
        ///     Строка запроса: Транспортные узлы по коду
        /// </summary>
        public static string SELECT_ID_ТранспортныеУзлы = string.Format(@"{0} WHERE КодТранспортногоУзла = @id",
            string.Format(SELECT_ТранспортныеУзлы, ""));

        /// <summary>
        ///     Строка запроса: Транспортный узел по коду
        /// </summary>
        public static string SELECT_ID_ТранспортныйУзел = @"
SELECT TOP 1 T0.КодТранспортногоУзла, T0.Название, T0.Название+ISNULL(' ['+ЖД.ЖелезнаяДорога +']','') НазваниеЖД, 
            ВТ.ВидТранспорта Транспорт, T0.КодЖелезнойДороги,T0.КодВидаТранспорта		
FROM [Справочники].[dbo].ТранспортныеУзлы T0
LEFT OUTER JOIN [Справочники].[dbo].ЖелезныеДороги ЖД ON T0.КодЖелезнойДороги=ЖД.КодЖелезнойДороги
INNER JOIN [Справочники].[dbo].ВидыТранспорта ВТ ON  T0.КодВидаТранспорта=ВТ.КодВидаТранспорта	
WHERE T0.КодТранспортногоУзла= {0}
";

        /// <summary>
        ///     Строка запроса: Список для выбора транспортных узлов
        /// </summary>
        public static string SELECT_ТранспортныеУзлыВыбор(string search, string type, int maxItemsInQuery)
        {
            return string.Format(
                @"SELECT TOP {0} T0.КодТранспортногоУзла, T0.Название+ISNULL('['+ЖД.ЖелезнаяДорога +']','') Название, ВТ.ВидТранспорта Транспорт, T0.КодЖелезнойДороги,T0.КодВидаТранспорта		
FROM [Справочники].[dbo].ТранспортныеУзлы T0
LEFT OUTER JOIN [Справочники].[dbo].ЖелезныеДороги ЖД ON T0.КодЖелезнойДороги=ЖД.КодЖелезнойДороги
INNER JOIN [Справочники].[dbo].ВидыТранспорта ВТ ON  T0.КодВидаТранспорта=ВТ.КодВидаТранспорта	
WHERE (1=1) {1} {2} ORDER BY T0.Название,T0.КодВидаТранспорта", maxItemsInQuery,
                !string.IsNullOrEmpty(type) ? @" and T0.КодВидаТранспорта = " + type : "",
                !string.IsNullOrEmpty(search)
                    ? @" and (' ' + (CASE WHEN T0.КодВидаТранспорта = 1 THEN RIGHT((T0.КодТранспортногоУзла+1000000),6) ELSE CONVERT(varchar,T0.КодТранспортногоУзла) END) + ' ' +
T0.НазваниеRL LIKE N'% ' + Инвентаризация.dbo.fn_ReplaceRusLat(N'" + search + "') + '%')"
                    : "");
        }

        #endregion

        #region Единицы измерения

        /// <summary>
        ///     Строка запроса: Получить Дополнительные Единицы измерения
        /// </summary>
        public const string SELECT_ЕдиницыИзмеренияДоп = @"SELECT 
	            КодЕдиницыИзмеренияДополнительной, КодРесурса, КодЕдиницыИзмерения, Точность, КоличествоЕдиниц, КоличествоЕдиницОсновных, Коэффициент, МассаБрутто
                FROM ЕдиницыИзмеренияДополнительные WHERE КодРесурса = @КодРесурса";

        /// <summary>
        ///     Строка запроса: Получить Дополнительные Единицы измерения
        /// </summary>
        public const string SELECT_ID_ЕдиницаИзмеренияДополнительные = @"
        SELECT * FROM (
	        SELECT 10000001+ЕдиницыИзмерения.КодЕдиницыИзмерения КодЕдиницыИзмеренияДополнительной, Ресурсы.КодРесурса, ЕдиницыИзмерения.КодЕдиницыИзмерения,
		        Описание, ЕдиницаРус, ЕдиницаЛат, 1 Коэффициент, '' ЕдиницаРусОсн, '' ЕдиницаЛатОсн, 1 Порядок
	        FROM Ресурсы
		        INNER JOIN ЕдиницыИзмерения ON Ресурсы.КодЕдиницыИзмерения=ЕдиницыИзмерения.КодЕдиницыИзмерения
            WHERE @КодРесурса = '' OR Ресурсы.КодРесурса = @КодРесурса
	        UNION
	        SELECT КодЕдиницыИзмеренияДополнительной, Ресурсы.КодРесурса, Доп.КодЕдиницыИзмерения,
		        Доп.Описание, Доп.ЕдиницаРус, Доп.ЕдиницаЛат, ЕдиницыИзмеренияДополнительные.Коэффициент, Осн.ЕдиницаРус ЕдиницаРусОсн, Осн.ЕдиницаЛат ЕдиницаЛатОсн , 2 Порядок
	        FROM ЕдиницыИзмеренияДополнительные
		        INNER JOIN ЕдиницыИзмерения Доп ON Доп.КодЕдиницыИзмерения=ЕдиницыИзмеренияДополнительные.КодЕдиницыИзмерения
		        INNER JOIN Ресурсы ON ЕдиницыИзмеренияДополнительные.КодРесурса=Ресурсы.КодРесурса
		        INNER JOIN ЕдиницыИзмерения Осн ON Ресурсы.КодЕдиницыИзмерения=Осн.КодЕдиницыИзмерения
            WHERE @КодРесурса = '' OR Ресурсы.КодРесурса = @КодРесурса
        ) T0  WHERE КодЕдиницыИзмеренияДополнительной = @id";

        /// <summary>
        ///     Строка запроса: Получить Дополнительные Единицы измерения
        /// </summary>
        public const string SELECT_ID_ЕдиницаИзмеренияДополнительные_ПоКоэффициенту = @"
        SELECT * FROM (
	        SELECT 10000001+ЕдиницыИзмерения.КодЕдиницыИзмерения КодЕдиницыИзмеренияДополнительной, Ресурсы.КодРесурса, ЕдиницыИзмерения.КодЕдиницыИзмерения,
		        Описание, ЕдиницаРус, ЕдиницаЛат, 1 Коэффициент, '' ЕдиницаРусОсн, '' ЕдиницаЛатОсн, 1 Порядок
	        FROM Ресурсы
		        INNER JOIN ЕдиницыИзмерения ON Ресурсы.КодЕдиницыИзмерения=ЕдиницыИзмерения.КодЕдиницыИзмерения
            WHERE @КодРесурса = '' OR Ресурсы.КодРесурса = @КодРесурса
	        UNION
	        SELECT КодЕдиницыИзмеренияДополнительной, Ресурсы.КодРесурса, Доп.КодЕдиницыИзмерения,
		        Доп.Описание, Доп.ЕдиницаРус, Доп.ЕдиницаЛат, ЕдиницыИзмеренияДополнительные.Коэффициент, Осн.ЕдиницаРус ЕдиницаРусОсн, Осн.ЕдиницаЛат ЕдиницаЛатОсн , 2 Порядок
	        FROM ЕдиницыИзмеренияДополнительные
		        INNER JOIN ЕдиницыИзмерения Доп ON Доп.КодЕдиницыИзмерения=ЕдиницыИзмеренияДополнительные.КодЕдиницыИзмерения
		        INNER JOIN Ресурсы ON ЕдиницыИзмеренияДополнительные.КодРесурса=Ресурсы.КодРесурса
		        INNER JOIN ЕдиницыИзмерения Осн ON Ресурсы.КодЕдиницыИзмерения=Осн.КодЕдиницыИзмерения
            WHERE @КодРесурса = '' OR Ресурсы.КодРесурса = @КодРесурса
        ) T0  WHERE КодЕдиницыИзмерения = @КодЕдиницыИзмерения AND Коэффициент = @Коэффициент";

        /// <summary>
        ///     Строка запроса: Получить Единицы измерения
        /// </summary>
        public const string SELECT_ЕдиницыИзмерения = @"SELECT КодЕдиницыИзмерения, Описание FROM ЕдиницыИзмерения";

        /// <summary>
        ///     Строка запроса: Получить Единицы измерения дополнительные для одного ресурса
        /// </summary>
        public const string SELECT_ЕдиницыИзмеренияДополнительные = @"
        SELECT * FROM (
	        SELECT 10000001+ЕдиницыИзмерения.КодЕдиницыИзмерения КодЕдиницыИзмеренияДополнительной, Ресурсы.КодРесурса, ЕдиницыИзмерения.КодЕдиницыИзмерения,
		        Описание, ЕдиницаРус, ЕдиницаЛат, 1 Коэффициент, '' ЕдиницаРусОсн, '' ЕдиницаЛатОсн, 1 Порядок
	        FROM Ресурсы
		        INNER JOIN ЕдиницыИзмерения ON Ресурсы.КодЕдиницыИзмерения=ЕдиницыИзмерения.КодЕдиницыИзмерения
            WHERE Ресурсы.КодРесурса = @КодРесурса
	        UNION
	        SELECT КодЕдиницыИзмеренияДополнительной, Ресурсы.КодРесурса, Доп.КодЕдиницыИзмерения,
		        Доп.Описание, Доп.ЕдиницаРус, Доп.ЕдиницаЛат, ЕдиницыИзмеренияДополнительные.Коэффициент, Осн.ЕдиницаРус ЕдиницаРусОсн, Осн.ЕдиницаЛат ЕдиницаЛатОсн , 2 Порядок
	        FROM ЕдиницыИзмеренияДополнительные
		        INNER JOIN ЕдиницыИзмерения Доп ON Доп.КодЕдиницыИзмерения=ЕдиницыИзмеренияДополнительные.КодЕдиницыИзмерения
		        INNER JOIN Ресурсы ON ЕдиницыИзмеренияДополнительные.КодРесурса=Ресурсы.КодРесурса
		        INNER JOIN ЕдиницыИзмерения Осн ON Ресурсы.КодЕдиницыИзмерения=Осн.КодЕдиницыИзмерения
            WHERE Ресурсы.КодРесурса = @КодРесурса
        ) T0";

        /// <summary>
        ///     Строка запроса: Получить Единицы измерения дополнительные для нескольких ресурсов
        /// </summary>
        public const string SELECT_ЕдиницыИзмеренияДополнительныеНесколькоРесурсов = @"
        SELECT * FROM (SELECT 10000001 КодЕдиницыИзмеренияДополнительной, -1 КодРесурса, -1 КодЕдиницыИзмерения, '' Описание, '' ЕдиницаРус, '' ЕдиницаЛат, 1 Коэффициент, 1 Порядок
        UNION
        SELECT КодЕдиницыИзмеренияДополнительной, КодРесурса, Доп.КодЕдиницыИзмерения, Доп.Описание, Доп.ЕдиницаРус, Доп.ЕдиницаЛат, ЕдиницыИзмеренияДополнительные.Коэффициент , 2 Порядок
        FROM ЕдиницыИзмеренияДополнительные
	        INNER JOIN ЕдиницыИзмерения Доп ON Доп.КодЕдиницыИзмерения=ЕдиницыИзмеренияДополнительные.КодЕдиницыИзмерения
        ) T0";

        #endregion

        #region Статьи Движения Денежных Средств

        /// <summary>
        ///     Получение информации для дерева
        /// </summary>
        public static string SELECT_СтатьиДвиженияДенежныхСредствДанныеДляДерева = @"
SELECT  T0.КодСтатьиДвиженияДенежныхСредств id, T0.R-L ЕстьДети, T0.СтатьяДвиженияДенежныхСредств text, ISNULL(T0.Parent,0) ParentId, '' Фильтр, 
        ISNULL(rr.ВидДвиженияДенежныхСредств,0) ВидДвиженияДенежныхСредств, T0.[Изменил], s.Сотрудник, T0.[Изменено]
FROM    СтатьиДвиженияДенежныхСредств T0 
LEFT JOIN  ВидыДвиженийДенежныхСредств rr ON T0.КодВидаДвиженияДенежныхСредств = rr.КодВидаДвиженияДенежныхСредств
LEFT JOIN Инвентаризация.dbo.Сотрудники s ON s.КодСотрудника = T0.Изменил
WHERE   ((@Потомки = 1 AND ((@Код = 0 AND T0.Parent IS NULL) OR (@Код <> 0 AND T0.Parent = @Код)))
        OR (@Потомки = 0 AND T0.КодСтатьиДвиженияДенежныхСредств = @Код))
        OR (@Потомки = 2 AND (T0.КодСтатьиДвиженияДенежныхСредств IN ({1}) OR T0.Parent IN ({1}))) 
        @OFF_CONDITION
        @ADDWHERE
ORDER BY T0.{0}
";

        /// <summary>
        ///     Получение информации для дерева
        /// </summary>
        public static string SELECT_СтатьиДвиженияДенежныхСредствДанныеДляДерева_State = @"
SET NOCOUNT ON

IF OBJECT_ID('tempdb.#Статьи') IS NOT NULL DROP TABLE #Статьи
CREATE TABLE #Статьи(
        КодЗаписи int IDENTITY(1,1),
        [КодСтатьиДвиженияДенежныхСредств] [int],
        СтатьяДвиженияДенежныхСредств [varchar](300),       
        [Parent] [int],
        [L] [int],
        [R] [int],
        [Изменил] [int],
        [Изменено] [datetime],  
        BitMask tinyint
)

INSERT #Статьи
SELECT	T0.[КодСтатьиДвиженияДенежныхСредств],
        T0.СтатьяДвиженияДенежныхСредств,      
        T0.[Parent],
        T0.[L],
        T0.[R],
        T0.[Изменил],
        T0.[Изменено], 
        1 BitMask
FROM	СтатьиДвиженияДенежныхСредств T0 
WHERE EXISTS(SELECT * FROM СтатьиДвиженияДенежныхСредств Child 
					WHERE	Child.КодСтатьиДвиженияДенежныхСредств IN ({1})
						AND T0.L <=	Child.L AND T0.R>=Child.R) 
                        @ADDWHERE
      AND NOT EXISTS(SELECT * FROM #Статьи X WHERE T0.КодСтатьиДвиженияДенежныхСредств = X.КодСтатьиДвиженияДенежныхСредств)
ORDER BY T0.L

INSERT #Статьи
SELECT	T0.[КодСтатьиДвиженияДенежныхСредств],
        T0.СтатьяДвиженияДенежныхСредств,      
        T0.[Parent],
        T0.[L],
        T0.[R],
        T0.[Изменил],
        T0.[Изменено], 
        2 BitMask
FROM	СтатьиДвиженияДенежныхСредств Parent
LEFT JOIN СтатьиДвиженияДенежныхСредств T0 ON T0.Parent = Parent.КодСтатьиДвиженияДенежныхСредств
WHERE Parent.КодСтатьиДвиженияДенежныхСредств IN ({1}) AND NOT EXISTS(SELECT * FROM #Статьи X WHERE T0.КодСтатьиДвиженияДенежныхСредств = X.КодСтатьиДвиженияДенежныхСредств)
@ADDWHERE
ORDER BY Parent.L

INSERT #Статьи 
SELECT  [КодСтатьиДвиженияДенежныхСредств],
        СтатьяДвиженияДенежныхСредств,      
        [Parent],
        [L],
        [R],
        [Изменил],
        [Изменено], 
        4 BitMask
FROM    СтатьиДвиженияДенежныхСредств T0
WHERE   Parent IS NULL                                  
        AND NOT EXISTS(SELECT * FROM #Статьи X WHERE T0.КодСтатьиДвиженияДенежныхСредств = X.КодСтатьиДвиженияДенежныхСредств) 
        @ADDWHERE

SELECT #Статьи.[КодСтатьиДвиженияДенежныхСредств] id,
       #Статьи.СтатьяДвиженияДенежныхСредств text,      
       #Статьи.[Parent] ParentId,
       #Статьи.[L],
       #Статьи.[R],
       #Статьи.[Изменил],
       s.Сотрудник,
       #Статьи.[Изменено], 
       #Статьи.BitMask,
       #Статьи.R-#Статьи.L ЕстьДети
FROM #Статьи
INNER JOIN СтатьиДвиженияДенежныхСредств r ON #Статьи.КодСтатьиДвиженияДенежныхСредств = r.КодСтатьиДвиженияДенежныхСредств
LEFT JOIN Инвентаризация.dbo.Сотрудники s ON s.КодСотрудника = r.Изменил
ORDER BY #Статьи.{0}
DROP TABLE #Статьи
";

        /// <summary>
        ///     Строка запроса: Фильтрация статей движения денежных средств
        /// </summary>
        public static string SELECT_СтатьиДвиженияДенежныхСредствДанныеДляДерева_Фильтр = @"
DECLARE @МаксимальноеКоличествоНайденных int = 100
SET NOCOUNT ON
               
IF OBJECT_ID('tempdb..#Статьи') IS NOT NULL DROP TABLE #Статьи
--DECLARE @КоличествоНайденных int
CREATE TABLE #Статьи(
        TempID int IDENTITY(1,1),
        [КодСтатьиДвиженияДенежныхСредств] [int],
        СтатьяДвиженияДенежныхСредств [varchar](300),       
        [Parent] [int],
        [L] [int],
        [R] [int],
        [Изменил] [int],
        [Изменено] [datetime],  
        BitMask tinyint          
)

CREATE UNIQUE CLUSTERED INDEX PK_TempID ON #Статьи (TempID)

INSERT #Статьи
SELECT  [КодСтатьиДвиженияДенежныхСредств],
        СтатьяДвиженияДенежныхСредств,      
        [Parent],
        [L],
        [R],
        [Изменил],
        [Изменено], 
        1 BitMask
FROM    СтатьиДвиженияДенежныхСредств t1
WHERE   СтатьяДвиженияДенежныхСредств LIKE '{1}'
    AND ('{2}' = '-1' OR EXISTS (SELECT 1 FROM СтатьиДвиженияДенежныхСредств AS t2 WHERE t2.КодСтатьиДвиженияДенежныхСредств IN ({2}) AND t1.L >= t2.L AND t1.R <= t2.R))  
ORDER BY L
 
SET @КоличествоНайденных = @@ROWCOUNT
DELETE #Статьи WHERE TempID > @МаксимальноеКоличествоНайденных
 
UPDATE  Parent
SET     BitMask = BitMask ^ 2
FROM    #Статьи Parent
WHERE   EXISTS(SELECT * FROM #Статьи Child WHERE Parent.L < Child.L AND Parent.R > Child.R)
 
INSERT  #Статьи
SELECT  [КодСтатьиДвиженияДенежныхСредств],
        СтатьяДвиженияДенежныхСредств,      
        [Parent],
        [L],
        [R],
        [Изменил],
        [Изменено], 
        2 BitMask
FROM    СтатьиДвиженияДенежныхСредств Parent 
WHERE   EXISTS( SELECT * FROM #Статьи Child 
                WHERE Parent.L <= Child.L AND Parent.R>=Child.R)                                        
        AND NOT EXISTS(SELECT * FROM #Статьи X WHERE Parent.КодСтатьиДвиженияДенежныхСредств = X.КодСтатьиДвиженияДенежныхСредств)
 
UPDATE  #Статьи
SET     BitMask = BitMask ^ 4
WHERE   Parent IS NULL
 
INSERT #Статьи 
SELECT  [КодСтатьиДвиженияДенежныхСредств],
        СтатьяДвиженияДенежныхСредств,      
        [Parent],
        [L],
        [R],
        [Изменил],
        [Изменено], 
        4 BitMask
FROM    СтатьиДвиженияДенежныхСредств 
WHERE   (('{2}' = '-1' AND Parent IS NULL) OR КодСтатьиДвиженияДенежныхСредств IN ({2}))                                 
        AND NOT EXISTS(SELECT * FROM #Статьи X WHERE СтатьиДвиженияДенежныхСредств.КодСтатьиДвиженияДенежныхСредств = X.КодСтатьиДвиженияДенежныхСредств)
        
SELECT [КодСтатьиДвиженияДенежныхСредств] id,
        СтатьяДвиженияДенежныхСредств text,      
        [Parent] ParentId,
        [L],
        [R],
        [Изменил],
        [Изменено], 
        BitMask,
        R-L ЕстьДети
FROM #Статьи
ORDER BY {0}
DROP TABLE #Статьи
";

        /// <summary>
        ///     Строка запроса: Фильтрация статей движения денежных средств
        /// </summary>
        public static string SELECT_СтатьиДвиженияДенежныхСредствДанныеДляДерева_ФильтрExt = @"
DECLARE @МаксимальноеКоличествоНайденных int = 100
SET NOCOUNT ON
               
IF OBJECT_ID('tempdb..#Статьи') IS NOT NULL DROP TABLE #Статьи
--DECLARE @КоличествоНайденных int
CREATE TABLE #Статьи(
        TempID int IDENTITY(1,1),
        [КодСтатьиДвиженияДенежныхСредств] [int],
        СтатьяДвиженияДенежныхСредств [varchar](300),       
        [Parent] [int],
        [L] [int],
        [R] [int],
        [Изменил] [int],
        [Изменено] [datetime],  
        BitMask tinyint          
)

CREATE UNIQUE CLUSTERED INDEX PK_TempID ON #Статьи (TempID)

INSERT #Статьи
SELECT DISTINCT Id, text, Parent, L, R, Изменил, Изменено, BitMask FROM (
SELECT  T1.[КодСтатьиДвиженияДенежныхСредств],
        T1.[КодСтатьиДвиженияДенежныхСредств] Id,
        T1.СтатьяДвиженияДенежныхСредств,
        T1.СтатьяДвиженияДенежныхСредств text,      
        T1.[Parent],
        T1.[L],
        T1.[R],
        T1.[Изменил],
        empl.[Сотрудник],
        T1.[Изменено], 
        1 BitMask
        @ADDFIELD
FROM    СтатьиДвиженияДенежныхСредств T1
LEFT JOIN Инвентаризация.dbo.Сотрудники empl ON empl.КодСотрудника =  T1.Изменил
@ADDTABLE
WHERE ('{1}' = '-1' OR EXISTS (SELECT 1 FROM СтатьиДвиженияДенежныхСредств AS T2 WHERE T2.КодСтатьиДвиженияДенежныхСредств IN ({1}) AND T1.L >= T2.L AND T1.R <= T2.R))  
    @OFF_PARENT_CONDITION
) T0 @WHERE ORDER BY L

SET @КоличествоНайденных = @@ROWCOUNT
DELETE #Статьи WHERE TempID > @МаксимальноеКоличествоНайденных
 
UPDATE  Parent
SET     BitMask = BitMask ^ 2
FROM    #Статьи Parent
WHERE   EXISTS(SELECT * FROM #Статьи Child WHERE Parent.L < Child.L AND Parent.R > Child.R)
 
INSERT  #Статьи
SELECT  T1.[КодСтатьиДвиженияДенежныхСредств],
        T1.СтатьяДвиженияДенежныхСредств,      
        T1.[Parent],
        T1.[L],
        T1.[R],
        T1.[Изменил],
        T1.[Изменено], 
        2 BitMask
FROM    СтатьиДвиженияДенежныхСредств T1 
WHERE   EXISTS( SELECT * FROM #Статьи Child 
                WHERE T1.L <= Child.L AND T1.R>=Child.R)                                        
        AND NOT EXISTS(SELECT * FROM #Статьи X WHERE T1.КодСтатьиДвиженияДенежныхСредств = X.КодСтатьиДвиженияДенежныхСредств)
        @OFF_CONDITION
 
UPDATE  #Статьи
SET     BitMask = BitMask ^ 4
WHERE   Parent IS NULL
 
INSERT #Статьи 
SELECT  T1.[КодСтатьиДвиженияДенежныхСредств],
        T1.СтатьяДвиженияДенежныхСредств,      
        T1.[Parent],
        T1.[L],
        T1.[R],
        T1.[Изменил],
        T1.[Изменено], 
        4 BitMask
FROM    СтатьиДвиженияДенежныхСредств T1
WHERE   (('{1}' = '-1' AND Parent IS NULL) OR КодСтатьиДвиженияДенежныхСредств IN ({1}))
        AND NOT EXISTS(SELECT * FROM #Статьи X WHERE T1.КодСтатьиДвиженияДенежныхСредств = X.КодСтатьиДвиженияДенежныхСредств)
        @OFF_CONDITION
        
SELECT  #Статьи.[КодСтатьиДвиженияДенежныхСредств] id,
        #Статьи.СтатьяДвиженияДенежныхСредств text,      
        #Статьи.[Parent] ParentId,
        #Статьи.[L],
        #Статьи.[R],
        #Статьи.[Изменил],
        s.Сотрудник,
        #Статьи.[Изменено], 
        #Статьи.BitMask,
        #Статьи.R-#Статьи.L ЕстьДети
FROM #Статьи
INNER JOIN СтатьиДвиженияДенежныхСредств r ON #Статьи.КодСтатьиДвиженияДенежныхСредств = r.КодСтатьиДвиженияДенежныхСредств
LEFT JOIN Инвентаризация.dbo.Сотрудники s ON s.КодСотрудника = r.Изменил
ORDER BY #Статьи.{0}
DROP TABLE #Статьи
";
        /// <summary>
        ///     Получение детальной информации
        /// </summary>
        public static string SELECT_СтатьяДвиженияДенежныхСредств = @"
SELECT  T0.КодСтатьиДвиженияДенежныхСредств Id, T0.R-L ЕстьДети, T0.СтатьяДвиженияДенежныхСредств Text, ISNULL(T0.Parent,0) ParentId, ISNULL(T1.ВидДвиженияДенежныхСредств,0) ВидДвиженияДенежныхСредств
FROM    СтатьиДвиженияДенежныхСредств T0
LEFT JOIN  ВидыДвиженийДенежныхСредств T1 ON T0.КодВидаДвиженияДенежныхСредств = T1.КодВидаДвиженияДенежныхСредств
WHERE T0.КодСтатьиДвиженияДенежныхСредств = @Код 
";


        /// <summary>
        ///     Строка запроса: Получение денежных средств
        /// </summary>
        public const string SELECT_ДенежныеСредства = @"
SELECT {0} T0.КодСтатьиДвиженияДенежныхСредств, T0.СтатьяДвиженияДенежныхСредств, T0.КодВидаДвиженияДенежныхСредств, T0.Parent, T0.L, T0.R
FROM dbo.СтатьиДвиженияДенежныхСредств T0 (nolock)";

        /// <summary>
        ///     Строка запроса: Поиск денежных средств по коду
        /// </summary>
        public static string SELECT_ДенежныеСредстваПоID = @"
SELECT T0.КодСтатьиДвиженияДенежныхСредств, T0.СтатьяДвиженияДенежныхСредств, T0.КодВидаДвиженияДенежныхСредств, T0.Parent, T0.L, T0.R, ISNULL(T1.ВидДвиженияДенежныхСредств,'') ВидДвиженияДенежныхСредств,
dbo.fn_Tree_СтатьиДвиженияДенежныхСредств_FullPath(T0.КодСтатьиДвиженияДенежныхСредств,1) FullPath, Изменил, Изменено
FROM СтатьиДвиженияДенежныхСредств T0
LEFT JOIN  ВидыДвиженийДенежныхСредств T1 ON T0.КодВидаДвиженияДенежныхСредств = T1.КодВидаДвиженияДенежныхСредств
WHERE T0.КодСтатьиДвиженияДенежныхСредств = @Id ";

        /// <summary>
        ///     Получение информации видов движений денежных средств
        /// </summary>
        public static string SELECT_ВидыДвиженийДенежныхСредств = @"
SELECT  КодВидаДвиженияДенежныхСредств, ВидДвиженияДенежныхСредств, Название1С
FROM    ВидыДвиженийДенежныхСредств 
";

        /// <summary>
        ///     Строка запроса:  Получение информации видов движений денежных средств, отсортированных по
        ///     КодВидаДвиженияДенежныхСредств
        /// </summary>
        public static string SELECT_ВидыДвиженийДенежныхСредств_ID =
            SELECT_ВидыДвиженийДенежныхСредств + " ORDER BY КодВидаДвиженияДенежныхСредств";

        /// <summary>
        ///     Виды движения денежных средств,
        ///     отфильтрованные по ВидДвиженияДенежныхСредств и
        ///     отсортированные по КодВидаДвиженияДенежныхСредств
        /// </summary>
        public static string SELECT_ВидыДвиженийДенежныхСредств_Фильтр =
            SELECT_ВидыДвиженийДенежныхСредств +
            "WHERE ВидДвиженияДенежныхСредств LIKE '%' + @Название + '%' ORDER BY КодВидаДвиженияДенежныхСредств";

        /// <summary>
        ///     Добавить вид движения денежных средств и получить его идентификатор
        /// </summary>
        public const string INSERT_ВидыДвиженияДенежныхСредств = @"
INSERT ВидыДвиженийДенежныхСредств (КодВидаДвиженияДенежныхСредств, ВидДвиженияДенежныхСредств, Название1С) VALUES (@КодВидаДвиженияДенежныхСредств, @ВидДвиженияДенежныхСредств, @Название1С)
SELECT SCOPE_IDENTITY()";

        /// <summary>
        ///     Обновление вид движения денежных средств
        /// </summary>
        public const string UPDATE_ВидыДвиженияДенежныхСредств = @"
UPDATE ВидыДвиженийДенежныхСредств SET ВидДвиженияДенежныхСредств=@ВидДвиженияДенежныхСредств, Название1С=@Название1С WHERE КодВидаДвиженияДенежныхСредств=@КодВидаДвиженияДенежныхСредств
";

        /// <summary>
        ///     Строка запроса: Получение вида движения денежных средств
        /// </summary>
        public const string SELECT_ID_ВидДвиженияДенежныхСредств =
            @"SELECT * FROM ВидыДвиженийДенежныхСредств WHERE КодВидаДвиженияДенежныхСредств=@id";

        /// <summary>
        ///     Строка запроса: Удаление вида движения денежных средств
        /// </summary>
        public const string DELETE_ВидыДвиженияДенежныхСредств =
            @"DELETE FROM ВидыДвиженийДенежныхСредств WHERE КодВидаДвиженияДенежныхСредств=@КодВидаДвиженияДенежныхСредств";

        /// <summary>
        ///     Строка запроса: Удаление статьи движения денежных средств
        /// </summary>
        public const string DELETE_СтатьиДвиженияДенежныхСредств =
            @"DELETE FROM СтатьиДвиженияДенежныхСредств WHERE КодСтатьиДвиженияДенежныхСредств=@КодСтатьиДвиженияДенежныхСредств";

        /// <summary>
        ///     Добавить статью движения денежных средств и получить его идентификатор
        /// </summary>
        public const string INSERT_СтатьиДвиженияДенежныхСредств = @"
INSERT СтатьиДвиженияДенежныхСредств (СтатьяДвиженияДенежныхСредств, КодВидаДвиженияДенежныхСредств, Parent) VALUES (@СтатьяДвиженияДенежныхСредств, @КодВидаДвиженияДенежныхСредств, @Parent)
SELECT @@IDENTITY";

        /// <summary>
        ///     Обновление наименования расположения
        /// </summary>
        public const string UPDATE_СтатьиДвиженияДенежныхСредств = @"
UPDATE СтатьиДвиженияДенежныхСредств SET СтатьяДвиженияДенежныхСредств=@СтатьяДвиженияДенежныхСредств, КодВидаДвиженияДенежныхСредств=@КодВидаДвиженияДенежныхСредств WHERE КодСтатьиДвиженияДенежныхСредств=@КодСтатьиДвиженияДенежныхСредств
";

        #endregion

        #region Настройки
        /// <summary>
        ///     Строка запроса: Обновление актуального времени настроек
        /// </summary>
        public const string UPDATE_Настройки = @"
UPDATE  vwНастройки 
SET     Значение = '', Изменено = GETUTCDATE()
WHERE Параметр like @Параметр + '%' AND Изменено < @АктуальноеВремя";

        /// <summary>
        ///     Строка запроса: Настройки по коду лица
        /// </summary>
        public const string SELECT_НастройкиПоКодуЛица = @"

        DECLARE @КодЛица varchar(10)
        SET @КодЛица = (SELECT Значение FROM vwНастройки WHERE Параметр = 'PersonCurrent' AND КодНастройкиКлиента = 0)
        SELECT @КодЛица КодЛица
";

        #endregion

        //++++++++++++++++++ Документы ++++++++++++++++++

        #region Типы документов

        /// <summary>
        ///     Строка запроса: Получение типов документов
        /// </summary>
        public const string SELECT_ТипыДокументов = @"
--получение информации о типе документа
SELECT {0}  
        T0.[КодТипаДокумента], T0.[ТипДокумента], T0.[TypeDoc], T0.[ТОписание], T0.[TDescription],
        T0.[ИмяПредставления], T0.[NameExist], T0.[НаличиеФормы], T0.[URL], T0.[SearchURL], T0.[HelpURL],
        T0.[ТипАвтогенерацииНомера], T0.[АлгоритмАвтогенерацииНомера], T0.[АвтоДата], T0.[УсловиеПохожести],
        T0.[Исходящий], T0.[Финансовый], T0.[Бухгалтерский], T0.[БухгалтерскийСправочник], T0.[СоздаватьЗащищеным], T0.[ТипОтвета],
        T0.[Changed], T0.[Parent], T0.[L], T0.[R], T0.[Изменил], T0.[Изменено]
FROM ТипыДокументов T0 (nolock) ";

        /// <summary>
        ///     Строка запроса: Получение типа документа по ID
        /// </summary>
        public static readonly string SELECT_ID_ТипДокумента = string.Format("{0} WHERE T0.[КодТипаДокумента] = @id",
            string.Format(SELECT_ТипыДокументов, ""));

        /// <summary>
        ///     Сторока запроса: Непосредственные потомки
        /// </summary>
        public static string SELECT_ТипыДокументов_НепосредственныеПотомки =
            @"SELECT * FROM ТипыДокументов WHERE Parent = {0}";

        /// <summary>
        ///     Сторока запроса: Все родители
        /// </summary>
        public static string SELECT_ТипыДокументов_ВсеРодители =
            @"SELECT * FROM ТипыДокументов WHERE L < {0} AND R > {1}";

        /// <summary>
        ///     Строка запроса: Сохранение нового типа
        /// </summary>
        public const string INSERT_ТипДокумента = @"
INSERT INTO ТипыДокументов
    (ТипДокумента, TypeDoc, ТОписание, TDescription, ИмяПредставления, NameExist, НаличиеФормы, URL, SearchURL, HelpURL, ТипАвтогенерацииНомера, 
    АлгоритмАвтогенерацииНомера, АвтоДата, УсловиеПохожести, Исходящий, Финансовый, Бухгалтерский, БухгалтерскийСправочник, СоздаватьЗащищеным, 
    ТипОтвета, Changed)
VALUES
    (@ТипДокумента, @TypeDoc, @ТОписание, @TDescription, @ИмяПредставления, @NameExist, @НаличиеФормы, @URL, @SearchURL, @HelpURL, @ТипАвтогенерацииНомера,
     @АлгоритмАвтогенерацииНомера, @АвтоДата, @УсловиеПохожести, @Исходящий, @Финансовый, @Бухгалтерский, @БухгалтерскийСправочник, @СоздаватьЗащищеным,
    @ТипОтвета,@Changed)";

        /// <summary>
        ///     Строка запроса: Сохранение изменений в существующем типе документов
        /// </summary>
        public const string UPDATE_ТипДокумента = @"
UPDATE  ТипыДокументов
SET     ТипДокумента = @ТипДокумента, TypeDoc = @TypeDoc, ТОписание = @ТОписание, TDescription = @TDescription, ИмяПредставления = @ИмяПредставления, NameExist = @NameExist, НаличиеФормы = @НаличиеФормы, URL = @URL, SearchURL = @SearchURL, HelpURL = @HelpURL, 
        ТипАвтогенерацииНомера = @ТипАвтогенерацииНомера, АлгоритмАвтогенерацииНомера = @АлгоритмАвтогенерацииНомера, АвтоДата = @АвтоДата, УсловиеПохожести = @УсловиеПохожести, Исходящий = @Исходящий, Финансовый = @Финансовый, Бухгалтерский = @Бухгалтерский, 
        БухгалтерскийСправочник = @БухгалтерскийСправочник, СоздаватьЗащищеным = @СоздаватьЗащищеным, ТипОтвета = @ТипОтвета, Changed = @Changed
WHERE   КодТипаДокумента = @КодТипаДокумента";

        /// <summary>
        ///     Строка запроса: Сохранение нового поля типа документа
        /// </summary>
        public const string INSERT_ПолеДокумента = @"
INSERT INTO ПоляДокументов
            (КодТипаДокумента, ПорядокПоляДокумента, ПолеДокумента, ПолеДокументаEN, ПолеДокументаET, КолонкаТаблицы, Обязательность, 
            Рассчетное, КодТипаПоля, ЧислоДесятичныхЗнаков, URLПоиска, МножественныйВыбор, СтрогийПоиск, ПараметрыПоиска, РежимПоискаТипов, 
            ЗаголовокФормыПоиска, СтрокаПодключения, SQLЗапрос, Описание)
VALUES     (@КодТипаДокумента,@ПорядокПоляДокумента,@ПолеДокумента,@ПолеДокументаEN,@ПолеДокументаET,@КолонкаТаблицы,@Обязательность,@Рассчетное,
            @КодТипаПоля,@ЧислоДесятичныхЗнаков,@URLПоиска,@МножественныйВыбор,@СтрогийПоиск,@ПараметрыПоиска,@РежимПоискаТипов,@ЗаголовокФормыПоиска,
            @СтрокаПодключения,@SQLЗапрос,@Описание)";

        /// <summary>
        ///     Строка запроса: Сохранение изменений в существующем поле типа документа
        /// </summary>
        public const string UPDATE_ПолеДокумента = @"
UPDATE  ПоляДокументов
SET     КодТипаДокумента = @КодТипаДокумента, ПорядокПоляДокумента = @ПорядокПоляДокумента, ПолеДокумента = @ПолеДокумента, ПолеДокументаEN = @ПолеДокументаEN, ПолеДокументаET = @ПолеДокументаET, КолонкаТаблицы = @КолонкаТаблицы, Обязательность = @Обязательность, 
        Рассчетное = @Рассчетное, КодТипаПоля = @КодТипаПоля, ЧислоДесятичныхЗнаков = @ЧислоДесятичныхЗнаков, URLПоиска = @URLПоиска, МножественныйВыбор = @МножественныйВыбор, СтрогийПоиск = @СтрогийПоиск, ПараметрыПоиска = @ПараметрыПоиска, РежимПоискаТипов = @РежимПоискаТипов, 
        ЗаголовокФормыПоиска = @ЗаголовокФормыПоиска, СтрокаПодключения = @СтрокаПодключения, SQLЗапрос = @SQLЗапрос, Описание = @Описание
WHERE КодПоляДокумента = @КодПоляДокумента";

        /// <summary>
        ///     Строка запроса: Получение полей документов
        /// </summary>
        public const string SELECT_ПоляДокументов = @"
-- получение информации о полях документа
SELECT  КодПоляДокумента, КодТипаДокумента, ПорядокПоляДокумента, ПолеДокумента, ПолеДокументаEN, ПолеДокументаET, 
        КолонкаТаблицы, Обязательность, Рассчетное, КодТипаПоля, ЧислоДесятичныхЗнаков, URLПоиска, МножественныйВыбор, СтрогийПоиск,
        ПараметрыПоиска, РежимПоискаТипов, ЗаголовокФормыПоиска, СтрокаПодключения, SQLЗапрос, Описание, Изменил, Изменено 
FROM    ПоляДокументов ";

        /// <summary>
        ///     Строка запроса: Получение поля документа по ID
        /// </summary>
        public static readonly string SELECT_ID_ПолеДокумента =
            string.Format(@"{0} WHERE КодПоляДокумента = @id", SELECT_ПоляДокументов);

        /// <summary>
        ///     Строка запроса: Получение полей документа по типу документа
        /// </summary>
        public static readonly string SELECT_ПоляДокументов_ТипДокумента =
            string.Format(@"{0} WHERE КодТипаДокумента = @id", SELECT_ПоляДокументов);


        /// <summary>
        ///     Строка запроса: Получение связи типов основание по вытекающим
        /// </summary>
        public const string SELECT_СвязиТиповДокументов_ТипВытекающего =
            @"SELECT * FROM СвязиТиповДокументов (nolock) WHERE КодТипаДокументаВытекающего=@id";

        /// <summary>
        ///     Строка запроса: Получение всех вытекающих типов документа
        /// </summary>
        public static string SELECT_СвязиТиповДокументов_Вытекающие = @"
DECLARE @Types TABLE(ТипДокументаВСвязях int, КодТипаДокумента int, SearchType int)
DECLARE @BaseTypeId int

SET @BaseTypeId = @Id

INSERT INTO @Types
-- тип основания - равен
SELECT @BaseTypeId, @BaseTypeId, 0
UNION ALL
-- тип основания - потомок указанного в СвязиТиповДокументов родителя
SELECT Pr.КодТипаДокумента, Ch.КодТипаДокумента, 1
FROM ТипыДокументов Pr (nolock)
	INNER JOIN (SELECT * FROM ТипыДокументов (nolock) WHERE КодТипаДокумента = @BaseTypeId) Ch ON Pr.L <= Ch.L AND Ch.R <= Pr.R
UNION ALL
-- тип основания - синоним потомков
SELECT Syn.КодТипаДокумента, Ch.КодТипаДокумента, 3
FROM ТипыДокументов Pr (nolock)
	INNER JOIN (SELECT * FROM ТипыДокументов (nolock) WHERE КодТипаДокумента = @BaseTypeId) Ch ON Pr.L <= Ch.L AND Ch.R <= Pr.R
	INNER JOIN ТипыДокументов Syn (nolock) ON Syn.Parent = Pr.Parent

SELECT DISTINCT
	@BaseTypeId as КодТипаДокументаОснования,
	Связи.ТипДокументаОснования,	-- м.б. дочерним, синонимом - зависит от РежимПоискаОснования
	Связи.КодТипаДокументаВытекающего,
	Связи.ТипДокументаВытекающего,
	Связи.ВыводитьСписокВОсновании,
	Связи.ПорядокВыводаВОсновании,
	Связи.ТипСвязи,
	Связи.РежимПоискаОснования,
	Связи.КодПоляДокумента,
	ПоляДокументов.ПолеДокумента, ПоляДокументов.ПолеДокументаEn
FROM СвязиТиповДокументов Связи (nolock)
	INNER JOIN @Types Типы ON Типы.ТипДокументаВСвязях = КодТипаДокументаОснования AND Типы.SearchType = РежимПоискаОснования AND Типы.КодТипаДокумента = @BaseTypeId
	INNER JOIN ПоляДокументов (nolock) ON ПоляДокументов.КодПоляДокумента = Связи.КодПоляДокумента
	INNER JOIN ТипыДокументов (nolock) ON ТипыДокументов.КодТипаДокумента = Связи.КодТипаДокументаВытекающего
WHERE ВыводитьСписокВОсновании = 1 AND ТипыДокументов.НаличиеФормы >= 1";

        #endregion

        #region Документы

        /// <summary>
        ///     Лица Документа По Бизнес Проекту
        /// </summary>
        public const string SELECT_ID_ЛицаДокументаПоБизнесПроекту = @"
--Проверка, что документ по проектам холдинга
SELECT КодЛица 
FROM   Справочники.dbo.vwЛица Лица (nolock)
WHERE  КодБизнесПроекта IS NOT NULL AND EXISTS(SELECT * FROM vwЛицаДокументов ЛицаДокументов (nolock) WHERE ЛицаДокументов.КодДокумента = @id AND ЛицаДокументов.КодЛица = Лица.КодЛица)";


        /// <summary>
        ///     Хранимая процедура: Создание номера документа
        /// </summary>
        public const string SP_СозданиеНомераДокумента = "sp_СозданиеНомераДокумента";

        /// <summary>
        ///     Строка запроса: Получение документов
        /// </summary>
        public const string SELECT_Документы = @"
-- загрузка информации по документу
SELECT {0}  T0.[КодДокумента], T0.[КодТипаДокумента], T0.[НазваниеДокумента], T0.[НомерДокумента], T0.[ДатаДокумента], T0.[Описание],
            T0.[КодИзображенияДокументаОсновного], T0.[НомерInt], T0.[НомерДокументаRL], T0.[НомерДокументаRLReverse], T0.[Защищен], T0.[Изменил], T0.[Изменено]
            ,T1.[ТипДокумента], T1.[TypeDoc]
FROM vwДокументы T0 (nolock) 
LEFT JOIN ТипыДокументов T1 ON T1.[КодТипаДокумента] = T0.[КодТипаДокумента]";

        /// <summary>
        ///     Строка запроса: Последнее изменение документа
        /// </summary>
        public const string SELECT_Документ_LastChanged =
            @"SELECT T0.Изменено FROM vwДокументы T0 (nolock) WHERE T0.КодДокумента = @id";

        /// <summary>
        ///     Строка запроса: Поиск документа по коду
        /// </summary>
        public static readonly string SELECT_ID_Документ =
            string.Format(@"{0} WHERE T0.КодДокумента = @id", string.Format(SELECT_Документы, ""));

        /// <summary>
        ///     Строка запроса: Поиск всех документов основания
        /// </summary>
        public static readonly string SELECT_ВсеОснования =
            string.Format(
                @"{0} INNER JOIN vwСвязиДокументов (nolock) ON T0.КодДокумента= vwСвязиДокументов.КодДокументаОснования WHERE vwСвязиДокументов.КодДокументаВытекающего=",
                string.Format(SELECT_Документы, ""));

        /// <summary>
        ///     Строка запроса: Получить все типы договоров
        /// </summary>
        public const string SELECT_ТипыДоговоров = @"
SELECT  Child.* 
FROM    ТипыДокументов Parent INNER JOIN
        ТипыДокументов Child ON Parent.L <= Child.L AND Parent.R >= Child.R
WHERE   Parent.КодТипаДокумента = 2039 AND Child.ТипДокумента IS NOT NULL
";

        /// <summary>
        ///     Строка запроса: Получить все типы приложений
        /// </summary>
        public const string SELECT_ТипыПриложений = @"
SELECT  Child.* 
FROM    ТипыДокументов Parent INNER JOIN
        ТипыДокументов Child ON Parent.L <= Child.L AND Parent.R >= Child.R
WHERE   Parent.КодТипаДокумента = 2110 AND Child.ТипДокумента IS NOT NULL
";

        /// <summary>
        ///     Строка запроса: Получить все вытекающие документы
        /// </summary>
        public static string SELECT_ВсеВытекающие(int id, int fieldId)
        {
            var getField = string.Empty;
            if (fieldId > 0)
                getField = " AND vwСвязиДокументов.КодПоляДокумента=" + fieldId;

            return string.Format(@"{0} INNER JOIN 
vwСвязиДокументов (nolock) ON T0.КодДокумента = vwСвязиДокументов.КодДокументаВытекающего 
WHERE vwСвязиДокументов.КодДокументаОснования = {1} {2} 
ORDER BY ПорядокВытекающего", string.Format(SELECT_Документы, ""), id, getField);
        }

        /// <summary>
        ///     Строка запроса: Получить все вытекающие документы
        /// </summary>
        public const string SELECT_ВсеВытекающие_ПоПолю_ПоТипу = @"
--Получение вытекащих документов
SELECT  _КодДокумента КодДокумента, ДатаДокумента, КодТипаДокумента, КодРесурса1, ISNULL(Money1,0) Money1
FROM    vwДокументыДокументыДанные ДД (nolock)
WHERE   EXISTS(SELECT * FROM vwСвязиДокументов Связи (nolock)
                WHERE КодДокументаВытекающего = ДД._КодДокумента AND КодДокументаОснования = @КодДокументаОснования AND (@КодПоляДокумента = -1 OR КодПоляДокумента = @КодПоляДокумента))
        AND (@КодТипаДокумента = -1 OR КодТипаДокумента = @КодТипаДокумента) 
";

        /// <summary>
        ///     Строка запроса: Получение последних отметок транспортного узла
        /// </summary>
        public const string SELECT_ПоследниеОтметкиТранспортногоУзла = @"
--Получение последних отметок транспортного узла
SELECT  TOP 1 (CASE WHEN КодТУзла1= @КодТУзла THEN Text100_1 ELSE Text100_2 END) Note 
FROM    vwДокументыДокументыДанные (nolock)
WHERE   КодТипаДокумента = @КодТипаДокумента 
        AND КодДокумента <> @КодДокумента
        AND @КодТУзла IN (КодТУзла1,КодТУзла2) 
        AND ДатаДокумента <= @ДатаДокумента
ORDER BY ДатаДокумента DESC
";

        /// <summary>
        ///     Строка запроса: Получение количества вытекающих документов по куду поля и коду документа
        /// </summary>
        public const string SELECT_КоличествоДокументовОснований = @"
--Получение количества вытекающих документов по куду поля и коду документа
SELECT  COUNT(*) 
FROM    vwСвязиДокументов (nolock)
WHERE   КодПоляДокумента = @КодПоляДокумента AND КодДокументаВытекающего = @КодДокументаВытекающего
";

        /// <summary>
        ///     Строка запроса: Обновление описания документа
        /// </summary>
        public const string UPDATE_ID_Документы_Описание =
            @"UPDATE vwДокументы SET Описание = @Описание WHERE КодДокумента = @id";

        /// <summary>
        ///     Хранимая процедура: Создание ДокументовДанных
        /// </summary>
        public const string SP_ДокументыДанные_InsUpd = "sp_ДокументыДанные_InsUpd";

        /// <summary>
        ///     Хранимая процедура: Поиск похожих документов
        /// </summary>
        public const string SP_ПохожиеДокументы = "sp_ПохожиеДокументы";

        /// <summary>
        ///     Строка запроса: Удаление ДокументовДанных(далее триггер вызовет deleter для документа, если была только электронная
        ///     форма)
        /// </summary>
        public const string DELETE_ID_ДокументДанные = "DELETE FROM dbo.vwДокументыДанные WHERE КодДокумента = @id";

        /// <summary>
        ///     Строка запроса: Экспортирован ли документ в 1С
        /// </summary>
        public const string SELECT_ID_ДокументЭкспортированВ1С = @"
IF EXISTS(SELECT 1 FROM БухПараметрыДокумента (nolock) WHERE КодДокумента = @id) 
    SELECT 1 
ELSE 
BEGIN 
    IF EXISTS(SELECT 1 FROM БухПараметрыДоговоров (nolock) WHERE КодДокумента = @id) 
        SELECT 1 
    ELSE
        SELECT 0 
END";

        /// <summary>
        ///     Строка запроса: Получение строки из таблицы "ДокументыДанные" по ID
        /// </summary>
        public const string SELECT_ID_ДокументДанные = @"
--получение информации по документам данным
SELECT  КодДокумента, Изменил, Изменено,
        КодЛица1, КодЛица2, КодЛица3, КодЛица4, КодЛица5, КодЛица6, 
        КодСклада1, КодСклада2, КодСклада3, КодСклада4, 
        КодРесурса1, КодРесурса2, 
        КодСотрудника1, КодСотрудника2, КодСотрудника3,
        КодРасположения1,  КодРасположения2, 
        КодБазисаПоставки, КодВидаТранспорта, КодМестаХранения, КодЕдиницыИзмерения, КодСтавкиНДС, КодТУзла1, КодТУзла2, КодТерритории, КодСтатьиБюджета,
        Дата2, Дата3, Дата4, Дата5, 
        Flag1, Flag2, 
        Int1, Int2, Int3, Int4, Int5, Int6, Int7,
        Text50_1, Text50_2, Text50_3, Text50_4, Text50_5, Text50_6, Text50_7, Text50_8, Text50_9, Text50_10, Text50_11, Text50_12, Text50_13,
        Text100_1, Text100_2, Text100_3, Text100_4, Text100_5, Text100_6,
        Text300_1, Text300_2, Text300_3, Text300_4, Text300_5, Text300_6, Text300_7, Text300_8, Text300_9, 
        Text1000_1, Text1000_2,
        Money1, Money2, Money3, Money4, Money5, Money6, Money7, Money8, Money9,
        Decimal1, Decimal2, Float1,
        ТекстДокумента
FROM    vwДокументыДанные T0 (nolock) WHERE T0.КодДокумента = @id";

        /// <summary>
        ///     Строка запроса: Получение строки из таблицы "СвязиДокументов"
        /// </summary>
        public const string SELECT_СвязиДокументов = @"
--получение информации о связях документа
SELECT  КодСвязиДокументов, КодДокументаОснования, КодДокументаВытекающего, КодПоляДокумента, ПорядокОснования, ПорядокВытекающего, Изменил, Изменено
FROM    vwСвязиДокументов (nolock) {0}";


        /// <summary>
        ///     Строка запроса: Получение строки из таблицы "СвязиДокументов" по ID
        /// </summary>
        public static readonly string SELECT_ID_СвязиДокументов =
            string.Format(SELECT_СвязиДокументов, "WHERE КодСвязиДокументов=@id");

        /// <summary>
        ///     Строка запроса: Получение связей документов по коду документа вытекающего
        /// </summary>
        public static readonly string SELECT_СвязиДокументов_ПоВытекающему =
            string.Format(SELECT_СвязиДокументов, "WHERE КодДокументаВытекающего=@id");

        /// <summary>
        ///     Строка запроса: Получение связей документов по коду документа основания
        /// </summary>
        public static readonly string SELECT_СвязиДокументов_ПоОснованию =
            string.Format(SELECT_СвязиДокументов, "WHERE КодДокументаОснования=@id");

        /// <summary>
        ///     Строка запроса: Получение связей документов по коду документа вытекающего и коду поля документа
        /// </summary>
        public static readonly string SELECT_СвязиДокументов_ПоВытекающему_ПоПолю =
            string.Format(SELECT_СвязиДокументов,
                "WHERE КодДокументаВытекающего= @IdDoc AND КодПоляДокумента = @IDField  ORDER BY ПорядокОснования");


        /// <summary>
        ///     Строка запроса: Получить ID строки из таблицы СвязиДокументов
        /// </summary>
        public static readonly string SELECT_СвязиДокументов_ПоОснованию_ПоВытекающему =
            string.Format(SELECT_СвязиДокументов,
                "WHERE КодДокументаОснования = @ParentDocID AND КодДокументаВытекающего = @ChildDocID");

        /// <summary>
        ///     Строка запроса: Получить ID строки из таблицы СвязиДокументов и поля таблицы
        /// </summary>
        public static readonly string SELECT_СвязиДокументов_ПоОснованию_ПоВытекающему_ПоПолю =
            string.Format(SELECT_СвязиДокументов,
                "WHERE КодДокументаОснования = @ParentDocID AND КодДокументаВытекающего = @ChildDocID AND КодПоляДокумента = @FildID");

        /// <summary>
        ///     Строка запроса: Проверка вытекающего документа
        /// </summary>
        public const string SELECT_TEST_СвязиДокументовВытекающие = @"
IF EXISTS(SELECT NULL FROM Инвентаризация.dbo.fn_SplitInts(@Коды) AS T1 LEFT JOIN (SELECT * FROM Инвентаризация.dbo.fn_SplitInts(@КодыОснований) AS T1 CROSS APPLY
fn_ВсеВытекающие( T1.value)) AS T2 ON T1.value=T2.КодДокумента WHERE T2.КодДокумента IS NULL)
SELECT 0
ELSE
SELECT 1";

        /// <summary>
        ///     Строка запроса: Получение всех вытекающих документов из всех оснований
        /// </summary>
        public const string SELECT_СвязиДокументовВытекающиеИзОснований = @"
SELECT DISTINCT КодДокумента FROM Инвентаризация.dbo.fn_SplitInts(@Коды) AS T1 CROSS APPLY fn_ВсеВытекающие(T1.value)";

        /// <summary>
        ///     Строка запроса: Получение всех оснований, для которых уже нет других оснований, из всех вытекающих документов
        /// </summary>
        public const string SELECT_СвязиДокументовОснованияДляВытекающих = @"
SELECT DISTINCT КодДокумента FROM Инвентаризация.dbo.fn_SplitInts(@Коды) AS T1 CROSS APPLY fn_ВсеОснования(T1.value) 
WHERE NOT EXISTS(SELECT NULL FROM fn_ВсеОснования(КодДокумента))";


        /// <summary>
        ///     Строка запроса: Получение всех вытекающих документов из всех оснований
        /// </summary>
        public static string SELECT_СвязиДокументовВытекающиеИзОснованийПоТипу(string id, string fieldId,
            string typeList)
        {
            return
                string.Format(
                    @"{0} INNER JOIN vwСвязиДокументов (nolock) ON T0.КодДокумента = vwСвязиДокументов.КодДокументаВытекающего 
                    WHERE vwСвязиДокументов.КодДокументаОснования = {1} 
                    AND vwСвязиДокументов.КодПоляДокумента = {2} 
                    AND T0.КодТипаДокумента IN ({3})
                    ORDER BY ПорядокВытекающего",
                    string.Format(SELECT_Документы, ""), id, fieldId, typeList);
        }

        /// <summary>
        ///     Строка запроса: Получение всех оснований, для которых уже нет других оснований, из всех вытекающих документов
        /// </summary>
        public static string SELECT_СвязиДокументовОснованияДляВытекающихПоТипу(string id, string fieldId,
            string typeList)
        {
            return
                string.Format(
                    @"{0} INNER JOIN vwСвязиДокументов (nolock) ON КодДокумента = vwСвязиДокументов.КодДокументаОснования 
                    WHERE vwСвязиДокументов.КодДокументаВытекающего = {1} 
                    AND vwСвязиДокументов.КодПоляДокумента = {2} 
                    AND T0.КодТипаДокумента IN ({3})
                    ORDER BY ПорядокВытекающего",
                    string.Format(SELECT_Документы, ""), id, fieldId, typeList);
        }

        /// <summary>
        ///     Хранимая процедура: Создание связи с документами
        /// </summary>
        public const string SP_MakeDocsLink = "sp_MakeDocsLink";

        /// <summary>
        ///     Строка запроса: Удаление связи документов
        /// </summary>
        public const string DELETE_ID_СвязиДокументов =
            "DELETE FROM vwСвязиДокументовПорядок WHERE КодСвязиДокументов = @id";

        /// <summary>
        ///     Строка запроса: Удаление связи документов
        /// </summary>
        public const string DELETE_СвязиДокументов_ПоОснованию_ПоВытекающему_ПоПолю = @"
DELETE FROM vwСвязиДокументов 
WHERE КодДокументаОснования = @ParentDocID AND КодДокументаВытекающего = @ChildDocID AND КодПоляДокумента = @FildID";

        /// <summary>
        ///     Строка запроса: Получение строк из таблицы ПодписиДокументов
        /// </summary>
        public const string SELECT_ПодписиДокументов = @"
SELECT  КодПодписиДокумента, КодДокумента, КодИзображенияДокумента, КодСотрудника, КодСотрудникаЗА, Дата, ТипПодписи,
        КодШтампа, Page, X, Y, Zoom, Rotate
FROM    ПодписиДокументов
";

        /// <summary>
        ///     Строка запроса: Получение строк из таблицы ПодписиДокументов по коду документа, можно ограничить подписями э.ф.
        /// </summary>
        public const string SELECT_ПодписиДокумента = @"
--получение инфорации о подписях документа
SELECT  *
FROM    ПодписиДокументов
WHERE   КодДокумента = @КодДокумента AND (@EF = 0 OR @EF = 1 AND КодИзображенияДокумента IS NULL)

";

        /// <summary>
        ///     Процедура sp_ПодписиДокумента
        /// </summary>
        public const string SP_ПодписиДокумента = "sp_ПодписиДокумента";

        /// <summary>
        ///     Строка запроса: Удаление подписи документа
        /// </summary>
        public const string DELETE_ID_ПодписьДокумента =
            @"DELETE ПодписиДокументов WHERE КодПодписиДокумента = @SignId";

        /// <summary>
        ///     Строка запроса: Получение строки из таблицы "ПодписиДокументов" по ID
        /// </summary>
        public static readonly string SELECT_ID_ПодписьДокумента =
            string.Concat(SELECT_ПодписиДокументов, "WHERE КодПодписиДокумента = @id");

        /// <summary>
        ///     Строка запроса: Получить сообщения подписи
        /// </summary>
        public const string SELECT_СообщенияПодписи = @"
DECLARE @КодСотрудника int, @Язык char(2) 
SET @КодСотрудника = 0 
SET @Язык='en' 

SELECT @КодСотрудника = КодСотрудника, @Язык = Язык FROM Инвентаризация.dbo.Сотрудники (nolock) WHERE SID = SUSER_SID() 

SELECT  TOP 1 CASE WHEN @Язык = 'ru' THEN ТекстСообщения ELSE CASE WHEN @Язык = 'et' THEN ТекстСообщенияEt ELSE ТекстСообщенияEn END END ТекстСообщения 
FROM    ТипыДокументовСообщенияПодписи (nolock) 
WHERE   КодСотрудника IN (0, @КодСотрудника) AND КодТипаДокумента = @DocTypeId AND ТипПодписи = @SignType 
ORDER BY КодСотрудника DESC";

        /// <summary>
        ///     Строка запроса: Добавить подпись документа
        /// </summary>
        public const string INSERT_ПодписьДокумента = @"
INSERT  ПодписиДокументов(КодДокумента,КодСотрудника,КодСотрудникаЗА,Дата,ТипПодписи)
VALUES (@КодДокумента, @КодСотрудника, @КодСотрудникаЗА, GETUTCDATE(), @ТипПодписи)";

        /// <summary>
        ///     Строка запроса: Загрузка настроек docview
        /// </summary>
        public const string SELECT_НастройкиDocView = @"
IF EXISTS(SELECT 1 FROM vwНастройки)
    SELECT * FROM vwНастройки 
ELSE
    EXEC sp_Настройки";

        /// <summary>
        ///     Строка запроса: Сохранение(Update) настроек docview
        /// </summary>
        public const string UPDATE_НастройкиDocView = @"
UPDATE  vwНастройки 
SET     КодЛица									= @КодЛица,
        ПорядокГруппировки						= @ПорядокГруппировки,
        КодыДокументовСвязующих					= @КодыДокументовСвязующих,
        УведомлениеСообщения					= @УведомлениеСообщения,
        ВремяОтметкиПрочтения					= @ВремяОтметкиПрочтения,
        ДокументыПодуровней						= @ДокументыПодуровней,
        ФильтрДатыАрхивирования					= @ФильтрДатыАрхивирования,
        ФильтрДатыДокумента						= @ФильтрДатыДокумента,
        ФильтрДатыСоздания						= @ФильтрДатыСоздания,
        ПодтвУдаления							= @ПодтвУдаления,
        ПодтвГрупповыхОпераций					= @ПодтвГрупповыхОпераций,
        ПоказыватьНовости						= @ПоказыватьНовости,
        СохранениеДобавитьВРаботу				= @СохранениеДобавитьВРаботу,
        СохранениеОткрытьСохранённый			= @СохранениеОткрытьСохранённый,
        СохранениеПослатьСообщение				= @СохранениеПослатьСообщение,
        ПодписьВыполненоСообщение				= @ПодписьВыполненоСообщение,
        ФаксыВходящиеТолькоНеСохранённые		= @ФаксыВходящиеТолькоНеСохранённые,
        ФаксыОтправленныеТолькоНеСохранённые	= @ФаксыОтправленныеТолькоНеСохранённые,
        ПереходНаСледующийПриОтправкеСообщения	= @ПереходНаСледующийПриОтправкеСообщения,
        ИскатьНесколькоДокументовПоШтрихкоду	= @ИскатьНесколькоДокументовПоШтрихкоду,
        ЛичныеСпискиРассылкиПоказыватьПервыми   = @ЛичныеСпискиРассылкиПоказыватьПервыми,
        ПрочитыватьСообщениеПриЗавершенииРаботы = @ПрочитыватьСообщениеПриЗавершенииРаботы";


        /// <summary>
        ///     Строка запроса: Получение таблицы лица документов
        /// </summary>
        public const string SELECT_ЛицаДокументов = @"
SELECT  КодЛицаДокумента, КодДокумента, КодЛица, Положение, Изменил, Изменено
FROM    vwЛицаДокументов T0 (nolock)";


        /// <summary>
        ///     Строка запроса: Получение Коды лиц подкументов по ID и условием Положение>0
        /// </summary>
        public static readonly string SELECT_ЛицаДокументов_ПоДокументу_ПоПоложению =
            string.Concat(SELECT_ЛицаДокументов, "WHERE Положение > 0 AND КодДокумента = @Id");

        /// <summary>
        ///     Строка запроса: Получение Коды лиц подкументов по ID
        /// </summary>
        public static readonly string SELECT_ЛицаДокументов_ПоДокументу =
            string.Concat(SELECT_ЛицаДокументов, "WHERE КодДокумента = @Id");

        /// <summary>
        ///     Строка запроса: Получение таблицы лица документов по ID
        /// </summary>
        public static string SELECT_ID_ЛицаДокументов =
            string.Concat(SELECT_ЛицаДокументов, "WHERE КодЛицаДокумента = @Id");

        /// <summary>
        ///     Строка запроса: Получение ПоследнийДокументПоТипу
        /// </summary>
        public static string SELECT_ПоследнийДокументПоТипу = @"
SELECT TOP 1 КодДокумента, КодЛица3, КодЛица4
FROM vwДокументыДокументыДанные
INNER JOIN vwСвязиДокументов ON vwСвязиДокументов.КодДокументаВытекающего = vwДокументыДокументыДанные.КодДокумента
WHERE КодТипаДокумента = @КодТипаДокумента
AND КодПоляДокумента = 707
AND КодЛица1 = @КодЛица1
AND КодЛица2 = @КодЛица2
AND КодДокументаОснования = @КодДокументаОснования";

        /// <summary>
        ///     Строка запроса: Получение ПоследнийДокументПоТипу
        /// </summary>
        public static string SELECT_ПоследнийИзмДокументПоТипу = @"
SELECT TOP 1 vwДокументы.КодДокумента, Text50_2,Text50_11,Text50_3,Text50_12,Text50_13,Text100_3
FROM vwДокументы
INNER JOIN vwДокументыДокументыДанные ON vwДокументы.КодДокумента = vwДокументыДокументыДанные.КодДокумента
WHERE vwДокументы.КодТипаДокумента = @КодТипаДокумента
AND КодЛица1 = @КодЛица1
AND vwДокументы.КодДокумента <> @КодДокумента
ORDER BY vwДокументы.Изменено DESC";

        /// <summary>
        ///     Удаление записи ОтправкаВагоновВыгрузка по GUID
        /// </summary>
        public static string DELETE_ОтправкаВагоновВыгрузка = @"DELETE FROM ОтправкаВагоновВыгрузка WHERE guid=@guid";

        #endregion

        #region Наборы

        /// <summary>
        ///     Строка запроса: Список ОтправкаВагонов
        /// </summary>
        public const string SELECT_КодыДвиженияНаСкладе =
            @"SELECT DISTINCT КодДвиженияНаСкладе FROM vwДвиженияНаСкладах d (nolock)
								WHERE d.КодДвиженияНаСкладе IN({0}) AND
								EXISTS(SELECT * FROM vwОтправкаВагоновУчастки t (nolock) WHERE d.КодОтправкиВагона=t.КодОтправкиВагона AND t.НомерДокумента like '%'+@НомерДокумента+'%')";

        /// <summary>
        ///     Строка запроса: Список ОтправкаВагонов
        /// </summary>
        public const string SELECT_DvDoc = @"
SELECT d.КодДвиженияНаСкладе,d.КодОтправкиВагона,ISNULL(t.ОтправкаВагона,'') ОтправкаВагона, d.Количество* Справочники.dbo.fn_unitConverter(@КодРесурса,d.КодЕдиницыИзмерения,@КодЕдиницыИзмерения) Количество
FROM vwДвиженияНаСкладах d (nolock)
	LEFT JOIN vwОтправкаВагонов t ON d.КодОтправкиВагона = t.КодОтправкиВагона
WHERE d.КодРесурса=@КодРесурса AND d.КодДокумента=@КодДокумента ORDER BY ОтправкаВагона
";

        /// <summary>
        ///     Строка запроса: ОтправкаВагонов по ресурсу и документу (плательщик)
        /// </summary>
        public const string SELECT_NaborDocPayer = @"
SELECT n.КодНабора,КодДвиженияНаСклад КодДвиженияВДокументе,КодДвиженияСоСклада КодДвиженияВНаборе,ISNULL(t.ОтправкаВагона,'') ОтправкаВагона,n.Количество*Справочники.dbo.fn_unitConverter(@КодРесурса,null,@КодЕдиницыИзмерения) Количество
FROM Наборы n
	INNER JOIN  vwДвиженияНаСкладах d (nolock) ON n.КодДвиженияНаСклад = d.КодДвиженияНаСкладе
	LEFT JOIN vwОтправкаВагонов t (nolock) ON t.КодОтправкиВагона = d.КодОтправкиВагона
WHERE d.КодРесурса=@КодРесурса AND d.КодДокумента=@КодДокумента
";

        /// <summary>
        ///     Строка запроса: ОтправкаВагонов по ресурсу и документу (получатель)
        /// </summary>
        public const string SELECT_NaborDocShipper = @"
SELECT n.КодНабора,КодДвиженияСоСклада КодДвиженияВДокументе,КодДвиженияНаСклад КодДвиженияВНаборе,ISNULL(t.ОтправкаВагона,'') ОтправкаВагона,n.Количество*Справочники.dbo.fn_unitConverter(@КодРесурса,null,@КодЕдиницыИзмерения) Количество
FROM Наборы n
	INNER JOIN  vwДвиженияНаСкладах d (nolock) ON n.КодДвиженияСоСклада = d.КодДвиженияНаСкладе
	LEFT JOIN vwОтправкаВагонов t (nolock) ON t.КодОтправкиВагона = d.КодОтправкиВагона
WHERE d.КодРесурса=@КодРесурса AND d.КодДокумента=@КодДокумента
";

        #endregion

        #region Позиции документов

        /// <summary>
        ///     Строка запроса: Получение связи документов и позиции по ID
        /// </summary>
        public const string SELECT_ID_ПозицияЗаявкиМТРСвязи =
            "SELECT * FROM vwПозицииЗаявокМТРСвязи (nolock) WHERE КодПозицииЗаявокМТРСвязи = @id";

        /// <summary>
        ///     Строка запроса: Сохранить связь ПозицииЗаявокМТР и Документы
        /// </summary>
        public const string INSERT_ПозицииЗаявокМТРСвязи = @"
INSERT INTO vwПозицииЗаявокМТРСвязи (КодПозицииЗаявокМТР, КодДокументаОснованияОплаты, Количество)
VALUES (@КодПозицииЗаявокМТР, @КодДокументаОснованияОплаты, @Количество)

SET @КодПозицииЗаявокМТРСвязи = SCOPE_IDENTITY()";

        /// <summary>
        ///     Строка запроса: Удалить связь ПозицииЗаявокМТР и Документы
        /// </summary>
        public const string DELETE_ID_ПозицияЗаявкиМТРСвязи =
            "DELETE FROM vwПозицииЗаявокМТРСвязи WHERE КодПозицииЗаявокМТРСвязи = @id";

        /// <summary>
        ///     Строка запроса: Получение оказанных услуг по ID
        /// </summary>
        public const string SELECT_ID_ОказаннаяУслуга =
            "SELECT * FROM vwОказанныеУслуги (nolock) WHERE КодОказаннойУслуги = @id";

        /// <summary>
        ///     Строка запроса: Получение движения на складах по ID
        /// </summary>
        public const string SELECT_ID_ДвижениеНаСкладе =
            "SELECT * FROM vwДвиженияНаСкладах (nolock) WHERE КодДвиженияНаСкладе = @id";

        /// <summary>
        ///     Строка запроса: Получение позицию претензии по ID
        /// </summary>
        public const string SELECT_ID_ПозицияПретензии =
            "SELECT * FROM vwПозицииПретензий (nolock) WHERE КодПозицииПретензии = @id";


        /// <summary>
        ///     Строка запроса: Получение позиции договора по ID
        /// </summary>
        public const string SELECT_ID_ПозицияДоговора =
            "(SELECT * FROM vwПозицииДоговоров (nolock) WHERE КодПозицииДоговора = @id) T0";

        /// <summary>
        ///     Строка запроса: Получение позиции договора по ID
        /// </summary>
        public const string SELECT_ID_ПозицииДоговораПоРесурсу =
            "(SELECT p.* FROM vwПозицииДоговоров p INNER JOIN Справочники.dbo.Ресурсы r ON p.КодРесурса=r.КодРесурса WHERE КодПозицииДоговора = @id) T0";

        #endregion

        #region Транзакции

        /// <summary>
        ///     Строка запроса: Получение строк из таблицы "Транзакции"
        /// </summary>
        public const string SELECT_Транзакции = @"
SELECT  КодТранзакции, КодТипаТранзакции, КодГруппыТиповТранзакций, Дата,
        КодДокументаОснования, КодДокументаПодтверждения, КодДокументаДоговора, КодДокументаПриложения, КодДокументаСФ,
        КодЛицаДО, КодЛицаПОСЛЕ, КодСкладаДО, КодСкладаПОСЛЕ, КодХранителяДо, КодХранителяПосле, КодБизнесПроектаДО, КодБизнесПроектаПОСЛЕ,
        СуммаРуб, КодВалюты, Сумма, КодРесурса, Количество, Примечание, Изменил, Изменено
FROM    vwТранзакции (nolock) 
";

        /// <summary>
        ///     Строка запроса: Получение строку из таблицы "Транзакции" по ID
        /// </summary>
        public static string SELECT_ID_Транзакция = string.Concat(SELECT_Транзакции, "WHERE КодТранзакции = @id");

        /// <summary>
        ///     Строка запроса: Получение строку из таблицы "Транзакции" по полю КодДокументаПодтверждения
        /// </summary>
        public static string SELECT_Транзакции_ПоДокументуПодтверждения =
            string.Concat(SELECT_Транзакции, "WHERE КодДокументаПодтверждения = @CodeDoc");

        /// <summary>
        ///     Строка запроса: Удаление транзакций по коду документа подтверждения
        /// </summary>
        public const string DELETE_Транзакции_ПоДокументуПодтверждения =
            "DELETE vwТранзакции WHERE КодДокументаПодтверждения=@CodeDoc";

        /// <summary>
        ///     Строка запроса: Получение строк из таблицы "Типы транзакции"
        /// </summary>
        public const string SELECT_ТипыТранзакций = @"
SELECT  КодТипаТранзакции, ТипТранзакции, ТипТранзакцииEN, КодГруппыТиповТранзакций, ГруппаАктаСверки, ПорядокАктаСверки, ОписаниеАктаСверки
FROM    ТипыТранзакций (nolock) ";

        /// <summary>
        ///     Строка запроса: Получение строк из таблицы "Типы транзакции" по Id
        /// </summary>
        public static string SELECT_ID_ТипТранзакции =
            string.Concat(SELECT_ТипыТранзакций, "WHERE КодТипаТранзакции = @id");

        #endregion

        #region Шаблон

        /// <summary>
        ///     Строка запроса: Шаблон печатной формы по ID шаблона
        /// </summary>
        public const string SELECT_ID_ШаблонПечатнойФормы = @"
SELECT  КодЛица, КодКонтрагента, КодШаблонаПечатнойФормы, НазваниеШаблона, НазваниеШаблонаЛат
FROM    vwШаблоныПечатныхФорм
WHERE   КодШаблонаПечатнойФормы = @Id";

        /// <summary>
        ///     Строка запроса: Шаблоны печатных форм документов
        /// </summary>
        public const string SELECT_ШаблоныПечатныхФорм = @"
SELECT  {0} КодЛица, КодКонтрагента, КодШаблонаПечатнойФормы, НазваниеШаблона, НазваниеШаблонаЛат
FROM    vwШаблоныПечатныхФорм (nolock) ";

        #endregion

        #region ДополнительныеФильтры

        /// <summary>
        ///     Строка запроса: ДополнительныеФильтрыПриложений
        /// </summary>
        public const string SELECT_ДополнительныеФильтрыПриложений = @"
DECLARE @lang char(2)
SELECT @lang=Язык FROM Сотрудники WHERE SID=SUSER_SID()
SELECT {0} КодУсловия, CASE WHEN @lang <> 'ru' THEN УсловиеЛат ELSE Условие END AS Условие
FROM    НастройкиУсловия T0 WHERE T0.ТипУсловия=@ТипУсловия";

        /// <summary>
        ///     Строка запроса: ДополнительныеФильтрыПриложений
        /// </summary>
        public const string SELECT_ДополнительныеФильтрыПоиска = @"
DECLARE @lang char(2)
SELECT @lang=Язык FROM Сотрудники WHERE SID=SUSER_SID()
SELECT КодУсловия, CASE WHEN @lang <> 'ru' THEN УсловиеЛат ELSE Условие END AS Условие, SQL AS Запрос
FROM    НастройкиУсловия T0 WHERE T0.ТипУсловия=@ТипУсловия";

        /// <summary>
        ///     Строка запроса: ДополнительныеФильтрыПриложений
        /// </summary>
        public const string SELECT_IDs_ДополнительныеФильтрыПриложений = @"
SELECT {0} [SQL] AS Запрос
FROM    НастройкиУсловия T0 WHERE КодУсловия IN (SELECT value FROM Инвентаризация.dbo.fn_SplitInts(@КодУсловия))";

        #endregion

        #region Заявление на отпуск

        /// <summary>
        ///     Получить список видов отпуска
        /// </summary>
        public const string SELECT_ВидыОтпуска = @"
SELECT КодВидаОтпуска, CASE WHEN 'ru'=(SELECT TOP(1) Язык FROM Инвентаризация.dbo.Сотрудники WHERE SID=SUSER_SID()) THEN ВидОтпуска + ISNULL(' [' + NULLIF(Примечание,'') + ']','') ELSE ВидОтпускаLat END AS ВидОтпуска 
FROM ВидыОтпуска";

        /// <summary>
        ///     Получить вид отпуска
        /// </summary>
        public const string SELECT_ID_ВидОтпуска = @"
SELECT КодВидаОтпуска, 
CASE WHEN 'ru'=(SELECT TOP(1) Язык FROM Инвентаризация.dbo.Сотрудники WHERE SID=SUSER_SID()) THEN ВидОтпуска + ISNULL(' [' + NULLIF(Примечание,'') + ']','') ELSE ВидОтпускаLat END AS ВидОтпуска, 
CASE WHEN 'ru'=(SELECT TOP(1) Язык FROM Инвентаризация.dbo.Сотрудники WHERE SID=SUSER_SID()) THEN КраткоеНазвание ELSE КраткоеНазваниеLat END AS КраткоеНазвание 
FROM ВидыОтпуска
WHERE КодВидаОтпуска = @id";

        /// <summary>
        ///     Получить список руководителей организации
        /// </summary>
        public const string SELECT_Руководитель = @"
SELECT КодЛицаПотомка
FROM vwСвязиЛиц
WHERE От<=@ДатаДокумента AND До>@ДатаДокумента AND КодЛицаРодителя=@Организация AND Параметр=1";

        /// <summary>
        ///     Проверка того что одним из мест работы сотрудника является указанное лицо
        /// </summary>
        public const string SELECT_ТестМестоРаботыСотрудника = @"
IF EXISTS (SELECT NULL FROM Сотрудники C
INNER JOIN vwДолжности Д ON C.КодСотрудника=Д.КодСотрудника
WHERE C.КодСотрудника=@КодСотрудника AND Д.КодЛица = @КодЛица)
SELECT 1";

        /// <summary>
        ///     Проверка того что одним из мест работы лица Кто является указанное лицо Где
        /// </summary>
        public const string SELECT_ТестМестоРаботыЛица = @"
IF EXISTS (SELECT NULL FROM Сотрудники C
INNER JOIN vwДолжности Д ON C.КодСотрудника=Д.КодСотрудника
WHERE C.КодЛица=@КодЛицаКто AND Д.КодЛица = @КодЛицаГде)
SELECT 1";

        /// <summary>
        ///     Получить количества праздников в указанном периоде времени
        /// </summary>
        public const string SELECT_Праздники = @"
DECLARE @L int, @R int;
SELECT @L=L, @R=R FROM Территории WHERE КодТерритории=@КодТерритории;
SELECT COUNT(DISTINCT Дата) FROM Праздники INNER JOIN Территории ON Праздники.КодТерритории = Территории.КодТерритории
    WHERE Дата >= CONVERT(date,@От) AND Дата < CONVERT(date,@До) AND L<=@L AND R>=@R AND Праздник=1";

        /// <summary>
        ///     Получить первый рабочий день начиная с указанного дня
        /// </summary>
        public const string SELECT_ПервыйРабочийДень = @"
DECLARE @ПервыйРабочийДень datetime = @ПервыйДень
WHILE @ПервыйРабочийДень<'99991231'--Максимальное значение даты
BEGIN
IF dbo.fn_РабочиеДни(@ПервыйРабочийДень, @ПервыйРабочийДень+1, @КодТерритории)>0 BREAK
SET @ПервыйРабочийДень+=1
END
SELECT @ПервыйРабочийДень";

        /// <summary>
        ///     Получить список замещений сотрудников по указанному документу
        /// </summary>
        public const string SELECT_ЗамещенияПоДокументу = @"
SELECT КодЗамещенияСотрудников, От, До, КодСотрудникаЗамещающего, Сотрудники.Сотрудник, ЗамещенияСотрудников.Примечания
FROM ЗамещенияСотрудников
LEFT JOIN Сотрудники ON Сотрудники.КодСотрудника=ЗамещенияСотрудников.КодСотрудникаЗамещающего
WHERE ЗамещенияСотрудников.КодДокумента = @КодДокумента ORDER BY Сотрудники.Сотрудник,От,До";

        /// <summary>
        ///     Вставить одно новое замещение и получить его идентификатор
        /// </summary>
        public const string INSERT_Замещения = @"
INSERT INTO ЗамещенияСотрудников(От,До,КодСотрудникаЗамещаемого,КодСотрудникаЗамещающего,КодДокумента,Примечания) VALUES (@От,@До,@КодСотрудникаЗамещаемого,@КодСотрудникаЗамещающего,@КодДокумента,@Примечания)
SELECT @@IDENTITY";

        /// <summary>
        ///     Изменить одно замещение
        /// </summary>
        public const string UPDATE_Замещения = @"
UPDATE ЗамещенияСотрудников
SET От=@От, До=@До, КодСотрудникаЗамещающего=@КодСотрудникаЗамещающего, КодДокумента=@КодДокумента, Примечания=@Примечания
WHERE КодЗамещенияСотрудников=@КодЗамещенияСотрудников";

        /// <summary>
        ///     Изменить документ замещения
        /// </summary>
        public const string UPDATE_ДокументЗамещения = @"
UPDATE ЗамещенияСотрудников
SET КодДокумента=@КодДокумента
WHERE КодЗамещенияСотрудников=@КодЗамещенияСотрудников";

        /// <summary>
        ///     Удалить одно замещение
        /// </summary>
        public const string DELETE_Замещения = @"
DELETE FROM ЗамещенияСотрудников WHERE КодЗамещенияСотрудников=@КодЗамещенияСотрудников";

        /// <summary>
        ///     Слияние замещений с таблицей новых значений
        /// </summary>
        public const string MERGE_Замещения = @"
MERGE INTO ЗамещенияСотрудников
USING
(VALUES {0})
AS НовыеЗамещения(КодЗамещенияСотрудников, От, До, КодСотрудникаЗамещаемого, КодСотрудникаЗамещающего, КодДокумента, Примечания)
ON НовыеЗамещения.КодЗамещенияСотрудников = ЗамещенияСотрудников.КодЗамещенияСотрудников
WHEN NOT MATCHED THEN INSERT (От, До, КодСотрудникаЗамещаемого, КодСотрудникаЗамещающего, КодДокумента, Примечания) VALUES(НовыеЗамещения.От, НовыеЗамещения.До, НовыеЗамещения.КодСотрудникаЗамещаемого, НовыеЗамещения.КодСотрудникаЗамещающего, НовыеЗамещения.КодДокумента, НовыеЗамещения.Примечания)
WHEN MATCHED THEN UPDATE SET ЗамещенияСотрудников.От=НовыеЗамещения.Oт, ЗамещенияСотрудников.До=НовыеЗамещения.До, ЗамещенияСотрудников.КодСотрудникаЗамещающего=НовыеЗамещения.КодСотрудникаЗамещающего, ЗамещенияСотрудников.КодДокумента=НовыеЗамещения.КодДокумента, ЗамещенияСотрудников.Примечания=НовыеЗамещения.Примечания
WHEN NOT MATCHED BY SOURCE THEN DELETE;";

        #endregion

        #region Указания ИТ

        /// <summary>
        ///     Процедура выполнения указания
        /// </summary>
        public const string SP_ВыполнениеУказанийIT = "sp_ВыполнениеУказанийIT";

        /// <summary>
        ///     Выданное по указанию оборудование
        /// </summary>
        public const string SP_ВыданноеПоУказаниюОборудование = "sp_ВыданноеПоУказаниюОборудование";


        #region Проверки

        /// <summary>
        /// Строка запроса: Получение даты охранения последнего выполненного указания на сотрудника
        /// </summary>
        public const string SELECT_2356_ДатаСохраненияПоследнегоУказанияНаСотрудника = @"
--дата сохранения последнего выполненного указания на сотрудника
SELECT MAX(Сохранено) Сохранено
FROM vwДокументыДокументыДанные ДД (nolock) 
WHERE КодТипаДокумента = 2356 AND КодСотрудника1 = @КодСотрудника AND _КодДокумента <> @КодДокумента 
	AND EXISTS(SELECT * FROM ПодписиДокументов X WHERE X.КодДокумента = ДД._КодДокумента AND ТипПодписи = 1)";

        /// <summary>
        ///     Проверка наличия указаний на указанного сотрудника и указанное что организовать
        /// </summary>
        public const string SELECT_2356_CHECK_ДругиеУказанияНаСотрудника = @"
--Проверка наличия указаний на указанного сотрудника и указанное что организовать
DECLARE @Язык char(2)
SELECT @Язык = Язык FROM Инвентаризация.dbo.Сотрудники WHERE SID=SUSER_SID()

SELECT X.КодДокумента, 

        CASE WHEN НазваниеДокумента <> '' THEN НазваниеДокумента 
        ELSE
            CASE    WHEN @Язык='ru' THEN ТипыДокументов.ТипДокумента                
                    ELSE ТипыДокументов.TypeDoc
            END   
        END
        + ' №' + X.НомерДокумента + CASE WHEN @Язык='ru' THEN ' от ' ELSE ' dd ' END + CONVERT(varchar, X.ДатаДокумента, 104) Документ     
FROM    (SELECT _КодДокумента КодДокумента, НазваниеДокумента, КодТипаДокумента, НомерДокумента, ДатаДокумента
        FROM vwДокументыДокументыДанные (nolock) 
        WHERE	КодТипаДокумента=2356 
		AND КодСотрудника1=@КодСотрудника 
		AND (
			(@ЧтоОрганизовать = 1 AND (Int6 IS NULL OR Int6 = @ЧтоОрганизовать AND КодРасположения1=@КодРасположения1))
			OR (@ЧтоОрганизовать = 4 AND (Int6 IS NULL OR Int6 = @ЧтоОрганизовать) AND КодРасположения1 IS NULL)
			OR (Int6 = @ЧтоОрганизовать AND (КодРасположения1 IS NULL OR (КодРасположения1 = @КодРасположения1)))		
		)
		AND КодДокумента <> @КодДокумента
		AND NOT EXISTS(SELECT * FROM ПодписиДокументов WHERE КодДокумента = vwДокументыДокументыДанные._КодДокумента AND ТипПодписи=1)) X INNER JOIN 
        ТипыДокументов ON ТипыДокументов.КодТипаДокумента = X.КодТипаДокумента
ORDER BY X.ДатаДокумента
";

        /// <summary>
        ///     Проверка унильности логина сотрудника
        /// </summary>
        public const string SELECT_2356_CHECK_УникальныйЛогинСотрудника = @"
--Проверка уникальности логина
SELECT КодСотрудника FROM Инвентаризация.dbo.Сотрудники WHERE КодСотрудника <> @КодСотрудника AND Login = @Login
";
        /// <summary>
        ///     Проверка, является ли переданный номер мобильным
        /// </summary>
        public const string SELECT_2356_CHECK_НомерТелефонаЯвляетсяМобильным = @"
--проверка, является ли переданный номер мобильным
SELECT * FROM ТелефонныеКоды
WHERE (@НомерТелефона LIKE ТелефонныеКоды.ТелефонныйКод + '%') AND КодТипаТелефоннойСвязи IN(1,4)
";


        /// <summary>
        ///     Проверка, что указанный сотрудник работает месте группы сотрудников
        /// </summary>
        public const string SELECT_2356_CHECK_СотрудникНаМестеГруппы = @"
SELECT	Сотрудники.КодСотрудника, Сотрудник 
FROM	Сотрудники INNER JOIN
        РабочиеМеста ON Сотрудники.КодСотрудника = РабочиеМеста.КодСотрудника
WHERE	КодРасположения = @КодРасположения AND РабочиеМеста.КодСотрудника <> @КодСотрудника 
	    AND EXISTS(SELECT * FROM Сотрудники X WHERE X.КодОбщегоСотрудника = Сотрудники.КодСотрудника)
";

        #endregion

        #region Позиции

        /// <summary>
        ///     Строка запроса: Получение позицию указаний папки по ID
        /// </summary>
        public const string SELECT_ID_ПозицияУказанийИТПапки = @"
--получение позиций указаний папки по коду позиции
SELECT * FROM vwПозицииУказанийИТПапки (nolock) WHERE КодПозицииУказанийИТПапка = @id";

        /// <summary>
        ///     Строка запроса: Получение позиций указаний папки по коду документа ID
        /// </summary>
        public const string SELECT_ID_DOC_ПозицииУказанийИТПапки = @"
--получение позиций указаний папки по коду документа
SELECT * FROM vwПозицииУказанийИТПапки (nolock) WHERE КодДокумента = @id";

        /// <summary>
        ///     Строка запроса: Получение позицию указаний роли по ID
        /// </summary>
        public const string SELECT_ID_ПозицияУказанийИТРоли = @"
--получение позиций указаний роли по коду позиции
SELECT * FROM vwПозицииУказанийИТРоли (nolock) WHERE КодПозицииУказанийИТРоль = @id";

        /// <summary>
        ///     Строка запроса: Получение позиций указаний роли по коду документа ID
        /// </summary>
        public const string SELECT_ID_DOC_ПозицииУказанийИТРоли = @"
--получение позиций указаний роли по коду документа
SELECT * FROM vwПозицииУказанийИТРоли (nolock) WHERE КодДокумента = @id";

        /// <summary>
        ///     Подчиненный запрос без SELECT
        ///     Строка запроса: Получение позиций указаний роли по коду документа ID
        /// </summary>
        public const string SUBQUERY_ID_DOC_ПозицииУказанийИТРоли = @"
--загрузка расширенной информации о позициях документа
(SELECT	Позиции.КодПозицииУказанийИТРоль,
        Позиции.КодДокумента,
        Позиции.КодРоли,
        Позиции.КодЛица,
        CASE	WHEN Позиции.КодЛица = 0 THEN '' 
	            ELSE ISNULL(ISNULL(ISNULL(NULLIF(Карточки.КраткоеНазваниеРус,''), NULLIF(Карточки.КраткоеНазваниеЛат,'')),Лица.Кличка), '#' + CONVERT(varchar,Позиции.КодЛица)) END НазваниеЛица,
        Позиции.Изменил,
        Позиции.Изменено       
FROM    (SELECT * FROM vwПозицииУказанийИТРоли (nolock) WHERE КодДокумента = @id) Позиции LEFT JOIN 
	    Справочники.dbo.vwЛица Лица (nolock) ON Позиции.КодЛица = Лица.КодЛица LEFT JOIN
	    Справочники.dbo.vwКарточкиЮрЛиц Карточки (nolock) ON Лица.КодЛица = Карточки.КодЛица AND Карточки.От < GETDATE() AND Карточки.До > GETDATE() ) T0
";

        /// <summary>
        ///     Подчиненный запрос без SELECT
        ///     Строка запроса: Получение позицию указаний роли по ID
        /// </summary>
        public const string SUBQUERY_ID_ПозицииУказанийИТРоли = @"
(SELECT	Позиции.КодПозицииУказанийИТРоль,
        Позиции.КодДокумента,
        Позиции.КодРоли,
        Позиции.КодЛица,
        CASE	WHEN Позиции.КодЛица = 0 THEN '' 
	            ELSE ISNULL(ISNULL(ISNULL(NULLIF(Карточки.КраткоеНазваниеРус,''), NULLIF(Карточки.КраткоеНазваниеЛат,'')),Лица.Кличка), '#' + CONVERT(varchar,Позиции.КодЛица)) END НазваниеЛица,
        Позиции.Изменил,
        Позиции.Изменено       
FROM    (SELECT * FROM vwПозицииУказанийИТРоли (nolock) WHERE КодПозицииУказанийИТРоль = @id) Позиции LEFT JOIN 
	    Справочники.dbo.vwЛица Лица (nolock) ON Позиции.КодЛица = Лица.КодЛица LEFT JOIN
	    Справочники.dbo.vwКарточкиЮрЛиц Карточки (nolock) ON Лица.КодЛица = Карточки.КодЛица AND Карточки.От < GETDATE() AND Карточки.До > GETDATE()) T0
";

        /// <summary>
        ///     Подчиненный запрос без SELECT
        ///     Строка запроса: Получение позиций указаний типы по коду документа ID
        /// </summary>
        public const string SUBQUERY_ID_DOC_ПозицииУказанийИТТипы = @"
(SELECT	Позиции.КодПозицииУказанийИТТипЛица,
        Позиции.КодДокумента,
        Позиции.КодКаталога,
        ISNULL(Каталоги.Каталог,'') Каталог,        
        Позиции.КодТемыЛица,        
        ISNULL(ТемыЛиц.ТемаЛица,'') ТемаЛица,
        Позиции.Изменил,
        Позиции.Изменено       
FROM    (SELECT * FROM vwПозицииУказанийИТТипыЛиц (nolock) WHERE КодДокумента = @id) Позиции LEFT JOIN 
        Справочники.dbo.Каталоги Каталоги ON Позиции.КодКаталога = Каталоги.КодКаталога LEFT JOIN 
        Справочники.dbo.vwТемыЛиц ТемыЛиц ON Позиции.КодТемыЛица = ТемыЛиц.КодТемыЛица) T0
";

        /// <summary>
        ///     Подчиненный запрос без SELECT
        ///     Строка запроса: Получение позиции указаний типы по ID
        /// </summary>
        public const string SUBQUERY_ID_ПозицииУказанийИТТипы = @"
(SELECT	Позиции.КодПозицииУказанийИТТипЛица,
        Позиции.КодДокумента,
        Позиции.КодКаталога,
        ISNULL(Каталоги.Каталог,'<все каталоги>') Каталог,        
        Позиции.КодТемыЛица,        
        ISNULL(ТемыЛиц.ТемаЛица,'<все типы лиц>') ТемаЛица,
        Позиции.Изменил,
        Позиции.Изменено       
FROM    (SELECT * FROM vwПозицииУказанийИТТипыЛиц (nolock) WHERE КодПозицииУказанийИТТипЛица = @id) Позиции 
        LEFT JOIN Справочники.dbo.Каталоги Каталоги ON Позиции.КодКаталога = Каталоги.КодКаталога
        LEFT JOIN Справочники.dbo.vwТемыЛиц ТемыЛиц ON Позиции.КодТемыЛица = ТемыЛиц.КодТемыЛица) T0
";

        #endregion

        #endregion

        #region ПозицииСчетовНаПредоплату

        /// <summary>
        ///     Подчиненный запрос без SELECT
        ///     Строка запроса: Получение записи по коду позиции счета на предоплату
        /// </summary>
        public const string SUBQUERY_ID_ПозицииСчетовНаПредоплату = @"
            (SELECT * FROM vwПозицииСчетовНаПредоплату (nolock) WHERE КодПозицииСчетаНаПредоплату=@id) T0
            ";

        /// <summary>
        ///     Подчиненный запрос без SELECT
        ///     Строка запроса: Получение записи по коду документа
        /// </summary>
        public const string SUBQUERY_ID_DOC_ПозицииСчетовНаПредоплату = @"
            (SELECT * FROM vwПозицииСчетовНаПредоплату (nolock) WHERE КодДокумента=@id) T0
            ";

        #endregion

        #region ДвиженияНаСкладах

        /// <summary>
        ///     Подчиненный запрос без SELECT
        ///     Строка запроса: Получение записи по коду движения на складе
        /// </summary>
        public const string SUBQUERY_ID_ДвиженияНаСкладах = @"
            (SELECT * FROM vwДвиженияНаСкладах (nolock) WHERE КодДвиженияНаСкладе=@id) T0
            ";

        /// <summary>
        ///     Подчиненный запрос без SELECT
        ///     Строка запроса: Получение движений на складе по коду документа
        /// </summary>
        public const string SUBQUERY_ID_DOC_ДвиженияНаСкладах = @"
            (SELECT * FROM vwДвиженияНаСкладах (nolock) WHERE КодДокумента=@id) T0
            ";

        /// <summary>
        ///     Строка запроса: Получение данных для списка движений на складах по коду документа
        /// </summary>
        public const string SELECT_ID_DOC_ДвиженияНаСкладах = @"
SELECT * FROM vwДвиженияНаСкладах (nolock) WHERE КодДокумента = @id";

        /// <summary>
        ///     Строка запроса: Получение данных для списка движений на складах по коду документа
        /// </summary>
        public const string SELECT_ID_DOC_ДвиженияНаСкладах_GRID =
            @"
--Получение данных для списка движений на складах по коду документа
IF OBJECT_ID('tempdb..#ДвиженияНаСкладах') IS NOT NULL DROP TABLE #ДвиженияНаСкладах
CREATE TABLE #ДвиженияНаСкладах (КодДвиженияНаСкладе int PRIMARY KEY, КодОтправкиВагона int, ОтправкаВагона varchar(150), 
				КодРесурса int, РесурсРус varchar(300), 
				Количество float, КодЕдиницыИзмерения int,ЕдиницаРус nvarchar(10), Точность int NOT NULL DEFAULT(0),
				ЦенаБезНДС money, КодСтавкиНДС int, Величина100 float, СтавкаНДС nvarchar(50), СтавкаНДСЛат nvarchar(50),
				СуммаБезНДС money, СуммаНДС money, Всего money,
				КодСтраныПроисхождения int, СтранаПроисхождения varchar(80) NOT NULL DEFAULT(''),
				КодТаможеннойДекларации int, ТаможеннаяДекларация varchar(300) NOT NULL DEFAULT(''), Порядок int, Изменил int, Изменено datetime)

INSERT #ДвиженияНаСкладах(КодДвиженияНаСкладе, КодОтправкиВагона, ОтправкаВагона, КодРесурса, РесурсРус, Количество, КодЕдиницыИзмерения, КодСтавкиНДС,
			ЦенаБезНДС, СуммаБезНДС, СуммаНДС, Всего, КодСтраныПроисхождения, КодТаможеннойДекларации, Порядок, Изменил, Изменено)			
SELECT	КодДвиженияНаСкладе, КодОтправкиВагона, '', КодРесурса, РесурсРус, Количество, КодЕдиницыИзмерения, КодСтавкиНДС,
	    ЦенаБезНДС, СуммаБезНДС, СуммаНДС, Всего, КодСтраныПроисхождения, КодТаможеннойДекларации, Порядок, Изменил, Изменено	
FROM	vwДвиженияНаСкладах ДвиженияНаСкладах (nolock) 
WHERE	ДвиженияНаСкладах.КодДокумента = @КодДокумента		

UPDATE	X
SET	    ЕдиницаРус = ISNULL(ЕдиницыИзмерения.ЕдиницаРус,'')
FROM	#ДвиженияНаСкладах X LEFT JOIN Справочники.dbo.ЕдиницыИзмерения ЕдиницыИзмерения ON X.КодЕдиницыИзмерения = ЕдиницыИзмерения.КодЕдиницыИзмерения 

UPDATE	X
SET	    ОтправкаВагона = Вагоны.ОтправкаВагона
FROM	#ДвиженияНаСкладах X INNER JOIN vwОтправкаВагонов Вагоны (nolock) ON Вагоны.КодОтправкиВагона = X.КодОтправкиВагона

UPDATE	X
SET	    Величина100 = СтавкиНДС.Величина * 100, СтавкаНДС = СтавкиНДС.СтавкаНДС, СтавкаНДСЛат = СтавкиНДС.СтавкаНДСЛат
FROM	#ДвиженияНаСкладах X INNER JOIN Справочники.dbo.СтавкиНДС СтавкиНДС ON СтавкиНДС.КодСтавкиНДС = X.КодСтавкиНДС

UPDATE	X
SET	    СтранаПроисхождения = Территории.Территория
FROM	#ДвиженияНаСкладах X INNER JOIN Инвентаризация.dbo.Территории Территории ON Территории.КодТерритории = X.КодСтраныПроисхождения

UPDATE	X
SET	    ТаможеннаяДекларация = ISNULL(NULLIF(ТД.НазваниеДокумента,''), ТТД.ТипДокумента) + ' №' + ТД.НомерДокумента + ISNULL(' от ' + CONVERT(VARCHAR, ТД.ДатаДокумента,4),'')
FROM	#ДвиженияНаСкладах X INNER JOIN 
	    vwДокументы ТД (nolock) ON ТД.КодДокумента = X.КодТаможеннойДекларации INNER JOIN
	    ТипыДокументов ТТД ON ТД.КодТипаДокумента = ТТД.КодТипаДокумента

UPDATE	X
SET	    X.Точность = Ресурсы.Точность
FROM	#ДвиженияНаСкладах X INNER JOIN
	    Справочники.dbo.Ресурсы Ресурсы (nolock) ON X.КодРесурса = Ресурсы.КодРесурса AND X.КодЕдиницыИзмерения = Ресурсы.КодЕдиницыИзмерения
IF EXISTS(SELECT * FROM #ДвиженияНаСкладах WHERE Точность = 0)
	    UPDATE	X
	    SET	    X.Точность = ЕдиницыИзмерения.Точность
	    FROM	#ДвиженияНаСкладах X INNER JOIN
		        Справочники.dbo.ЕдиницыИзмеренияДополнительные ЕдиницыИзмерения ON X.КодРесурса = ЕдиницыИзмерения.КодРесурса AND X.КодЕдиницыИзмерения = ЕдиницыИзмерения.КодЕдиницыИзмерения

SELECT * FROM #ДвиженияНаСкладах ORDER BY Порядок

DROP TABLE #ДвиженияНаСкладах
            ";

        /// <summary>
        ///     Строка запроса: Получение данных для списка движений на складах по коду документа, сгруппированных по ресурсу
        /// </summary>
        public const string SELECT_ID_DOC_ДвиженияНаСкладах_GRID_ПоРесурсу =
            @"
--Получение данных для списка движений на складах по коду документа, сгруппированных по ресурсу
IF OBJECT_ID('tempdb..#ДвиженияНаСкладах') IS NOT NULL DROP TABLE #ДвиженияНаСкладах
CREATE TABLE #ДвиженияНаСкладах (КодРесурса int, РесурсРус varchar(300), 
				Количество float, КодЕдиницыИзмерения int,ЕдиницаРус nvarchar(10), Точность int NOT NULL DEFAULT(0),
				ЦенаБезНДС money, КодСтавкиНДС int, Величина100 float, СтавкаНДС nvarchar(50), СтавкаНДСЛат nvarchar(50),
				СуммаБезНДС money, СуммаНДС money, Всего money)

INSERT #ДвиженияНаСкладах (	КодРесурса, Количество, КодЕдиницыИзмерения, ЦенаБезНДС, КодСтавкиНДС, СуммаБезНДС, СуммаНДС, Всего)
SELECT	КодРесурса,	SUM(Количество) Количество, КодЕдиницыИзмерения, ЦенаБезНДС, КодСтавкиНДС, SUM(СуммаНДС) СуммаНДС, SUM(СуммаБезНДС) СуммаБезНДС, SUM(Всего) Всего
FROM	vwДвиженияНаСкладах ДвиженияНаСкладах (nolock) 	
WHERE	КодДокумента=@КодДокумента
GROUP BY КодРесурса, КодЕдиницыИзмерения, ЦенаБезНДС, КодСтавкиНДС

UPDATE	X
SET	    РесурсРус = Ресурсы.РесурсРус
FROM	#ДвиженияНаСкладах X INNER JOIN Справочники.dbo.Ресурсы Ресурсы ON X.КодРесурса = Ресурсы.КодРесурса 

UPDATE	X
SET	    ЕдиницаРус = ISNULL(ЕдиницыИзмерения.ЕдиницаРус,'')
FROM	#ДвиженияНаСкладах X LEFT JOIN Справочники.dbo.ЕдиницыИзмерения ЕдиницыИзмерения ON X.КодЕдиницыИзмерения = ЕдиницыИзмерения.КодЕдиницыИзмерения 

UPDATE	X
SET	    Величина100 = СтавкиНДС.Величина * 100, СтавкаНДС = СтавкиНДС.СтавкаНДС, СтавкаНДСЛат = СтавкиНДС.СтавкаНДСЛат
FROM	#ДвиженияНаСкладах X INNER JOIN Справочники.dbo.СтавкиНДС СтавкиНДС ON СтавкиНДС.КодСтавкиНДС = X.КодСтавкиНДС

UPDATE	X
SET	    X.Точность = Ресурсы.Точность
FROM	#ДвиженияНаСкладах X INNER JOIN
	    Справочники.dbo.Ресурсы Ресурсы (nolock) ON X.КодРесурса = Ресурсы.КодРесурса AND X.КодЕдиницыИзмерения = Ресурсы.КодЕдиницыИзмерения

IF EXISTS(SELECT * FROM #ДвиженияНаСкладах WHERE Точность = 0)
	UPDATE	X
	SET	    X.Точность = ЕдиницыИзмерения.Точность
	FROM	#ДвиженияНаСкладах X INNER JOIN
		    Справочники.dbo.ЕдиницыИзмеренияДополнительные ЕдиницыИзмерения (nolock) ON X.КодРесурса = ЕдиницыИзмерения.КодРесурса AND X.КодЕдиницыИзмерения = ЕдиницыИзмерения.КодЕдиницыИзмерения

SELECT * FROM #ДвиженияНаСкладах ORDER BY РесурсРус

DROP TABLE #ДвиженияНаСкладах         
";

        /// <summary>
        ///     Обновление порядка
        /// </summary>
        public const string UPDATE_Order_ДвиженияНаСкладах =
            @"
DECLARE @ПорядокПосле int, @ПорядокТекущий int
DECLARE @Tbl TABLE (КодДвиженияНаСкладе int PRIMARY KEY, Порядок int)

IF (@КодДвиженияНаСкладеПосле = 0)
BEGIN
    SET @ПорядокТекущий = 1
    INSERT @Tbl
    SELECT КодДвиженияНаСкладе, Порядок FROM vwДвиженияНаСкладах 
		    WHERE КодДокумента = @КодДокумента AND КодДвиженияНаСкладе NOT IN(@КодДвиженияНаСкладеТекущий)
END
ELSE
BEGIN
    SELECT @ПорядокПосле = Порядок FROM vwДвиженияНаСкладах WHERE КодДвиженияНаСкладе = @КодДвиженияНаСкладеПосле
    SET @ПорядокТекущий = @ПорядокПосле + 1

    INSERT @Tbl
    SELECT КодДвиженияНаСкладе, Порядок FROM vwДвиженияНаСкладах 
		    WHERE КодДокумента = @КодДокумента AND Порядок >= @ПорядокПосле AND КодДвиженияНаСкладе NOT IN(@КодДвиженияНаСкладеПосле, @КодДвиженияНаСкладеТекущий)
END;

WHILE EXISTS(SELECT * FROM @Tbl)
BEGIN
	SET @ПорядокТекущий = @ПорядокТекущий + 1
	SELECT TOP 1 @КодДвиженияНаСкладеТекущий = КодДвиженияНаСкладе FROM @Tbl ORDER BY Порядок
	PRINT CONVERT(varchar,@КодДвиженияНаСкладеТекущий) + ' -> '  + CONVERT(varchar,@ПорядокТекущий)
	UPDATE vwДвиженияНаСкладах SET Порядок = @ПорядокТекущий WHERE КодДвиженияНаСкладе = @КодДвиженияНаСкладеТекущий AND Порядок <> @ПорядокТекущий
	DELETE @Tbl WHERE КодДвиженияНаСкладе = @КодДвиженияНаСкладеТекущий
END
        ";

        #endregion

        #region Оказанные услуги

        /// <summary>
        ///     Подчиненный запрос без SELECT
        ///     Строка запроса: Получение записи по коду оказанной услуги
        /// </summary>
        public const string SUBQUERY_ID_ОказанныеУслуги = @"
            (SELECT * FROM vwОказанныеУслуги (nolock) WHERE КодОказаннойУслуги=@id) T0
            ";

        /// <summary>
        ///     Подчиненный запрос без SELECT
        ///     Строка запроса: Получение оказанных услуг по коду документа
        /// </summary>
        public const string SUBQUERY_ID_DOC_ОказанныеУслуги = @"
            (SELECT * FROM vwОказанныеУслуги (nolock) WHERE КодДокумента=@id) T0
            ";

        /// <summary>
        ///     Строка запроса: Получение данных для списка услуг по коду документа
        /// </summary>
        public const string SELECT_ID_DOC_ОказанныеУслуги_GRID =
            @"
--Получение данных для списка услуг по коду документа
IF OBJECT_ID('tempdb..#ОказанныеУслуги') IS NOT NULL DROP TABLE #ОказанныеУслуги
CREATE TABLE #ОказанныеУслуги (КодОказаннойУслуги int PRIMARY KEY, GuidОказаннойУслуги uniqueidentifier,				
				КодРесурса int, РесурсРус varchar(300), РесурсЛат varchar(300), КодУчасткаОтправкиВагона int,
				Агент1 tinyint, Агент2 tinyint, КодДвиженияНаСкладе int, 
				Количество float, КодЕдиницыИзмерения int, ЕдиницаРус nvarchar(10), Точность int, Коэффициент float,
				ЦенаБезНДС money, КодСтавкиНДС int, Величина100 float, СтавкаНДС nvarchar(50), СтавкаНДСЛат nvarchar(50),
                СуммаБезНДС money, СуммаНДС money, Всего money,
				Порядок int, Изменил int, Изменено datetime)
				
INSERT #ОказанныеУслуги(КодОказаннойУслуги, GuidОказаннойУслуги, Агент1, Агент2, КодДвиженияНаСкладе,
			КодРесурса, РесурсРус, РесурсЛат, КодУчасткаОтправкиВагона, Количество, КодЕдиницыИзмерения,
			Коэффициент, ЦенаБезНДС, СуммаБезНДС, КодСтавкиНДС, СуммаНДС, Всего, Порядок, Изменил, Изменено)
SELECT 	КодОказаннойУслуги, GuidОказаннойУслуги, Агент1, Агент2, КодДвиженияНаСкладе,
	    КодРесурса, РесурсРус, РесурсЛат, КодУчасткаОтправкиВагона, Количество, КодЕдиницыИзмерения,
	    Коэффициент, ЦенаБезНДС, СуммаБезНДС, КодСтавкиНДС, СуммаНДС, Всего, Порядок, Изменил, Изменено
FROM	vwОказанныеУслуги (nolock)
WHERE	КодДокумента = @КодДокумента

UPDATE	X
SET	    ЕдиницаРус = ISNULL(ЕдиницыИзмерения.ЕдиницаРус,'')
FROM	#ОказанныеУслуги X LEFT JOIN Справочники.dbo.ЕдиницыИзмерения ЕдиницыИзмерения ON X.КодЕдиницыИзмерения = ЕдиницыИзмерения.КодЕдиницыИзмерения 

UPDATE	X
SET	    Величина100 = СтавкиНДС.Величина * 100, СтавкаНДС = СтавкиНДС.СтавкаНДС, СтавкаНДСЛат = СтавкиНДС.СтавкаНДСЛат
FROM	#ОказанныеУслуги X INNER JOIN Справочники.dbo.СтавкиНДС СтавкиНДС ON СтавкиНДС.КодСтавкиНДС = X.КодСтавкиНДС


UPDATE	X
SET	    X.Точность = Ресурсы.Точность
FROM	#ОказанныеУслуги X INNER JOIN
	    Справочники.dbo.Ресурсы Ресурсы (nolock) ON X.КодРесурса = Ресурсы.КодРесурса AND X.КодЕдиницыИзмерения = Ресурсы.КодЕдиницыИзмерения
IF EXISTS(SELECT * FROM #ОказанныеУслуги WHERE Точность IS NULL)
	    UPDATE	X
	    SET		X.Точность = ЕдиницыИзмерения.Точность
	    FROM	#ОказанныеУслуги X INNER JOIN
		        Справочники.dbo.ЕдиницыИзмеренияДополнительные ЕдиницыИзмерения ON X.КодРесурса = ЕдиницыИзмерения.КодРесурса AND X.КодЕдиницыИзмерения = ЕдиницыИзмерения.КодЕдиницыИзмерения

UPDATE #ОказанныеУслуги SET Точность = 0 WHERE Точность IS NULL
     		
SELECT * FROM #ОказанныеУслуги ORDER BY Порядок     				
DROP TABLE #ОказанныеУслуги   	
            ";

        /// <summary>
        ///     Обновление порядка
        /// </summary>
        public const string UPDATE_Order_ОказанныеУслуг =
            @"
DECLARE @ПорядокПосле int, @ПорядокТекущий int
DECLARE @Tbl TABLE (КодОказаннойУслуги int PRIMARY KEY, Порядок int)

IF (@КодОказаннойУслугиПосле = 0)
BEGIN
    SET @ПорядокТекущий = 1
    INSERT @Tbl
    SELECT КодОказаннойУслуги, Порядок FROM vwОказанныеУслуги 
		    WHERE КодДокумента = @КодДокумента AND КодОказаннойУслуги NOT IN(@КодОказаннойУслугиТекущий)
END
ELSE
BEGIN
    SELECT @ПорядокПосле = Порядок FROM vwОказанныеУслуги WHERE КодОказаннойУслуги = @КодОказаннойУслугиПосле
    SET @ПорядокТекущий = @ПорядокПосле + 1

    INSERT @Tbl
    SELECT КодОказаннойУслуги, Порядок FROM vwОказанныеУслуги 
		    WHERE КодДокумента = @КодДокумента AND Порядок >= @ПорядокПосле AND КодОказаннойУслуги NOT IN(@КодОказаннойУслугиПосле, @КодОказаннойУслугиТекущий)
END;

WHILE EXISTS(SELECT * FROM @Tbl)
BEGIN
	SET @ПорядокТекущий = @ПорядокТекущий + 1
	SELECT TOP 1 @КодОказаннойУслугиТекущий = КодОказаннойУслуги FROM @Tbl ORDER BY Порядок
	PRINT CONVERT(varchar,@КодОказаннойУслугиТекущий) + ' -> '  + CONVERT(varchar,@ПорядокТекущий)
	UPDATE vwОказанныеУслуги SET Порядок = @ПорядокТекущий WHERE КодОказаннойУслуги = @КодОказаннойУслугиТекущий AND Порядок <> @ПорядокТекущий
	DELETE @Tbl WHERE КодОказаннойУслуги = @КодОказаннойУслугиТекущий
END
        ";

        #endregion

        #region Таможенная декларация

        /// <summary>
        ///     Строка запроса: Получение документов
        /// </summary>
        public const string SELECT_ГТД = @"
SELECT T0.[КодДокумента], T0.[НомерДокумента], T0.[ДатаДокумента], T0.[Описание], T0.[Изменил], T0.[Изменено]
FROM vw_Д_ГТД T0 (nolock) ";

        /// <summary>
        ///     Строка запроса: Поиск документа по коду
        /// </summary>
        public static readonly string SELECT_ID_ГТД =
            string.Format(@"{0} WHERE T0.КодДокумента = @id", string.Format(SELECT_ГТД, ""));

        #endregion

        #region Ставка НДС

        /// <summary>
        ///     Строка запроса: Получить Ставки НДС
        /// </summary>
        public const string SELECT_ID_СтавкаНДС = @"SELECT 
                КодСтавкиНДС, СтавкаНДС, СтавкаНДСЛат, Величина, Приоритет, СпецНДС, КодТерритории, Действует
                FROM СтавкиНДС 
                WHERE КодСтавкиНДС = @Id
                ";


        /// <summary>
        ///     Строка запроса: Получить Ставки НДС
        /// </summary>
        public const string SELECT_СтавкиНДС = @"SELECT 
                КодСтавкиНДС, СтавкаНДС, СтавкаНДСЛат, Величина, Приоритет, СпецНДС, КодТерритории, Действует
                FROM СтавкиНДС 
                WHERE (КодТерритории IS NULL OR КодТерритории = @КодТерритории )
                ";

        #endregion

        #region Приложения Оценки Форм

        /// <summary>
        ///     Получение состояния идентификатора оценки
        /// </summary>
        public const string SELECT_ИдентификаторОценкиИнтерфейса = @"
--получение состояния идентификатора оценки
SELECT COUNT(*) N FROM ИдентификаторыОценок WHERE КодИдентификатораОценки = @КодИдентификатораОценки AND Отключено = 0";

        /// <summary>
        ///     Получение состояния Нравится - не нравится
        /// </summary>
        public const string SELECT_ОценкиИнтерфейса = @"
--получение состояния Нравится - не нравится
SELECT Оценка = [dbo].[fn_ИтоговаяОценкаСотрудника] (@КодИдентификатораОценки)";

        /// <summary>
        ///     Получение итогового состояния Нравится - не нравится
        /// </summary>
        public const string SELECT_ОценкаИнтерфейсаИтого = @"
--получение итогового состояния Нравится - не нравится
SELECT * FROM dbo.vwОценкиИнтерфейсаИтоги where КодИдентификатораОценки = @КодИдентификатораОценки";

        /// <summary>
        ///     Установка состояния Нравится - не нравится
        /// </summary>
        public const string INSERT_ОценкиИнтерфейса = @"
--установка состояния Нравится - не нравится
EXEC sp_ОценкаСотрудника @КодИдентификатораОценки, @Оценка";

        /// <summary>
        ///     Обновление состояния сотрудника
        /// </summary>
        public const string UPDATE_СотрудникСостояние = @"
--обновление состояния сотрудника
EXEC sp_СотрудникСостояние_Upd @КодСотрудника, @Состояние";

        #endregion


        //++++++++++++++++++ Бухгалтерия ++++++++++++++++++

        #region Restore 1S

        /// <summary>
        ///     Строка запроса: Получить список доступных для восстановление баз 1с
        /// </summary>
        public const string SELECT_Restore1S_ДоступныеДляВосстановленияБазы = @"
--получить список доступных для восстановление баз 1с
SELECT Dbase FROM vwБазы1s UNION ALL SELECT Dbase FROM vwБухгалтерии1С ORDER BY Dbase
";

        /// <summary>
        ///     Строка запроса: Получить список баз, находящихся в разработке у программистов 1С
        /// </summary>
        public const string SELECT_Restore1S_БазыВРазработке = @"
--получить список баз, находящихся в разработке у программистов 1С
SELECT DISTINCT Dbase, КодЗаявки, ТекущаяDbase, Загружено FROM vwБазы1s_Разработка";

        /// <summary>
        ///     Строка запроса: Получить список сотрудников, имеющих доступ к восстановленной базе 1С
        /// </summary>
        public const string SELECT_Restore1S_СотрудникиИмеющиеДоступКБазе = @"
--получить список сотрудников, имеющих доступ к восстановленной базе 1С
SELECT      Сотрудники.КодСотрудника, Сотрудники.Сотрудник 
FROM        vwБазы1s_РазработкаСотрудники Базы INNER JOIN 
            Инвентаризация.dbo.Сотрудники Сотрудники ON Базы.КодСотрудника = Сотрудники.КодСотрудника 
WHERE       Dbase = @Dbase 
ORDER BY    Сотрудники.Сотрудник
";

        /// <summary>
        ///     Строка запроса: Добавление сотруднику прав на работу с восстановленной базой
        /// </summary>
        public const string INSERT_Restore1S_ДобавлениеДоступаСотруднику = @"
--добавление сотрдунику прав на работу с восстановленной базой
IF NOT EXISTS(SELECT * FROM vwБазы1s_РазработкаСотрудники WHERE Dbase = @Dbase AND КодСотрудника = @КодСотрудника)
    INSERT vwБазы1s_РазработкаСотрудники(Dbase,КодСотрудника) VALUES (@Dbase, @КодСотрудника)
";

        /// <summary>
        ///     Строка запроса: Удаление у сотрудника прав на работу с восстановленной базой
        /// </summary>
        public const string DELETE_Restore1S_УдалениеПравДоступУСотрудника = @"
--удаление у сотрудника прав на работу с восстановленной базой
DELETE vwБазы1s_РазработкаСотрудники WHERE Dbase = @Dbase AND КодСотрудника = @КодСотрудника
";

        /// <summary>
        ///     Строка запроса: Удаление прав у всех сотрудников на работы с базой
        /// </summary>
        public const string DELETE_Restore1S_УдалениеПравДоступУВсехСотрудников = @"
--удаление прав у всех сотрудников на работы с базой
DELETE vwБазы1s_РазработкаСотрудники WHERE Dbase = @Dbase
";

        /// <summary>
        ///     Процедура восстановления баз данных 1С, находящихся в разработке
        /// </summary>
        public const string SP_1sRestoreРазработка = "sp_1sRestoreРазработка";

        #endregion

        //++++++++++++++++++ Тарификация ++++++++++++++++++


        /// <summary>
        /// Тарификация в самолете по дням
        /// </summary>
        public const string SELECT_JET_ПоДням = @"
--тарификация по дням

DECLARE @LocalNet varchar(10) = '192.168.%',  @LocalNet1 varchar(10) = '10.10.10.%'

SET @Day	    = ISNULL(@Day,'')
SET @Device	    = ISNULL(@Device,'')
SET @DeviceName		= ISNULL(@DeviceName,'')
SET @Address		= ISNULL(@Address,'')

SELECT День, CAST(SUM(Отправлено) AS money)/1024 Отправлено, CAST(SUM(Получено) AS money) /1024 Получено, CAST((SUM(Отправлено) + SUM(Получено)) AS money)/1024 Итого
FROM (	SELECT	CAST(CAST(Год*10000 + Месяц*100 + День as varchar(255)) as date) День,
		    CASE WHEN Отправитель LIKE @LocalNet OR Отправитель LIKE @LocalNet1 THEN КоличествоБайт ELSE 0 END Отправлено,
		    CASE WHEN Получатель LIKE @LocalNet OR Получатель LIKE @LocalNet1 THEN КоличествоБайт ELSE 0 END Получено,
		    CASE WHEN Отправитель LIKE @LocalNet OR Отправитель LIKE @LocalNet1 THEN Отправитель ELSE Получатель END Клиент,
		    CASE WHEN Отправитель LIKE @LocalNet OR Отправитель LIKE @LocalNet1 THEN ОтправительКлиент ELSE ПолучательКлиент END КлиентName,
		    CASE WHEN Отправитель LIKE @LocalNet OR Отправитель LIKE @LocalNet1 THEN Получатель ELSE Отправитель END Адрес
	    FROM vwТарификацияJet
	    WHERE Когда >= @DateFrom AND Когда < @DateTo) X 
WHERE	
	((Клиент LIKE @LocalNet OR Клиент LIKE @LocalNet1) 
	AND (Адрес NOT LIKE @LocalNet AND Адрес NOT LIKE @LocalNet1)) 
	AND (@Day = '' OR День = @Day) AND (@Device = '' OR Клиент = @Device AND КлиентName = @DeviceName) AND (@Address = '' OR Адрес = @Address)
GROUP BY День
";

        /// <summary>
        /// Тарификация в самолете по клиентам
        /// </summary>
        public const string SELECT_JET_ПоКлиентам = @"
--тарификация по клиентам

DECLARE @LocalNet varchar(10) = '192.168.%',  @LocalNet1 varchar(10) = '10.10.10.%'

SET @Day		= ISNULL(@Day,'')
SET @Device		= ISNULL(@Device,'')
SET @DeviceName		= ISNULL(@DeviceName,'')
SET @Address		= ISNULL(@Address,'')

SELECT	Клиент, КлиентName, CAST(SUM(Отправлено) AS money)/1024 Отправлено, CAST(SUM(Получено) AS money)/1024 Получено, CAST((SUM(Отправлено) + SUM(Получено)) AS money)/1024 Итого
FROM (	SELECT	CAST(CAST(Год*10000 + Месяц*100 + День as varchar(255)) as date) День,
		        CASE WHEN Отправитель LIKE @LocalNet OR Отправитель LIKE @LocalNet1 THEN КоличествоБайт ELSE 0 END Отправлено,
		        CASE WHEN Получатель LIKE @LocalNet OR Получатель LIKE @LocalNet1 THEN КоличествоБайт ELSE 0 END Получено,
		        CASE WHEN Отправитель LIKE @LocalNet OR Отправитель LIKE @LocalNet1 THEN Отправитель ELSE Получатель END Клиент,
			CASE WHEN Отправитель LIKE @LocalNet OR Отправитель LIKE @LocalNet1 THEN ОтправительКлиент ELSE ПолучательКлиент END КлиентName,
		        CASE WHEN Отправитель LIKE @LocalNet OR Отправитель LIKE @LocalNet1 THEN Получатель ELSE Отправитель END Адрес
	    FROM vwТарификацияJet
	    WHERE Когда >= @DateFrom AND Когда < @DateTo) X 
WHERE	
	Адрес NOT LIKE @LocalNet AND Адрес NOT LIKE @LocalNet1 
	AND (@Day = '' OR День = @Day) AND (@Device = '' OR Клиент = @Device AND КлиентName = @DeviceName) AND (@Address = '' OR Адрес = @Address)
GROUP BY Клиент, КлиентName
";

        /// <summary>
        /// Тарификация в самолете по адресам
        /// </summary>
        public const string SELECT_JET_ПоАдресам = @"
--тарификация по адресам

DECLARE @LocalNet varchar(10) = '192.168.%',  @LocalNet1 varchar(10) = '10.10.10.%'

SET @Day	= ISNULL(@Day,'')
SET @Device	= ISNULL(@Device,'')
SET @DeviceName	= ISNULL(@DeviceName,'')
SET @Address	= ISNULL(@Address,'')

SELECT	Адрес, АдресHostName, CAST(SUM(Отправлено) AS money)/1024 Отправлено, CAST(SUM(Получено) AS money) /1024 Получено, CAST((SUM(Отправлено) + SUM(Получено)) AS money)/1024 Итого
FROM (	SELECT	CAST(CAST(Год*10000 + Месяц*100 + День as varchar(255)) as date) День,
		        CASE WHEN Отправитель LIKE @LocalNet OR Отправитель LIKE @LocalNet1 THEN КоличествоБайт ELSE 0 END Отправлено,
		        CASE WHEN Получатель LIKE @LocalNet OR Получатель LIKE @LocalNet1 THEN КоличествоБайт ELSE 0 END Получено,
		        CASE WHEN Отправитель LIKE @LocalNet OR Отправитель LIKE @LocalNet1 THEN Отправитель ELSE Получатель END Клиент,
			CASE WHEN Отправитель LIKE @LocalNet OR Отправитель LIKE @LocalNet1 THEN ОтправительКлиент ELSE ПолучательКлиент END КлиентName,
		        CASE WHEN Отправитель LIKE @LocalNet OR Отправитель LIKE @LocalNet1 THEN Получатель ELSE Отправитель END Адрес,
			CASE WHEN Отправитель LIKE @LocalNet OR Отправитель LIKE @LocalNet1 THEN ПолучательHostName ELSE ОтправительHostName END АдресHostName
	    FROM vwТарификацияJet
	    WHERE Когда >= @DateFrom AND Когда < @DateTo) X 
WHERE	
	Адрес NOT LIKE @LocalNet AND Адрес NOT LIKE @LocalNet1 
	AND (@Day = '' OR День = @Day) AND (@Device = '' OR Клиент = @Device AND КлиентName = @DeviceName) AND (@Address = '' OR Адрес = @Address)
GROUP BY Адрес, АдресHostName
";

        /// <summary>
        /// Тарификация в самолете: название хостов в интернете
        /// </summary>
        public const string SELECT_JET_HostNames = @"
--Тарификация в самолете: название хостов в интернете
SELECT * FROM ТарификацияJetHostNames
";
        /// <summary>
        /// Тарификация в самолете: получение информации о hostname
        /// </summary>
        public const string SELECT_JET_HostNames_Range = @"
--Тарификация в самолете: получение информации о hostname
DECLARE @IpInt bigint

SET @IpInt = Инвентаризация.dbo.fn_ip2int(@IpAddress)
SELECT * FROM ТарификацияJetHostNames WHERE HostName = @HostName AND RangeStartInt <= @IpInt AND RangeEndInt >= @IpInt
        ";

        /// <summary>
        /// Тарификация в самолете: добавление записи
        /// </summary>
        public const string INSERT_JET_HostNames = @"
--Тарификация в самолете: добавление записи
INSERT ТарификацияJetHostNames(HostName, RangeStart, RangeEnd) VALUES(@HostName, @RangeStart, @RangeEnd)
";
        /// <summary>
        /// Тарификация в самолете: обновление записи
        /// </summary>
        public const string UPDATE_JET_HostNames = @"
--Тарификация в самолете: обновление записи
UPDATE  ТарификацияJetHostNames
SET     HostName = @HostName_New,
        RangeStart = @RangeStart_New,
        RangeEnd = @RangeEnd_New
WHERE   HostName = @HostName AND RangeStart = @RangeStart
";
        /// <summary>
        /// Тарификация в самолете: удаление записи
        /// </summary>
        public const string DELETE_JET_HostNames = @"
--Тарификация в самолете: удаление записи
DELETE ТарификацияJetHostNames WHERE HostName = @HostName AND RangeStart = @RangeStart
";
    }
}